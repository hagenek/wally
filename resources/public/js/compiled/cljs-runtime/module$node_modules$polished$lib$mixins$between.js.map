{
"version":3,
"file":"module$node_modules$polished$lib$mixins$between.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,CAAA,+CAAA,CAAoE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG5GA,OAAQC,CAAAA,UAAR,CAAqB,CAAA,CACrBD,QAAQE,CAAAA,OAAR,CAAkB,IAAK,EAEvB,KAAIC,kBAMJC,QAA+B,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAIJ,CAAAA,UAAX,CAAwBI,GAAxB,CAA8B,CAAEH,QAASG,GAAX,CAAvC,CAJrC,CAEAP,OAAA,CAAQ,0DAAR,CAFA,CAoEAE,QAAQE,CAAAA,OAAR,CAvCAI,QAAgB,CAACC,QAAD,CAAWC,MAAX,CAAmBC,SAAnB,CAA8BC,SAA9B,CAAyC,CACrC,IAAK,EAAvB,GAAID,SAAJ,GACEA,SADF,CACc,OADd,CAIkB,KAAK,EAAvB,GAAIC,SAAJ,GACEA,SADF,CACc,QADd,CALuD,KASnDC,iBAAmB,CAAC,CAAA,CAAGR,iBAAkBD,CAAAA,OAAtB,EAA+BK,QAA/B,CACnBK;QAAAA,CAAmBD,gBAAA,CAAiB,CAAjB,CACnBE,iBAAAA,CAAeF,gBAAA,CAAiB,CAAjB,CAXoC,KAanDG,kBAAoB,CAAC,CAAA,CAAGX,iBAAkBD,CAAAA,OAAtB,EAA+BM,MAA/B,CACpBO,OAAAA,CAAiBD,iBAAA,CAAkB,CAAlB,CACjBE,kBAAAA,CAAaF,iBAAA,CAAkB,CAAlB,CAfsC,KAiBnDG,kBAAoB,CAAC,CAAA,CAAGd,iBAAkBD,CAAAA,OAAtB,EAA+BO,SAA/B,CACpBS,UAAAA,CAAoBD,iBAAA,CAAkB,CAAlB,CACpBE,kBAAAA,CAAgBF,iBAAA,CAAkB,CAAlB,CAnBmC,KAqBnDG,kBAAoB,CAAC,CAAA,CAAGjB,iBAAkBD,CAAAA,OAAtB,EAA+BQ,SAA/B,CACpBW,UAAAA,CAAoBD,iBAAA,CAAkB,CAAlB,CACpBE,kBAAAA,CAAgBF,iBAAA,CAAkB,CAAlB,CAEpB,IAAiC,QAAjC,GAAI,MAAOF,UAAX,EAA0E,QAA1E;AAA6C,MAAOG,UAApD,EAAsF,CAACF,iBAAvF,EAAwG,CAACG,iBAAzG,EAA0HH,iBAA1H,GAA4IG,iBAA5I,CACE,KAAUC,MAAJ,CAAU,sFAAV,CAAN,CAGF,GAAgC,QAAhC,GAAI,MAAOX,SAAX,EAAsE,QAAtE,GAA4C,MAAOG,OAAnD,EAAkF,CAACF,gBAAnF,EAAmG,CAACG,iBAApG,EAAkHH,gBAAlH,GAAmIG,iBAAnI,CACE,KAAUO,MAAJ,CAAU,kFAAV,CAAN,CAGEC,QAAAA,EAASZ,QAATY,CAA4BT,MAA5BS,GAA+CN,SAA/CM,CAAmEH,SAAnEG,CAEJ,OAAO,OAAP,CAAsBC,CADXV,MACWU,CADMD,QACNC;AADcJ,SACdI,EAAAA,OAAL,CAAa,CAAb,CAAjB,CAAmCZ,gBAAnC,CAAkD,KAAlD,CAAwEY,CAAb,GAAaA,CAAPD,QAAOC,EAAAA,OAAd,CAAsB,CAAtB,CAA1D,CAAqF,KAnC9B,CAwCzD1B,OAAOC,CAAAA,OAAP,CAAiBA,OAAQE,CAAAA,OA7EmF;",
"sources":["node_modules/polished/lib/mixins/between.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$polished$lib$mixins$between\"] = function(global,require,module,exports) {\n\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _getValueAndUnit5 =\n/*#__PURE__*/\n_interopRequireDefault(\n/*#__PURE__*/\nrequire(\"../helpers/getValueAndUnit\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns a CSS calc formula for linear interpolation of a property between two values. Accepts optional minScreen (defaults to '320px') and maxScreen (defaults to '1200px').\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   fontSize: between('20px', '100px', '400px', '1000px'),\n *   fontSize: between('20px', '100px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   fontSize: ${between('20px', '100px', '400px', '1000px')};\n *   fontSize: ${between('20px', '100px')}\n * `\n *\n * // CSS as JS Output\n *\n * h1: {\n *   'fontSize': 'calc(-33.33333333333334px + 13.333333333333334vw)',\n *   'fontSize': 'calc(-9.090909090909093px + 9.090909090909092vw)'\n * }\n */\nfunction between(fromSize, toSize, minScreen, maxScreen) {\n  if (minScreen === void 0) {\n    minScreen = '320px';\n  }\n\n  if (maxScreen === void 0) {\n    maxScreen = '1200px';\n  }\n\n  var _getValueAndUnit = (0, _getValueAndUnit5.default)(fromSize),\n      unitlessFromSize = _getValueAndUnit[0],\n      fromSizeUnit = _getValueAndUnit[1];\n\n  var _getValueAndUnit2 = (0, _getValueAndUnit5.default)(toSize),\n      unitlessToSize = _getValueAndUnit2[0],\n      toSizeUnit = _getValueAndUnit2[1];\n\n  var _getValueAndUnit3 = (0, _getValueAndUnit5.default)(minScreen),\n      unitlessMinScreen = _getValueAndUnit3[0],\n      minScreenUnit = _getValueAndUnit3[1];\n\n  var _getValueAndUnit4 = (0, _getValueAndUnit5.default)(maxScreen),\n      unitlessMaxScreen = _getValueAndUnit4[0],\n      maxScreenUnit = _getValueAndUnit4[1];\n\n  if (typeof unitlessMinScreen !== 'number' || typeof unitlessMaxScreen !== 'number' || !minScreenUnit || !maxScreenUnit || minScreenUnit !== maxScreenUnit) {\n    throw new Error('minScreen and maxScreen must be provided as stringified numbers with the same units.');\n  }\n\n  if (typeof unitlessFromSize !== 'number' || typeof unitlessToSize !== 'number' || !fromSizeUnit || !toSizeUnit || fromSizeUnit !== toSizeUnit) {\n    throw new Error('fromSize and toSize must be provided as stringified numbers with the same units.');\n  }\n\n  var slope = (unitlessFromSize - unitlessToSize) / (unitlessMinScreen - unitlessMaxScreen);\n  var base = unitlessToSize - slope * unitlessMaxScreen;\n  return \"calc(\" + base.toFixed(2) + fromSizeUnit + \" + \" + (100 * slope).toFixed(2) + \"vw)\";\n}\n\nvar _default = between;\nexports.default = _default;\nmodule.exports = exports.default;\n};"],
"names":["shadow$provide","global","require","module","exports","__esModule","default","_getValueAndUnit5","_interopRequireDefault","obj","between","fromSize","toSize","minScreen","maxScreen","_getValueAndUnit","unitlessFromSize","fromSizeUnit","_getValueAndUnit2","unitlessToSize","toSizeUnit","_getValueAndUnit3","unitlessMinScreen","minScreenUnit","_getValueAndUnit4","unitlessMaxScreen","maxScreenUnit","Error","slope","toFixed"]
}
