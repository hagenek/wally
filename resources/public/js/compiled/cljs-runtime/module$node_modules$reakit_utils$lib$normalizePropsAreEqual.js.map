{
"version":3,
"file":"module$node_modules$reakit_utils$lib$normalizePropsAreEqual.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,2DAAA,CAAgF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGxHC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CAEA,KAAIC,0BAA4BN,OAAA,CAAQ,yEAAR,CAChCA,QAAA,CAAQ,+CAAR,CACA,KAAIO,cAAgBP,OAAA,CAAQ,oDAAR,CA6BpBE,QAAQM,CAAAA,sBAAR,CAdAA,QAA+B,CAACC,aAAD,CAAgB,CAC7C,MAA2B,6BAA3B;AAAIA,aAAcC,CAAAA,IAAlB,CACSD,aADT,CAIOE,QAAoC,CAACC,IAAD,CAAOC,IAAP,CAAa,CACtD,MAAKN,cAAcA,CAAAA,aAAd,CAA4BK,IAAKE,CAAAA,KAAjC,CAAL,EAAiDP,aAAcA,CAAAA,aAAd,CAA4BM,IAAKC,CAAAA,KAAjC,CAAjD,CAIOL,aAAA,CAAcH,yBAA0BS,CAAAA,cAA1B,CAAyCT,yBAA0BS,CAAAA,cAA1B,CAAyC,EAAzC,CAA6CH,IAAKE,CAAAA,KAAlD,CAAzC,CAAmGF,IAAnG,CAAd,CAAwHN,yBAA0BS,CAAAA,cAA1B,CAAyCT,yBAA0BS,CAAAA,cAA1B,CAAyC,EAAzC,CAA6CF,IAAKC,CAAAA,KAAlD,CAAzC,CAAmGD,IAAnG,CAAxH,CAJP,CACSJ,aAAA,CAAcG,IAAd,CAAoBC,IAApB,CAF6C,CALX,CAtByE;",
"sources":["node_modules/reakit-utils/lib/normalizePropsAreEqual.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$reakit_utils$lib$normalizePropsAreEqual\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar _rollupPluginBabelHelpers = require('./_rollupPluginBabelHelpers-8f9a8751.js');\nrequire('./isObject.js');\nvar isPlainObject = require('./isPlainObject.js');\n\n/**\n * This higher order functions take `propsAreEqual` function and\n * returns a new function which normalizes the props.\n *\n * Normalizing in our case is making sure the `propsAreEqual` works with\n * both version 1 (object spreading) and version 2 (state object) state passing.\n *\n * To achieve this, the returned function in case of a state object\n * will spread the state object in both `prev` and `next props.\n *\n * Other case it just returns the function as is which makes sure\n * that we are still backward compatible\n */\nfunction normalizePropsAreEqual(propsAreEqual) {\n  if (propsAreEqual.name === \"normalizePropsAreEqualInner\") {\n    return propsAreEqual;\n  }\n\n  return function normalizePropsAreEqualInner(prev, next) {\n    if (!isPlainObject.isPlainObject(prev.state) || !isPlainObject.isPlainObject(next.state)) {\n      return propsAreEqual(prev, next);\n    }\n\n    return propsAreEqual(_rollupPluginBabelHelpers._objectSpread2(_rollupPluginBabelHelpers._objectSpread2({}, prev.state), prev), _rollupPluginBabelHelpers._objectSpread2(_rollupPluginBabelHelpers._objectSpread2({}, next.state), next));\n  };\n}\n\nexports.normalizePropsAreEqual = normalizePropsAreEqual;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","_rollupPluginBabelHelpers","isPlainObject","normalizePropsAreEqual","propsAreEqual","name","normalizePropsAreEqualInner","prev","next","state","_objectSpread2"]
}
