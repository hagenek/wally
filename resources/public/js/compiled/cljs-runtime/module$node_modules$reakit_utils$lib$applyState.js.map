{
"version":3,
"file":"module$node_modules$reakit_utils$lib$applyState.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAA,+CAAA,CAAoE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG5GC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CAyBAH,QAAQI,CAAAA,UAAR,CARAA,QAAmB,CAACC,QAAD,CAAWC,YAAX,CAAyB,CAC1C,MAf2B,UAe3B,GAfO,MAeOD,SAAd,CACSA,QAAA,CAASC,YAAT,CADT,CAIOD,QALmC,CApBgE;",
"sources":["node_modules/reakit-utils/lib/applyState.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$reakit_utils$lib$applyState\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction isUpdater(argument) {\n  return typeof argument === \"function\";\n}\n/**\n * Receives a `setState` argument and calls it with `currentValue` if it's a\n * function. Otherwise return the argument as the new value.\n *\n * @example\n * import { applyState } from \"reakit-utils\";\n *\n * applyState((value) => value + 1, 1); // 2\n * applyState(2, 1); // 2\n */\n\n\nfunction applyState(argument, currentValue) {\n  if (isUpdater(argument)) {\n    return argument(currentValue);\n  }\n\n  return argument;\n}\n\nexports.applyState = applyState;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","applyState","argument","currentValue"]
}
