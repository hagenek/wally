{"version":3,"sources":["mister_wally/views.cljs"],"mappings":";;AAkBA,kCAAA,lCAAMA;AAAN,AAAA,0FAAA,qHAAA,mFAAA,qHAAA,2CAAA,iDAAA,MAAA,iDAAA,gBAAA,uDAAA,OAAA,yDAAA,oBAAA,iDAAA,KAAA,sEAAA,OAAA,gEAAA,YAAA,oDAAA,oCAAA,mFAAA,qHAAA,mFAAA,wHAAA,kBAAA,mFAAA,wHAAA,2CAAA,iDAAA,MAAA,iDAAA,cAAA,pnDACMC,wMACCA,6xBAQAA,wMACCC,6NACAA;;AAGR,gCAAA,hCAAMC;AAAN,AACE,IAAMC,OAAK,sDAAA,mFAAA,zIAACC;AAAZ,AAAA,0FAAA,sHAAA,2CAAA,kDAAA,aAAA,mFAAA,qHAAA,2CAAA,4EAAA,SAAA,iEAAA,SAAA,4EAAA,kBAAA,mFAAA,qHAAA,2CAAA,gDAAA,KAAA,kDAAA,aAAA,mFAAA,qHAAA,2CAAA,wEAAA,iBAAA,mFAAA,8CAAA,mFAAA,4HAAA,2CAAA,uDAAA,6HAAA,mFAAA,8CAAA,mFAAA,4HAAA,2CAAA,uDAAA,gBAAA,iEAAA,2HAAA,mFAAA,qHAAA,2CAAA,iDAAA,IAAA,6DAAA,t2FACMC,mTACCC,gfAGCC,uWACCP,6cAEEQ,+LAA4B,CAAA,uDAAA,AAAAC,uBAAA,PAAiBN,wSAE7CK,mVACLT,0KACGC;AAZT,AAcyB,8BAAA,mFAAA,mGAAA,7MAACU;WAd1B;;AAiBF,AAAAC,uEAAA,iEAAA;AAAA,AAAA,0FAAyCT;;AAGzC,iCAAA,jCAAMU;AAAN,AAAA,0FAAA,qHAAA,2CAAA,4EAAA,SAAA,iEAAA,iBAAA,mFAAA,qHAAA,2CAAA,iDAAA,KAAA,uDAAA,eAAA,kCAAA,mFAAA,8CAAA,mFAAA,wHAAA,2CAAA,iDAAA,IAAA,iDAAA,KAAA,6DAAA,xsCACMZ,0ZACCA,khBAECC;AAJR,AAI0C,8BAAA,mFAAA,mGAAA,7MAACS;WAJ3C,oBAAA,mFAAA,wHAAA,2CAAA,iDAAA,IAAA,6DAAA,tOAMQT;AANR,AAMmC,8BAAA,mFAAA,mGAAA,7MAACS;WANpC;;AASE,AAAAC,uEAAA,kEAAA;AAAA,AAAA,0FAA0CC;;AAC5C,AAAAD,uEAAA,qDAAA;AAAA,AAAA,0FAAoCE;;AAGpC,gCAAA,hCAAMC;AAAN,AACE,IAAMC,eAAa,sDAAA,mFAAA,zIAACX;AAApB,AACE,gEAAA,AAAAK,zDAACE,yEAAeI","names":["mister-wally.views/send-receive","js/module$node_modules$$smooth_ui$core_sc$dist$smooth_ui_core_sc_cjs.Box","js/module$node_modules$$smooth_ui$core_sc$dist$smooth_ui_core_sc_cjs.Button","mister-wally.views/home-panel","name","re_frame.core.subscribe","js/module$node_modules$$smooth_ui$core_sc$dist$smooth_ui_core_sc_cjs.Grid","js/module$node_modules$$smooth_ui$core_sc$dist$smooth_ui_core_sc_cjs.Row","js/module$node_modules$$smooth_ui$core_sc$dist$smooth_ui_core_sc_cjs.Col","js/module$node_modules$$smooth_ui$core_sc$dist$smooth_ui_core_sc_cjs.Typography","cljs.core/deref","re-frame.core/dispatch","mister-wally.routes/panels","mister-wally.views/about-panel","mister-wally.auth.login/login","mister-wally.views/main-panel","active-panel"],"sourcesContent":["(ns mister-wally.views\n  (:require\n   [re-frame.core :as re-frame]\n   [reagent.core :as r]\n   [mister-wally.events :as events]\n   [mister-wally.routes :as routes]\n   [mister-wally.subs :as subs]\n   [mister-wally.auth.login :refer [login]]\n   [\"@smooth-ui/core-sc\" :refer [\n                                 Button\n                                 Grid\n                                 Typography\n                                 Col\n                                 Row\n                                 Box]]))\n\n\n;; home\n(defn send-receive []\n  [:> Box\n   [:> Box {:as \"img\"\n            :alt \"Nanocoin logo\"\n            :width \"auto\"\n            :border \"3px solid #213458\" \n            :mb 20\n            :border-radius \"14px\"\n            :className \"nano-logo\"\n            :src \"img/shiba-inu.png\"}]\n   [:> Box\n    [:> Button \"Receive\"]\n    [:> Button {:ml 120 :mb 100} \"Send\"]]])\n\n\n(defn home-panel []\n  (let [name (re-frame/subscribe [::subs/name])]\n    [:> Grid {:my 50}\n     [:> Row {:justify-content \"center\"\n              :text-align \"center\"\n              :background-color \"#1D7D81\"}\n      [:> Col {:xs 12 :sm 12}\n       [:> Box {:flex-direction \"column\"}\n        [:p\n         [:> Typography {:color \"light\"} (str \"Welcome \" @name \".\")]]\n        [:p\n         [:> Typography {:color \"light\"} \"How can Mister Wally assist you today?\"]]]\n       [send-receive]\n       [:> Box {\n                :as \"a\"\n                :on-click #(re-frame/dispatch [::events/navigate :about])}\n        \"About Mister Wally\"]]]]))\n\n(defmethod routes/panels :home-panel [] [home-panel])\n\n;; about\n(defn about-panel []\n  [:> Box  {:justify-content \"center\" :text-align \"center\"}\n   [:> Box {:as \"h2\" :color \"#FFF\"} \"This is the About Page.\"]\n   [:p\n    [:> Button {:as \"a\" :mx 20 :on-click #(re-frame/dispatch [::events/navigate :home])}\n     \"Home Page\"]\n    [:> Button {:as \"a\" :on-click #(re-frame/dispatch [::events/navigate :login])}\n     \"Login!\"]]])\n\n  (defmethod routes/panels :about-panel [] [about-panel])\n(defmethod routes/panels :login [] [login])\n;; main\n\n(defn main-panel []\n  (let [active-panel (re-frame/subscribe [::subs/active-panel])]\n    (routes/panels @active-panel)))\n"]}