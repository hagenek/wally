{"version":3,"sources":["mister_wally/views.cljs"],"mappings":";;AAmBA,kCAAA,lCAAMA;AAAN,AAAA,0FAAA,qHAAA,mFAAA,qHAAA,2CAAA,iDAAA,MAAA,iDAAA,gBAAA,uDAAA,QAAA,gEAAA,YAAA,oDAAA,2CAAA,mFAAA,qHAAA,mFAAA,wHAAA,kBAAA,mFAAA,wHAAA,2CAAA,iDAAA,MAAA,iDAAA,cAAA,56CACMC,wMACCA,qlBAKAA,wMACCC,6NACAA;;AAGR,kCAAA,lCAAMC;AAAN,AACE,kBAAA,2CAAA,qDAAA,GAAA,gEAAA,jLAAMC;IACAC,WAAS,AAACC,gDAAOF;AADvB,AAEA;AAAA,AAAA,0FAAA,qHAAA,2CAAA,4EAAA,iBAAA,mFAAA,qHAAA,2CAAA,gDAAA,KAAA,kDAAA,YAAA,mFAAA,2HAAA,mFAAA,uHAAA,2CAAA,4DAAA,6DAAA,eAAA,mFAAA,uHAAA,2CAAA,2DAAA,KAAA,kDAAA,qDAAA,uDAAA,WAAA,oKAAA,+DAAA,WAAAG,30DACMC,gVACCC,sWACCC,8MACCC,6XACAC,kZAGc,AAAA,mFAAA,AAAAC,gBAAQR;AAR/B,AAS4B,mFAAA,5EAACS,mDAAMT,SAASU,qEAAY,AAAA,AAAAR;2BATxD,mFAAA,wHAAA,2CAAA,6DAAA,jLAUQL;AAVR,AAWiB,8BAAA,mFAAA,1GAACc,yNAA4C,AAAA,mFAAA,AAAAH,gBAAQR;WAXtE;;;AAcF,gCAAA,hCAAMY;AAAN,AACE,IAAMC,OAAK,sDAAA,mFAAA,zIAACC;AAAZ,AAAA,0FAAA,sHAAA,mFAAA,qHAAA,2CAAA,4EAAA,SAAA,iEAAA,iBAAA,mFAAA,qHAAA,2CAAA,gDAAA,KAAA,kDAAA,aAAA,mFAAA,qHAAA,2CAAA,iDAAA,KAAA,kDAAA,uIAAA,2HAAA,2HAAA,mFAAA,mDAAA,mFAAA,gDAAA,2CAAA,6DAAA,j5DACMC,yMACCZ,0ZAECC,uWACQR,sOACH,CAAA,qDAAA,AAAAY,uBAAA,PAAeK,uIACtBlB,2HACAG;AARN,AAUsB,8BAAA,mFAAA,mGAAA,7MAACa;WAVvB;;AAaF,AAAAK,uEAAA,iEAAA;AAAA,AAAA,0FAAyCJ;;AAGzC,iCAAA,jCAAMK;AAAN,AAAA,0FAAA,qHAAA,2CAAA,4EAAA,SAAA,iEAAA,iBAAA,mFAAA,kDAAA,kCAAA,mFAAA,8CAAA,mFAAA,wHAAA,2CAAA,iDAAA,IAAA,iDAAA,KAAA,6DAAA,99BACMrB,ksBAGEC;AAJR,AAI0C,8BAAA,mFAAA,mGAAA,7MAACc;WAJ3C,oBAAA,mFAAA,wHAAA,2CAAA,iDAAA,IAAA,6DAAA,tOAMQd;AANR,AAMmC,8BAAA,mFAAA,mGAAA,7MAACc;WANpC;;AASE,AAAAK,uEAAA,kEAAA;AAAA,AAAA,0FAA0CC;;AAC5C,AAAAD,uEAAA,qDAAA;AAAA,AAAA,0FAAoCE;;AAGpC,gCAAA,hCAAMC;AAAN,AACE,IAAMC,eAAa,sDAAA,mFAAA,zIAACN;AAApB,AACE,gEAAA,AAAAN,zDAACQ,yEAAeI","names":["mister-wally.views/send-receive","js/module$node_modules$$smooth_ui$core_sc$dist$smooth_ui_core_sc_cjs.Box","js/module$node_modules$$smooth_ui$core_sc$dist$smooth_ui_core_sc_cjs.Button","mister-wally.views/set-username","init-values","userinfo","reagent.core.atom","p1__35808#","js/module$node_modules$$smooth_ui$core_sc$dist$smooth_ui_core_sc_cjs.Row","js/module$node_modules$$smooth_ui$core_sc$dist$smooth_ui_core_sc_cjs.Col","js/module$node_modules$$smooth_ui$core_sc$dist$smooth_ui_core_sc_cjs.FormGroup","js/module$node_modules$$smooth_ui$core_sc$dist$smooth_ui_core_sc_cjs.Label","js/module$node_modules$$smooth_ui$core_sc$dist$smooth_ui_core_sc_cjs.Input","cljs.core/deref","cljs.core.swap_BANG_","cljs.core/assoc","re-frame.core/dispatch","mister-wally.views/home-panel","name","re_frame.core.subscribe","js/module$node_modules$$smooth_ui$core_sc$dist$smooth_ui_core_sc_cjs.Grid","mister-wally.routes/panels","mister-wally.views/about-panel","mister-wally.auth.login/login","mister-wally.views/main-panel","active-panel"],"sourcesContent":["(ns mister-wally.views\n  (:require\n   [re-frame.core :as re-frame]\n   [reagent.core :as r]\n   [mister-wally.events :as events]\n   [mister-wally.routes :as routes]\n   [mister-wally.subs :as subs]\n   [mister-wally.auth.login :refer [login]]\n   [\"@smooth-ui/core-sc\" :refer [Input\n                                 Button\n                                 FormGroup\n                                 Label\n                                 Grid\n                                 Col\n                                 Row\n                                 Box]]))\n\n\n;; home\n(defn send-receive []\n  [:> Box\n   [:> Box {:as \"img\"\n            :alt \"Nanocoin logo\"\n            :width \"100px\"\n            :className \"nano-logo\"\n            :src \"img/nano/symbol-blue.svg\"}]\n   [:> Box\n    [:> Button \"Receive\"]\n    [:> Button {:ml 120 :mb 100} \"Send\"]]])\n\n\n(defn set-username []\n  (let [init-values {:name \"\" :last-name \"\"}\n        userinfo (r/atom init-values)]\n  (fn []\n    [:> Row {:justify-content \"center\"}\n     [:> Col {:xs 12 :sm 6}\n      [:> FormGroup\n       [:> Label {:html-for :name} \"Name\"]\n       [:> Input {:control true\n                  :id :name\n                  :label \"Username\"\n                  :value (:name @userinfo)\n                  :on-change #(swap! userinfo assoc :name (.. % -target -value))}]]\n      [:> Button {:on-click\n                  #(re-frame/dispatch [::events/set-active-user (:name @userinfo)])}\n       \"Set username\"]]])))\n\n(defn home-panel []\n  (let [name (re-frame/subscribe [::subs/name])]\n    [:> Grid\n     [:> Row {:justify-content \"center\"\n              :text-align \"center\"}\n      [:> Col {:xs 12 :sm 12}\n              [:> Box {:as \"h2\" :my 50}\n               (str \"Hello \" @name \". This is the Home Page.\")]\n       [send-receive]\n       [set-username]\n       [:div\n        [:a {:on-click #(re-frame/dispatch [::events/navigate :about])}\n         \"go to About Page\"]]]]]))\n\n(defmethod routes/panels :home-panel [] [home-panel])\n\n;; about\n(defn about-panel []\n  [:> Box  {:justify-content \"center\" :text-align \"center\"}\n   [:h1 \"This is the About Page.\"]\n   [:p\n    [:> Button {:as \"a\" :mx 20 :on-click #(re-frame/dispatch [::events/navigate :home])}\n     \"Home Page\"]\n    [:> Button {:as \"a\" :on-click #(re-frame/dispatch [::events/navigate :login])}\n     \"Login!\"]]])\n\n  (defmethod routes/panels :about-panel [] [about-panel])\n(defmethod routes/panels :login [] [login])\n;; main\n\n(defn main-panel []\n  (let [active-panel (re-frame/subscribe [::subs/active-panel])]\n    (routes/panels @active-panel)))\n"]}