shadow$provide.module$node_modules$polished$lib$color$parseToRgb=function(global,require,module,exports){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}exports.__esModule=!0;exports.default=void 0;var _hslToRgb=_interopRequireDefault(require("module$node_modules$polished$lib$internalHelpers$_hslToRgb")),_nameToHex=_interopRequireDefault(require("module$node_modules$polished$lib$internalHelpers$_nameToHex")),hexRegex=/^#[a-fA-F0-9]{6}$/,hexRgbaRegex=/^#[a-fA-F0-9]{8}$/,
reducedHexRegex=/^#[a-fA-F0-9]{3}$/,reducedRgbaHexRegex=/^#[a-fA-F0-9]{4}$/,rgbRegex=/^rgb\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*\)$/,rgbaRegex=/^rgba\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*([-+]?[0-9]*[.]?[0-9]+)\s*\)$/,hslRegex=/^hsl\(\s*(\d{0,3}[.]?[0-9]+)\s*,\s*(\d{1,3})%\s*,\s*(\d{1,3})%\s*\)$/,hslaRegex=/^hsla\(\s*(\d{0,3}[.]?[0-9]+)\s*,\s*(\d{1,3})%\s*,\s*(\d{1,3})%\s*,\s*([-+]?[0-9]*[.]?[0-9]+)\s*\)$/;exports.default=function(color){if("string"!==typeof color)throw Error("Passed an incorrect argument to a color function, please pass a string representation of a color.");
color=(0,_nameToHex.default)(color);if(color.match(hexRegex))return{red:parseInt(""+color[1]+color[2],16),green:parseInt(""+color[3]+color[4],16),blue:parseInt(""+color[5]+color[6],16)};if(color.match(hexRgbaRegex)){var alpha=parseFloat((parseInt(""+color[7]+color[8],16)/255).toFixed(2));return{red:parseInt(""+color[1]+color[2],16),green:parseInt(""+color[3]+color[4],16),blue:parseInt(""+color[5]+color[6],16),alpha}}if(color.match(reducedHexRegex))return{red:parseInt(""+color[1]+color[1],16),green:parseInt(""+
color[2]+color[2],16),blue:parseInt(""+color[3]+color[3],16)};if(color.match(reducedRgbaHexRegex))return alpha=parseFloat((parseInt(""+color[4]+color[4],16)/255).toFixed(2)),{red:parseInt(""+color[1]+color[1],16),green:parseInt(""+color[2]+color[2],16),blue:parseInt(""+color[3]+color[3],16),alpha};if(alpha=rgbRegex.exec(color))return{red:parseInt(""+alpha[1],10),green:parseInt(""+alpha[2],10),blue:parseInt(""+alpha[3],10)};if(alpha=rgbaRegex.exec(color))return{red:parseInt(""+alpha[1],10),green:parseInt(""+
alpha[2],10),blue:parseInt(""+alpha[3],10),alpha:parseFloat(""+alpha[4])};var hslMatched=hslRegex.exec(color);if(hslMatched){alpha=parseInt(""+hslMatched[1],10);var saturation=parseInt(""+hslMatched[2],10)/100;hslMatched=parseInt(""+hslMatched[3],10)/100;alpha="rgb("+(0,_hslToRgb.default)(alpha,saturation,hslMatched)+")";saturation=rgbRegex.exec(alpha);if(!saturation)throw Error("Couldn't generate valid rgb string from "+color+", it returned "+alpha+".");return{red:parseInt(""+saturation[1],10),green:parseInt(""+
saturation[2],10),blue:parseInt(""+saturation[3],10)}}if(alpha=hslaRegex.exec(color)){saturation=parseInt(""+alpha[1],10);hslMatched=parseInt(""+alpha[2],10)/100;var _lightness=parseInt(""+alpha[3],10)/100;saturation="rgb("+(0,_hslToRgb.default)(saturation,hslMatched,_lightness)+")";hslMatched=rgbRegex.exec(saturation);if(!hslMatched)throw Error("Couldn't generate valid rgb string from "+color+", it returned "+saturation+".");return{red:parseInt(""+hslMatched[1],10),green:parseInt(""+hslMatched[2],
10),blue:parseInt(""+hslMatched[3],10),alpha:parseFloat(""+alpha[4])}}throw Error("Couldn't parse the color string. Please provide the color as a string in hex, rgb, rgba, hsl or hsla notation.");};module.exports=exports.default}
//# sourceMappingURL=module$node_modules$polished$lib$color$parseToRgb.js.map
