{
"version":3,
"file":"module$node_modules$reakit_system$lib$useProps.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,8CAAA,CAAmE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG3GC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CAEA,KAAIC,MAAQN,OAAA,CAAQ,iCAAR,CACZA,QAAA,CAAQ,qDAAR,CACA,KAAIO,SAAWP,OAAA,CAAQ,gDAAR,CAoDfE,QAAQM,CAAAA,QAAR,CApBAA,QAAiB,CAACC,IAAD,CAAOC,OAAP,CAAgBC,SAAhB,CAA2B,CAC1B,IAAK,EAArB,GAAID,OAAJ,GACEA,OADF,CACY,EADZ,CAIkB,KAAK,EAAvB,GAAIC,SAAJ,GACEA,SADF,CACc,EADd,CAIIC,KAAAA,CAAW,KAAXA,CAAmBH,IAAnBG,CAA0B,OAC9BN,MAAMO,CAAAA,aAAN,CAAoBD,IAApB,CAGA;MAAA,CAFIE,IAEJ,CAFcP,QAASA,CAAAA,QAAT,CAAkBK,IAAlB,CAEd,EACSE,IAAA,CAAQJ,OAAR,CAAiBC,SAAjB,CADT,CAIOA,SAjBmC,CAvC+D;",
"sources":["node_modules/reakit-system/lib/useProps.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$reakit_system$lib$useProps\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar React = require('react');\nrequire('./SystemContext.js');\nvar useToken = require('./useToken.js');\n\n/**\n * React custom hook that returns the props returned by a given\n * `use${name}Props` in the SystemContext.\n *\n * @example\n * import { SystemProvider, useProps } from \"reakit-system\";\n *\n * const system = {\n *   useAProps(options, htmlProps) {\n *     return {\n *       ...htmlProps,\n *       href: options.url,\n *     };\n *   },\n * };\n *\n * function A({ url, ...htmlProps }) {\n *   const props = useProps(\"A\", { url }, htmlProps);\n *   return <a {...props} />;\n * }\n *\n * function App() {\n *   return (\n *     <SystemProvider unstable_system={system}>\n *       <A url=\"url\">It will convert url into href in useAProps</A>\n *     </SystemProvider>\n *   );\n * }\n */\n\nfunction useProps(name, options, htmlProps) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (htmlProps === void 0) {\n    htmlProps = {};\n  }\n\n  var hookName = \"use\" + name + \"Props\";\n  React.useDebugValue(hookName);\n  var useHook = useToken.useToken(hookName);\n\n  if (useHook) {\n    return useHook(options, htmlProps);\n  }\n\n  return htmlProps;\n}\n\nexports.useProps = useProps;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","React","useToken","useProps","name","options","htmlProps","hookName","useDebugValue","useHook"]
}
