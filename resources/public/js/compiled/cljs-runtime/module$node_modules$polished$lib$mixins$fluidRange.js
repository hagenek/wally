shadow$provide.module$node_modules$polished$lib$mixins$fluidRange=function(global,require,module,exports){function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i],key;for(key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target};return _extends.apply(this,arguments)}exports.__esModule=!0;exports.default=void 0;var _between=function(obj){return obj&&obj.__esModule?obj:{default:obj}}(require("module$node_modules$polished$lib$mixins$between"));
exports.default=function(cssProp,minScreen,maxScreen){void 0===minScreen&&(minScreen="320px");void 0===maxScreen&&(maxScreen="1200px");if(!Array.isArray(cssProp)&&"object"!==typeof cssProp||null===cssProp)throw Error("expects either an array of objects or a single object with the properties prop, fromSize, and toSize.");if(Array.isArray(cssProp)){var mediaQueries={},fallbacks={},_isArray=Array.isArray(cssProp),_i=0;for(cssProp=_isArray?cssProp:cssProp[Symbol.iterator]();;){var _extends2,_extends3;
if(_isArray){if(_i>=cssProp.length)break;var _ref=cssProp[_i++]}else{_i=cssProp.next();if(_i.done)break;_ref=_i.value}if(!_ref.prop||!_ref.fromSize||!_ref.toSize)throw Error("expects the objects in the first argument array to have the properties `prop`, `fromSize`, and `toSize`.");fallbacks[_ref.prop]=_ref.fromSize;mediaQueries["@media (min-width: "+minScreen+")"]=_extends({},mediaQueries["@media (min-width: "+minScreen+")"],(_extends2={},_extends2[_ref.prop]=(0,_between.default)(_ref.fromSize,_ref.toSize,
minScreen,maxScreen),_extends2));mediaQueries["@media (min-width: "+maxScreen+")"]=_extends({},mediaQueries["@media (min-width: "+maxScreen+")"],(_extends3={},_extends3[_ref.prop]=_ref.toSize,_extends3))}return _extends({},fallbacks,mediaQueries)}if(!cssProp.prop||!cssProp.fromSize||!cssProp.toSize)throw Error("expects the first argument object to have the properties `prop`, `fromSize`, and `toSize`.");return _isArray={},_isArray[cssProp.prop]=cssProp.fromSize,_isArray["@media (min-width: "+minScreen+
")"]=(mediaQueries={},mediaQueries[cssProp.prop]=(0,_between.default)(cssProp.fromSize,cssProp.toSize,minScreen,maxScreen),mediaQueries),_isArray["@media (min-width: "+maxScreen+")"]=(fallbacks={},fallbacks[cssProp.prop]=cssProp.toSize,fallbacks),_isArray};module.exports=exports.default}
//# sourceMappingURL=module$node_modules$polished$lib$mixins$fluidRange.js.map
