{
"version":3,
"file":"module$node_modules$reakit_utils$lib$isTextField.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAA,gDAAA,CAAqE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG7GC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CAkCAH,QAAQI,CAAAA,WAAR,CAnBAA,QAAoB,CAACC,OAAD,CAAU,CAC5B,GAAI,CAEF,IAAIC,WAAiC,UAAjCA,GAAaD,OAAQE,CAAAA,OAAzB,CACIC,kBAAgD,MAAhDA,GAAoBH,OAAQI,CAAAA,eAChC,OAHkBJ,QAGlB,WAHqCK,iBAGrC,EAHoF,IAGpF,GAHyDL,OAAQM,CAAAA,cAGjE,EAAsBL,UAAtB,EAAoCE,iBAApC,EAAyD,CAAA,CAJvD,CAKF,MAAOI,KAAP,CAAc,CASd,MAAO,CAAA,CATO,CANY,CAlB+E;",
"sources":["node_modules/reakit-utils/lib/isTextField.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$reakit_utils$lib$isTextField\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/**\n * Check whether the given element is a text field, where text field is defined\n * by the ability to select within the input, or that it is contenteditable.\n *\n * @example\n * import { isTextField } from \"reakit-utils\";\n *\n * isTextField(document.querySelector(\"div\")); // false\n * isTextField(document.querySelector(\"input\")); // true\n * isTextField(document.querySelector(\"input[type='button']\")); // false\n * isTextField(document.querySelector(\"textarea\")); // true\n * isTextField(document.querySelector(\"div[contenteditable='true']\")); // true\n */\nfunction isTextField(element) {\n  try {\n    var isTextInput = element instanceof HTMLInputElement && element.selectionStart !== null;\n    var isTextArea = element.tagName === \"TEXTAREA\";\n    var isContentEditable = element.contentEditable === \"true\";\n    return isTextInput || isTextArea || isContentEditable || false;\n  } catch (error) {\n    // Safari throws an exception when trying to get `selectionStart`\n    // on non-text <input> elements (which, understandably, don't\n    // have the text selection API). We catch this via a try/catch\n    // block, as opposed to a more explicit check of the element's\n    // input types, because of Safari's non-standard behavior. This\n    // also means we don't have to worry about the list of input\n    // types that support `selectionStart` changing as the HTML spec\n    // evolves over time.\n    return false;\n  }\n}\n\nexports.isTextField = isTextField;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","isTextField","element","isTextArea","tagName","isContentEditable","contentEditable","HTMLInputElement","selectionStart","error"]
}
