{
"version":3,
"file":"module$node_modules$reakit_utils$lib$useForkRef.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAA,+CAAA,CAAoE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAS5GC,QAASA,OAAM,CAACC,GAAD,CAAMC,KAAN,CAAa,CACZ,IAAK,EAAnB,GAAIA,KAAJ,GACEA,KADF,CACU,IADV,CAIKD,IAAL,GAEmB,UAAnB,GAAI,MAAOA,IAAX,CACEA,GAAA,CAAIC,KAAJ,CADF,CAGED,GAAIE,CAAAA,OAHN,CAGgBD,KALhB,CAL0B,CAN5BE,MAAOC,CAAAA,cAAP,CAAsBN,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CAEA,KAAII,MAAQT,OAAA,CAAQ,iCAAR,CA6CZE,QAAQQ,CAAAA,UAAR,CAbAA,QAAmB,CAACC,IAAD,CAAOC,IAAP,CAAa,CAC9B,MAAOH,MAAMI,CAAAA,OAAN,CAAc,QAAS,EAAG,CAC/B,MAAY,KAAZ,EAAIF,IAAJ,EAA4B,IAA5B,EAAoBC,IAApB,CACS,IADT,CAIO,QAAS,CAACP,KAAD,CAAQ,CACtBF,MAAA,CAAOQ,IAAP,CAAaN,KAAb,CACAF,OAAA,CAAOS,IAAP,CAAaP,KAAb,CAFsB,CALO,CAA1B,CASJ,CAACM,IAAD,CAAOC,IAAP,CATI,CADuB,CArC4E;",
"sources":["node_modules/reakit-utils/lib/useForkRef.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$reakit_utils$lib$useForkRef\"] = function(global,require,module,exports) {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar React = require('react');\n\n// https://github.com/mui-org/material-ui/blob/2bcc874cf07b81202968f769cb9c2398c7c11311/packages/material-ui/src/utils/useForkRef.js\n\nfunction setRef(ref, value) {\n  if (value === void 0) {\n    value = null;\n  }\n\n  if (!ref) return;\n\n  if (typeof ref === \"function\") {\n    ref(value);\n  } else {\n    ref.current = value;\n  }\n}\n/**\n * Merges up to two React Refs into a single memoized function React Ref so you\n * can pass it to an element.\n *\n * @example\n * import React from \"react\";\n * import { useForkRef } from \"reakit-utils\";\n *\n * const Component = React.forwardRef((props, ref) => {\n *   const internalRef = React.useRef();\n *   return <div {...props} ref={useForkRef(internalRef, ref)} />;\n * });\n */\n\n\nfunction useForkRef(refA, refB) {\n  return React.useMemo(function () {\n    if (refA == null && refB == null) {\n      return null;\n    }\n\n    return function (value) {\n      setRef(refA, value);\n      setRef(refB, value);\n    };\n  }, [refA, refB]);\n}\n\nexports.useForkRef = useForkRef;\n\n};"],
"names":["shadow$provide","global","require","module","exports","setRef","ref","value","current","Object","defineProperty","React","useForkRef","refA","refB","useMemo"]
}
