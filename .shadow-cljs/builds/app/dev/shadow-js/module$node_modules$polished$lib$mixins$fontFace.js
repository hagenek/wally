["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/polished/lib/mixins/fontFace.js"],"~:js","shadow$provide.module$node_modules$polished$lib$mixins$fontFace=function(global,require,module,exports){function generateFileReferences(fontFilePath,fileFormats){return fileFormats.map(function(format){return'url(\"'+fontFilePath+\".\"+format+'\")'}).join(\", \")}function generateLocalReferences(localFonts){return localFonts.map(function(font){return'local(\"'+font+'\")'}).join(\", \")}exports.__esModule=!0;exports.default=void 0;exports.default=function(_ref){var fontFamily=_ref.fontFamily,fontFilePath=_ref.fontFilePath,\nfontStretch=_ref.fontStretch,fontStyle=_ref.fontStyle,fontVariant=_ref.fontVariant,fontWeight=_ref.fontWeight,_ref$fileFormats=_ref.fileFormats,fileFormats=void 0===_ref$fileFormats?[\"eot\",\"woff2\",\"woff\",\"ttf\",\"svg\"]:_ref$fileFormats,localFonts=_ref.localFonts;_ref$fileFormats=_ref.unicodeRange;var fontDisplay=_ref.fontDisplay,fontVariationSettings=_ref.fontVariationSettings;_ref=_ref.fontFeatureSettings;if(!fontFamily)throw Error(\"fontFace expects a name of a font-family.\");if(!fontFilePath&&!localFonts)throw Error(\"fontFace expects either the path to the font file(s) or a name of a local copy.\");\nif(localFonts&&!Array.isArray(localFonts))throw Error(\"fontFace expects localFonts to be an array.\");if(!Array.isArray(fileFormats))throw Error(\"fontFace expects fileFormats to be an array.\");var fontReferences=[];localFonts&&fontReferences.push(generateLocalReferences(localFonts));fontFilePath&&fontReferences.push(generateFileReferences(fontFilePath,fileFormats));fontFilePath=fontReferences.join(\", \");return JSON.parse(JSON.stringify({\"@font-face\":{fontFamily,src:fontFilePath,unicodeRange:_ref$fileFormats,\nfontStretch,fontStyle,fontVariant,fontWeight,fontDisplay,fontVariationSettings,fontFeatureSettings:_ref}}))};module.exports=exports.default}","~:source","shadow$provide[\"module$node_modules$polished$lib$mixins$fontFace\"] = function(global,require,module,exports) {\n\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nfunction generateFileReferences(fontFilePath, fileFormats) {\n  var fileFontReferences = fileFormats.map(function (format) {\n    return \"url(\\\"\" + fontFilePath + \".\" + format + \"\\\")\";\n  });\n  return fileFontReferences.join(', ');\n}\n\nfunction generateLocalReferences(localFonts) {\n  var localFontReferences = localFonts.map(function (font) {\n    return \"local(\\\"\" + font + \"\\\")\";\n  });\n  return localFontReferences.join(', ');\n}\n\nfunction generateSources(fontFilePath, localFonts, fileFormats) {\n  var fontReferences = [];\n  if (localFonts) fontReferences.push(generateLocalReferences(localFonts));\n\n  if (fontFilePath) {\n    fontReferences.push(generateFileReferences(fontFilePath, fileFormats));\n  }\n\n  return fontReferences.join(', ');\n}\n/**\n * CSS for a @font-face declaration.\n *\n * @example\n * // Styles as object basic usage\n * const styles = {\n *    ...fontFace({\n *      'fontFamily': 'Sans-Pro',\n *      'fontFilePath': 'path/to/file'\n *    })\n * }\n *\n * // styled-components basic usage\n * const GlobalStyle = createGlobalStyle`${\n *   fontFace({\n *     'fontFamily': 'Sans-Pro',\n *     'fontFilePath': 'path/to/file'\n *   }\n * )}`\n *\n * // CSS as JS Output\n *\n * '@font-face': {\n *   'fontFamily': 'Sans-Pro',\n *   'src': 'url(\"path/to/file.eot\"), url(\"path/to/file.woff2\"), url(\"path/to/file.woff\"), url(\"path/to/file.ttf\"), url(\"path/to/file.svg\")',\n * }\n */\n\n\nfunction fontFace(_ref) {\n  var fontFamily = _ref.fontFamily,\n      fontFilePath = _ref.fontFilePath,\n      fontStretch = _ref.fontStretch,\n      fontStyle = _ref.fontStyle,\n      fontVariant = _ref.fontVariant,\n      fontWeight = _ref.fontWeight,\n      _ref$fileFormats = _ref.fileFormats,\n      fileFormats = _ref$fileFormats === void 0 ? ['eot', 'woff2', 'woff', 'ttf', 'svg'] : _ref$fileFormats,\n      localFonts = _ref.localFonts,\n      unicodeRange = _ref.unicodeRange,\n      fontDisplay = _ref.fontDisplay,\n      fontVariationSettings = _ref.fontVariationSettings,\n      fontFeatureSettings = _ref.fontFeatureSettings;\n  // Error Handling\n  if (!fontFamily) throw new Error('fontFace expects a name of a font-family.');\n\n  if (!fontFilePath && !localFonts) {\n    throw new Error('fontFace expects either the path to the font file(s) or a name of a local copy.');\n  }\n\n  if (localFonts && !Array.isArray(localFonts)) {\n    throw new Error('fontFace expects localFonts to be an array.');\n  }\n\n  if (!Array.isArray(fileFormats)) {\n    throw new Error('fontFace expects fileFormats to be an array.');\n  }\n\n  var fontFaceDeclaration = {\n    '@font-face': {\n      fontFamily: fontFamily,\n      src: generateSources(fontFilePath, localFonts, fileFormats),\n      unicodeRange: unicodeRange,\n      fontStretch: fontStretch,\n      fontStyle: fontStyle,\n      fontVariant: fontVariant,\n      fontWeight: fontWeight,\n      fontDisplay: fontDisplay,\n      fontVariationSettings: fontVariationSettings,\n      fontFeatureSettings: fontFeatureSettings\n    } // Removes undefined fields for cleaner css object.\n\n  };\n  return JSON.parse(JSON.stringify(fontFaceDeclaration));\n}\n\nvar _default = fontFace;\nexports.default = _default;\nmodule.exports = exports.default;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["unicodeRange","fontDisplay","fontStretch","fontFamily","fontStyle","fontWeight","__esModule","src","fontVariant","fontFeatureSettings","fontVariationSettings","default"]],"~:compiled-at",1638904261825,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$polished$lib$mixins$fontFace.js\",\n\"lineCount\":4,\n\"mappings\":\"AAAAA,cAAA,CAAA,gDAAA,CAAqE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAM7GC,QAASA,uBAAsB,CAACC,YAAD,CAAeC,WAAf,CAA4B,CAIzD,MAHyBA,YAAYC,CAAAA,GAAZC,CAAgB,QAAS,CAACC,MAAD,CAAS,CACzD,MAAO,OAAP,CAAkBJ,YAAlB,CAAiC,GAAjC,CAAuCI,MAAvC,CAAgD,IADS,CAAlCD,CAGCE,CAAAA,IAAnB,CAAwB,IAAxB,CAJkD,CAO3DC,QAASA,wBAAuB,CAACC,UAAD,CAAa,CAI3C,MAH0BA,WAAWL,CAAAA,GAAXM,CAAe,QAAS,CAACC,IAAD,CAAO,CACvD,MAAO,SAAP,CAAoBA,IAApB,CAA2B,IAD4B,CAA/BD,CAGCH,CAAAA,IAApB,CAAyB,IAAzB,CAJoC,CAV7CP,OAAQY,CAAAA,UAAR,CAAqB,CAAA,CACrBZ,QAAQa,CAAAA,OAAR,CAAkB,IAAK,EAuGvBb,QAAQa,CAAAA,OAAR,CAhDAC,QAAiB,CAACC,IAAD,CAAO,CAAA,IAClBC,WAAaD,IAAKC,CAAAA,UADA,CAElBd,aAAea,IAAKb,CAAAA,YAFF;AAGlBe,YAAcF,IAAKE,CAAAA,WAHD,CAIlBC,UAAYH,IAAKG,CAAAA,SAJC,CAKlBC,YAAcJ,IAAKI,CAAAA,WALD,CAMlBC,WAAaL,IAAKK,CAAAA,UANA,CAOlBC,iBAAmBN,IAAKZ,CAAAA,WAPN,CAQlBA,YAAmC,IAAK,EAA1B,GAAAkB,gBAAA,CAA8B,CAAC,KAAD,CAAQ,OAAR,CAAiB,MAAjB,CAAyB,KAAzB,CAAgC,KAAhC,CAA9B,CAAuEA,gBARnE,CASlBZ,WAAaM,IAAKN,CAAAA,UAClBa,iBAAAA,CAAeP,IAAKO,CAAAA,YAVF,KAWlBC,YAAcR,IAAKQ,CAAAA,WAXD,CAYlBC,sBAAwBT,IAAKS,CAAAA,qBAC7BC,KAAAA,CAAsBV,IAAKU,CAAAA,mBAE/B,IAAI,CAACT,UAAL,CAAiB,KAAUU,MAAJ,CAAU,2CAAV,CAAN,CAEjB,GAAI,CAACxB,YAAL,EAAqB,CAACO,UAAtB,CACE,KAAUiB,MAAJ,CAAU,iFAAV,CAAN;AAGF,GAAIjB,UAAJ,EAAkB,CAACkB,KAAMC,CAAAA,OAAN,CAAcnB,UAAd,CAAnB,CACE,KAAUiB,MAAJ,CAAU,6CAAV,CAAN,CAGF,GAAI,CAACC,KAAMC,CAAAA,OAAN,CAAczB,WAAd,CAAL,CACE,KAAUuB,MAAJ,CAAU,8CAAV,CAAN,CAhEF,IAAIG,eAAiB,EAsEkBpB,WArEvC,EAAgBoB,cAAeC,CAAAA,IAAf,CAAoBtB,uBAAA,CAqEGC,UArEH,CAApB,CAqESP,aAnEzB,EACE2B,cAAeC,CAAAA,IAAf,CAAoB7B,sBAAA,CAkEGC,YAlEH,CAkE6BC,WAlE7B,CAApB,CAGF,aAAA,CAAO0B,cAAetB,CAAAA,IAAf,CAAoB,IAApB,CA2EP,OAAOwB,KAAKC,CAAAA,KAAL,CAAWD,IAAKE,CAAAA,SAAL,CAfQC,CACxB,aAAc,CACAlB,UADA,CAEZmB,IAAK,YAFO,CAGZb,aAAcA,gBAHF;AAICL,WAJD,CAKDC,SALC,CAMCC,WAND,CAOAC,UAPA,CAQCG,WARD,CASWC,qBATX,CAUZC,oBAAqBA,IAVT,CADUS,CAeR,CAAX,CA5Ce,CAiDxBnC,OAAOC,CAAAA,OAAP,CAAiBA,OAAQa,CAAAA,OA5GoF;\",\n\"sources\":[\"node_modules/polished/lib/mixins/fontFace.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$polished$lib$mixins$fontFace\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nexports.__esModule = true;\\nexports.default = void 0;\\n\\nfunction generateFileReferences(fontFilePath, fileFormats) {\\n  var fileFontReferences = fileFormats.map(function (format) {\\n    return \\\"url(\\\\\\\"\\\" + fontFilePath + \\\".\\\" + format + \\\"\\\\\\\")\\\";\\n  });\\n  return fileFontReferences.join(', ');\\n}\\n\\nfunction generateLocalReferences(localFonts) {\\n  var localFontReferences = localFonts.map(function (font) {\\n    return \\\"local(\\\\\\\"\\\" + font + \\\"\\\\\\\")\\\";\\n  });\\n  return localFontReferences.join(', ');\\n}\\n\\nfunction generateSources(fontFilePath, localFonts, fileFormats) {\\n  var fontReferences = [];\\n  if (localFonts) fontReferences.push(generateLocalReferences(localFonts));\\n\\n  if (fontFilePath) {\\n    fontReferences.push(generateFileReferences(fontFilePath, fileFormats));\\n  }\\n\\n  return fontReferences.join(', ');\\n}\\n/**\\n * CSS for a @font-face declaration.\\n *\\n * @example\\n * // Styles as object basic usage\\n * const styles = {\\n *    ...fontFace({\\n *      'fontFamily': 'Sans-Pro',\\n *      'fontFilePath': 'path/to/file'\\n *    })\\n * }\\n *\\n * // styled-components basic usage\\n * const GlobalStyle = createGlobalStyle`${\\n *   fontFace({\\n *     'fontFamily': 'Sans-Pro',\\n *     'fontFilePath': 'path/to/file'\\n *   }\\n * )}`\\n *\\n * // CSS as JS Output\\n *\\n * '@font-face': {\\n *   'fontFamily': 'Sans-Pro',\\n *   'src': 'url(\\\"path/to/file.eot\\\"), url(\\\"path/to/file.woff2\\\"), url(\\\"path/to/file.woff\\\"), url(\\\"path/to/file.ttf\\\"), url(\\\"path/to/file.svg\\\")',\\n * }\\n */\\n\\n\\nfunction fontFace(_ref) {\\n  var fontFamily = _ref.fontFamily,\\n      fontFilePath = _ref.fontFilePath,\\n      fontStretch = _ref.fontStretch,\\n      fontStyle = _ref.fontStyle,\\n      fontVariant = _ref.fontVariant,\\n      fontWeight = _ref.fontWeight,\\n      _ref$fileFormats = _ref.fileFormats,\\n      fileFormats = _ref$fileFormats === void 0 ? ['eot', 'woff2', 'woff', 'ttf', 'svg'] : _ref$fileFormats,\\n      localFonts = _ref.localFonts,\\n      unicodeRange = _ref.unicodeRange,\\n      fontDisplay = _ref.fontDisplay,\\n      fontVariationSettings = _ref.fontVariationSettings,\\n      fontFeatureSettings = _ref.fontFeatureSettings;\\n  // Error Handling\\n  if (!fontFamily) throw new Error('fontFace expects a name of a font-family.');\\n\\n  if (!fontFilePath && !localFonts) {\\n    throw new Error('fontFace expects either the path to the font file(s) or a name of a local copy.');\\n  }\\n\\n  if (localFonts && !Array.isArray(localFonts)) {\\n    throw new Error('fontFace expects localFonts to be an array.');\\n  }\\n\\n  if (!Array.isArray(fileFormats)) {\\n    throw new Error('fontFace expects fileFormats to be an array.');\\n  }\\n\\n  var fontFaceDeclaration = {\\n    '@font-face': {\\n      fontFamily: fontFamily,\\n      src: generateSources(fontFilePath, localFonts, fileFormats),\\n      unicodeRange: unicodeRange,\\n      fontStretch: fontStretch,\\n      fontStyle: fontStyle,\\n      fontVariant: fontVariant,\\n      fontWeight: fontWeight,\\n      fontDisplay: fontDisplay,\\n      fontVariationSettings: fontVariationSettings,\\n      fontFeatureSettings: fontFeatureSettings\\n    } // Removes undefined fields for cleaner css object.\\n\\n  };\\n  return JSON.parse(JSON.stringify(fontFaceDeclaration));\\n}\\n\\nvar _default = fontFace;\\nexports.default = _default;\\nmodule.exports = exports.default;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"generateFileReferences\",\"fontFilePath\",\"fileFormats\",\"map\",\"fileFontReferences\",\"format\",\"join\",\"generateLocalReferences\",\"localFonts\",\"localFontReferences\",\"font\",\"__esModule\",\"default\",\"fontFace\",\"_ref\",\"fontFamily\",\"fontStretch\",\"fontStyle\",\"fontVariant\",\"fontWeight\",\"_ref$fileFormats\",\"unicodeRange\",\"fontDisplay\",\"fontVariationSettings\",\"fontFeatureSettings\",\"Error\",\"Array\",\"isArray\",\"fontReferences\",\"push\",\"JSON\",\"parse\",\"stringify\",\"fontFaceDeclaration\",\"src\"]\n}\n"]