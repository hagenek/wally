["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/highlight_DOT_js/lib/languages/rust.js"],"~:js","shadow$provide.module$node_modules$highlight_DOT_js$lib$languages$rust=function(global,require,module,exports){function concat(...args){return args.map(x=>{x=x?\"string\"===typeof x?x:x.source:null;return x}).join(\"\")}module.exports=function(hljs){const FUNCTION_INVOKE={className:\"title.function.invoke\",relevance:0,begin:concat(/\\b/,/(?!let\\b)/,hljs.IDENT_RE,concat(\"(?\\x3d\",/\\s*\\(/,\")\"))},BUILTINS=\"drop ;Copy;Send;Sized;Sync;Drop;Fn;FnMut;FnOnce;ToOwned;Clone;Debug;PartialEq;PartialOrd;Eq;Ord;AsRef;AsMut;Into;From;Default;Iterator;Extend;IntoIterator;DoubleEndedIterator;ExactSizeIterator;SliceConcatExt;ToString;assert!;assert_eq!;bitflags!;bytes!;cfg!;col!;concat!;concat_idents!;debug_assert!;debug_assert_eq!;env!;panic!;file!;format!;format_args!;include_bin!;include_str!;line!;local_data_key!;module_path!;option_env!;print!;println!;select!;stringify!;try!;unimplemented!;unreachable!;vec!;write!;writeln!;macro_rules!;assert_ne!;debug_assert_ne!\".split(\";\");\nreturn{name:\"Rust\",aliases:[\"rs\"],keywords:{$pattern:hljs.IDENT_RE+\"!?\",type:\"i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usize f32 f64 str char bool Box Option Result String Vec\".split(\" \"),keyword:\"abstract as async await become box break const continue crate do dyn else enum extern false final fn for if impl in let loop macro match mod move mut override priv pub ref return self Self static struct super trait true try type typeof unsafe unsized use virtual where while yield\".split(\" \"),literal:\"true false Some None Ok Err\".split(\" \"),\nbuilt_in:BUILTINS},illegal:\"\\x3c/\",contains:[hljs.C_LINE_COMMENT_MODE,hljs.COMMENT(\"/\\\\*\",\"\\\\*/\",{contains:[\"self\"]}),hljs.inherit(hljs.QUOTE_STRING_MODE,{begin:/b?\"/,illegal:null}),{className:\"string\",variants:[{begin:/b?r(#*)\"(.|\\n)*?\"\\1(?!#)/},{begin:/b?'\\\\?(x\\w{2}|u\\w{4}|U\\w{8}|.)'/}]},{className:\"symbol\",begin:/'[a-zA-Z_][a-zA-Z0-9_]*/},{className:\"number\",variants:[{begin:\"\\\\b0b([01_]+)([ui](8|16|32|64|128|size)|f(32|64))?\"},{begin:\"\\\\b0o([0-7_]+)([ui](8|16|32|64|128|size)|f(32|64))?\"},{begin:\"\\\\b0x([A-Fa-f0-9_]+)([ui](8|16|32|64|128|size)|f(32|64))?\"},\n{begin:\"\\\\b(\\\\d[\\\\d_]*(\\\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)([ui](8|16|32|64|128|size)|f(32|64))?\"}],relevance:0},{begin:[/fn/,/\\s+/,hljs.UNDERSCORE_IDENT_RE],className:{1:\"keyword\",3:\"title.function\"}},{className:\"meta\",begin:\"#!?\\\\[\",end:\"\\\\]\",contains:[{className:\"string\",begin:/\"/,end:/\"/}]},{begin:[/let/,/\\s+/,/(?:mut\\s+)?/,hljs.UNDERSCORE_IDENT_RE],className:{1:\"keyword\",3:\"keyword\",4:\"variable\"}},{begin:[/for/,/\\s+/,hljs.UNDERSCORE_IDENT_RE,/\\s+/,/in/],className:{1:\"keyword\",3:\"variable\",5:\"keyword\"}},\n{begin:[/type/,/\\s+/,hljs.UNDERSCORE_IDENT_RE],className:{1:\"keyword\",3:\"title.class\"}},{begin:[/(?:trait|enum|struct|union|impl|for)/,/\\s+/,hljs.UNDERSCORE_IDENT_RE],className:{1:\"keyword\",3:\"title.class\"}},{begin:hljs.IDENT_RE+\"::\",keywords:{keyword:\"Self\",built_in:BUILTINS}},{className:\"punctuation\",begin:\"-\\x3e\"},FUNCTION_INVOKE]}}}","~:source","shadow$provide[\"module$node_modules$highlight_DOT_js$lib$languages$rust\"] = function(global,require,module,exports) {\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: Rust\nAuthor: Andrey Vlasovskikh <andrey.vlasovskikh@gmail.com>\nContributors: Roman Shmatov <romanshmatov@gmail.com>, Kasper Andersen <kma_untrusted@protonmail.com>\nWebsite: https://www.rust-lang.org\nCategory: common, system\n*/\n\n/** @type LanguageFn */\nfunction rust(hljs) {\n  const FUNCTION_INVOKE = {\n    className: \"title.function.invoke\",\n    relevance: 0,\n    begin: concat(\n      /\\b/,\n      /(?!let\\b)/,\n      hljs.IDENT_RE,\n      lookahead(/\\s*\\(/))\n  };\n  const NUMBER_SUFFIX = '([ui](8|16|32|64|128|size)|f(32|64))\\?';\n  const KEYWORDS = [\n    \"abstract\",\n    \"as\",\n    \"async\",\n    \"await\",\n    \"become\",\n    \"box\",\n    \"break\",\n    \"const\",\n    \"continue\",\n    \"crate\",\n    \"do\",\n    \"dyn\",\n    \"else\",\n    \"enum\",\n    \"extern\",\n    \"false\",\n    \"final\",\n    \"fn\",\n    \"for\",\n    \"if\",\n    \"impl\",\n    \"in\",\n    \"let\",\n    \"loop\",\n    \"macro\",\n    \"match\",\n    \"mod\",\n    \"move\",\n    \"mut\",\n    \"override\",\n    \"priv\",\n    \"pub\",\n    \"ref\",\n    \"return\",\n    \"self\",\n    \"Self\",\n    \"static\",\n    \"struct\",\n    \"super\",\n    \"trait\",\n    \"true\",\n    \"try\",\n    \"type\",\n    \"typeof\",\n    \"unsafe\",\n    \"unsized\",\n    \"use\",\n    \"virtual\",\n    \"where\",\n    \"while\",\n    \"yield\"\n  ];\n  const LITERALS = [\n    \"true\",\n    \"false\",\n    \"Some\",\n    \"None\",\n    \"Ok\",\n    \"Err\"\n  ];\n  const BUILTINS = [\n    // functions\n    'drop ',\n    // traits\n    \"Copy\",\n    \"Send\",\n    \"Sized\",\n    \"Sync\",\n    \"Drop\",\n    \"Fn\",\n    \"FnMut\",\n    \"FnOnce\",\n    \"ToOwned\",\n    \"Clone\",\n    \"Debug\",\n    \"PartialEq\",\n    \"PartialOrd\",\n    \"Eq\",\n    \"Ord\",\n    \"AsRef\",\n    \"AsMut\",\n    \"Into\",\n    \"From\",\n    \"Default\",\n    \"Iterator\",\n    \"Extend\",\n    \"IntoIterator\",\n    \"DoubleEndedIterator\",\n    \"ExactSizeIterator\",\n    \"SliceConcatExt\",\n    \"ToString\",\n    // macros\n    \"assert!\",\n    \"assert_eq!\",\n    \"bitflags!\",\n    \"bytes!\",\n    \"cfg!\",\n    \"col!\",\n    \"concat!\",\n    \"concat_idents!\",\n    \"debug_assert!\",\n    \"debug_assert_eq!\",\n    \"env!\",\n    \"panic!\",\n    \"file!\",\n    \"format!\",\n    \"format_args!\",\n    \"include_bin!\",\n    \"include_str!\",\n    \"line!\",\n    \"local_data_key!\",\n    \"module_path!\",\n    \"option_env!\",\n    \"print!\",\n    \"println!\",\n    \"select!\",\n    \"stringify!\",\n    \"try!\",\n    \"unimplemented!\",\n    \"unreachable!\",\n    \"vec!\",\n    \"write!\",\n    \"writeln!\",\n    \"macro_rules!\",\n    \"assert_ne!\",\n    \"debug_assert_ne!\"\n  ];\n  const TYPES = [\n    \"i8\",\n    \"i16\",\n    \"i32\",\n    \"i64\",\n    \"i128\",\n    \"isize\",\n    \"u8\",\n    \"u16\",\n    \"u32\",\n    \"u64\",\n    \"u128\",\n    \"usize\",\n    \"f32\",\n    \"f64\",\n    \"str\",\n    \"char\",\n    \"bool\",\n    \"Box\",\n    \"Option\",\n    \"Result\",\n    \"String\",\n    \"Vec\"\n  ];\n  return {\n    name: 'Rust',\n    aliases: [ 'rs' ],\n    keywords: {\n      $pattern: hljs.IDENT_RE + '!?',\n      type: TYPES,\n      keyword: KEYWORDS,\n      literal: LITERALS,\n      built_in: BUILTINS\n    },\n    illegal: '</',\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.COMMENT('/\\\\*', '\\\\*/', {\n        contains: [ 'self' ]\n      }),\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {\n        begin: /b?\"/,\n        illegal: null\n      }),\n      {\n        className: 'string',\n        variants: [\n          {\n            begin: /b?r(#*)\"(.|\\n)*?\"\\1(?!#)/\n          },\n          {\n            begin: /b?'\\\\?(x\\w{2}|u\\w{4}|U\\w{8}|.)'/\n          }\n        ]\n      },\n      {\n        className: 'symbol',\n        begin: /'[a-zA-Z_][a-zA-Z0-9_]*/\n      },\n      {\n        className: 'number',\n        variants: [\n          {\n            begin: '\\\\b0b([01_]+)' + NUMBER_SUFFIX\n          },\n          {\n            begin: '\\\\b0o([0-7_]+)' + NUMBER_SUFFIX\n          },\n          {\n            begin: '\\\\b0x([A-Fa-f0-9_]+)' + NUMBER_SUFFIX\n          },\n          {\n            begin: '\\\\b(\\\\d[\\\\d_]*(\\\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)' +\n                   NUMBER_SUFFIX\n          }\n        ],\n        relevance: 0\n      },\n      {\n        begin: [\n          /fn/,\n          /\\s+/,\n          hljs.UNDERSCORE_IDENT_RE\n        ],\n        className: {\n          1: \"keyword\",\n          3: \"title.function\"\n        }\n      },\n      {\n        className: 'meta',\n        begin: '#!?\\\\[',\n        end: '\\\\]',\n        contains: [\n          {\n            className: 'string',\n            begin: /\"/,\n            end: /\"/\n          }\n        ]\n      },\n      {\n        begin: [\n          /let/, /\\s+/,\n          /(?:mut\\s+)?/,\n          hljs.UNDERSCORE_IDENT_RE\n        ],\n        className: {\n          1: \"keyword\",\n          3: \"keyword\",\n          4: \"variable\"\n        }\n      },\n      // must come before impl/for rule later\n      {\n        begin: [\n          /for/,\n          /\\s+/,\n          hljs.UNDERSCORE_IDENT_RE,\n          /\\s+/,\n          /in/\n        ],\n        className: {\n          1: \"keyword\",\n          3: \"variable\",\n          5: \"keyword\"\n        }\n      },\n      {\n        begin: [\n          /type/,\n          /\\s+/,\n          hljs.UNDERSCORE_IDENT_RE\n        ],\n        className: {\n          1: \"keyword\",\n          3: \"title.class\"\n        }\n      },\n      {\n        begin: [\n          /(?:trait|enum|struct|union|impl|for)/,\n          /\\s+/,\n          hljs.UNDERSCORE_IDENT_RE\n        ],\n        className: {\n          1: \"keyword\",\n          3: \"title.class\"\n        }\n      },\n      {\n        begin: hljs.IDENT_RE + '::',\n        keywords: {\n          keyword: \"Self\",\n          built_in: BUILTINS\n        }\n      },\n      {\n        className: \"punctuation\",\n        begin: '->'\n      },\n      FUNCTION_INVOKE\n    ]\n  };\n}\n\nmodule.exports = rust;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["variants","begin","aliases","className","contains","$pattern","relevance","name","built_in","keyword","keywords","type","illegal","literal","end"]],"~:compiled-at",1638904261717,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$highlight_DOT_js$lib$languages$rust.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/highlight_DOT_js/lib/languages/rust.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$highlight_DOT_js$lib$languages$rust\\\"] = function(global,require,module,exports) {\\n/**\\n * @param {string} value\\n * @returns {RegExp}\\n * */\\n\\n/**\\n * @param {RegExp | string } re\\n * @returns {string}\\n */\\nfunction source(re) {\\n  if (!re) return null;\\n  if (typeof re === \\\"string\\\") return re;\\n\\n  return re.source;\\n}\\n\\n/**\\n * @param {RegExp | string } re\\n * @returns {string}\\n */\\nfunction lookahead(re) {\\n  return concat('(?=', re, ')');\\n}\\n\\n/**\\n * @param {...(RegExp | string) } args\\n * @returns {string}\\n */\\nfunction concat(...args) {\\n  const joined = args.map((x) => source(x)).join(\\\"\\\");\\n  return joined;\\n}\\n\\n/*\\nLanguage: Rust\\nAuthor: Andrey Vlasovskikh <andrey.vlasovskikh@gmail.com>\\nContributors: Roman Shmatov <romanshmatov@gmail.com>, Kasper Andersen <kma_untrusted@protonmail.com>\\nWebsite: https://www.rust-lang.org\\nCategory: common, system\\n*/\\n\\n/** @type LanguageFn */\\nfunction rust(hljs) {\\n  const FUNCTION_INVOKE = {\\n    className: \\\"title.function.invoke\\\",\\n    relevance: 0,\\n    begin: concat(\\n      /\\\\b/,\\n      /(?!let\\\\b)/,\\n      hljs.IDENT_RE,\\n      lookahead(/\\\\s*\\\\(/))\\n  };\\n  const NUMBER_SUFFIX = '([ui](8|16|32|64|128|size)|f(32|64))\\\\?';\\n  const KEYWORDS = [\\n    \\\"abstract\\\",\\n    \\\"as\\\",\\n    \\\"async\\\",\\n    \\\"await\\\",\\n    \\\"become\\\",\\n    \\\"box\\\",\\n    \\\"break\\\",\\n    \\\"const\\\",\\n    \\\"continue\\\",\\n    \\\"crate\\\",\\n    \\\"do\\\",\\n    \\\"dyn\\\",\\n    \\\"else\\\",\\n    \\\"enum\\\",\\n    \\\"extern\\\",\\n    \\\"false\\\",\\n    \\\"final\\\",\\n    \\\"fn\\\",\\n    \\\"for\\\",\\n    \\\"if\\\",\\n    \\\"impl\\\",\\n    \\\"in\\\",\\n    \\\"let\\\",\\n    \\\"loop\\\",\\n    \\\"macro\\\",\\n    \\\"match\\\",\\n    \\\"mod\\\",\\n    \\\"move\\\",\\n    \\\"mut\\\",\\n    \\\"override\\\",\\n    \\\"priv\\\",\\n    \\\"pub\\\",\\n    \\\"ref\\\",\\n    \\\"return\\\",\\n    \\\"self\\\",\\n    \\\"Self\\\",\\n    \\\"static\\\",\\n    \\\"struct\\\",\\n    \\\"super\\\",\\n    \\\"trait\\\",\\n    \\\"true\\\",\\n    \\\"try\\\",\\n    \\\"type\\\",\\n    \\\"typeof\\\",\\n    \\\"unsafe\\\",\\n    \\\"unsized\\\",\\n    \\\"use\\\",\\n    \\\"virtual\\\",\\n    \\\"where\\\",\\n    \\\"while\\\",\\n    \\\"yield\\\"\\n  ];\\n  const LITERALS = [\\n    \\\"true\\\",\\n    \\\"false\\\",\\n    \\\"Some\\\",\\n    \\\"None\\\",\\n    \\\"Ok\\\",\\n    \\\"Err\\\"\\n  ];\\n  const BUILTINS = [\\n    // functions\\n    'drop ',\\n    // traits\\n    \\\"Copy\\\",\\n    \\\"Send\\\",\\n    \\\"Sized\\\",\\n    \\\"Sync\\\",\\n    \\\"Drop\\\",\\n    \\\"Fn\\\",\\n    \\\"FnMut\\\",\\n    \\\"FnOnce\\\",\\n    \\\"ToOwned\\\",\\n    \\\"Clone\\\",\\n    \\\"Debug\\\",\\n    \\\"PartialEq\\\",\\n    \\\"PartialOrd\\\",\\n    \\\"Eq\\\",\\n    \\\"Ord\\\",\\n    \\\"AsRef\\\",\\n    \\\"AsMut\\\",\\n    \\\"Into\\\",\\n    \\\"From\\\",\\n    \\\"Default\\\",\\n    \\\"Iterator\\\",\\n    \\\"Extend\\\",\\n    \\\"IntoIterator\\\",\\n    \\\"DoubleEndedIterator\\\",\\n    \\\"ExactSizeIterator\\\",\\n    \\\"SliceConcatExt\\\",\\n    \\\"ToString\\\",\\n    // macros\\n    \\\"assert!\\\",\\n    \\\"assert_eq!\\\",\\n    \\\"bitflags!\\\",\\n    \\\"bytes!\\\",\\n    \\\"cfg!\\\",\\n    \\\"col!\\\",\\n    \\\"concat!\\\",\\n    \\\"concat_idents!\\\",\\n    \\\"debug_assert!\\\",\\n    \\\"debug_assert_eq!\\\",\\n    \\\"env!\\\",\\n    \\\"panic!\\\",\\n    \\\"file!\\\",\\n    \\\"format!\\\",\\n    \\\"format_args!\\\",\\n    \\\"include_bin!\\\",\\n    \\\"include_str!\\\",\\n    \\\"line!\\\",\\n    \\\"local_data_key!\\\",\\n    \\\"module_path!\\\",\\n    \\\"option_env!\\\",\\n    \\\"print!\\\",\\n    \\\"println!\\\",\\n    \\\"select!\\\",\\n    \\\"stringify!\\\",\\n    \\\"try!\\\",\\n    \\\"unimplemented!\\\",\\n    \\\"unreachable!\\\",\\n    \\\"vec!\\\",\\n    \\\"write!\\\",\\n    \\\"writeln!\\\",\\n    \\\"macro_rules!\\\",\\n    \\\"assert_ne!\\\",\\n    \\\"debug_assert_ne!\\\"\\n  ];\\n  const TYPES = [\\n    \\\"i8\\\",\\n    \\\"i16\\\",\\n    \\\"i32\\\",\\n    \\\"i64\\\",\\n    \\\"i128\\\",\\n    \\\"isize\\\",\\n    \\\"u8\\\",\\n    \\\"u16\\\",\\n    \\\"u32\\\",\\n    \\\"u64\\\",\\n    \\\"u128\\\",\\n    \\\"usize\\\",\\n    \\\"f32\\\",\\n    \\\"f64\\\",\\n    \\\"str\\\",\\n    \\\"char\\\",\\n    \\\"bool\\\",\\n    \\\"Box\\\",\\n    \\\"Option\\\",\\n    \\\"Result\\\",\\n    \\\"String\\\",\\n    \\\"Vec\\\"\\n  ];\\n  return {\\n    name: 'Rust',\\n    aliases: [ 'rs' ],\\n    keywords: {\\n      $pattern: hljs.IDENT_RE + '!?',\\n      type: TYPES,\\n      keyword: KEYWORDS,\\n      literal: LITERALS,\\n      built_in: BUILTINS\\n    },\\n    illegal: '</',\\n    contains: [\\n      hljs.C_LINE_COMMENT_MODE,\\n      hljs.COMMENT('/\\\\\\\\*', '\\\\\\\\*/', {\\n        contains: [ 'self' ]\\n      }),\\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {\\n        begin: /b?\\\"/,\\n        illegal: null\\n      }),\\n      {\\n        className: 'string',\\n        variants: [\\n          {\\n            begin: /b?r(#*)\\\"(.|\\\\n)*?\\\"\\\\1(?!#)/\\n          },\\n          {\\n            begin: /b?'\\\\\\\\?(x\\\\w{2}|u\\\\w{4}|U\\\\w{8}|.)'/\\n          }\\n        ]\\n      },\\n      {\\n        className: 'symbol',\\n        begin: /'[a-zA-Z_][a-zA-Z0-9_]*/\\n      },\\n      {\\n        className: 'number',\\n        variants: [\\n          {\\n            begin: '\\\\\\\\b0b([01_]+)' + NUMBER_SUFFIX\\n          },\\n          {\\n            begin: '\\\\\\\\b0o([0-7_]+)' + NUMBER_SUFFIX\\n          },\\n          {\\n            begin: '\\\\\\\\b0x([A-Fa-f0-9_]+)' + NUMBER_SUFFIX\\n          },\\n          {\\n            begin: '\\\\\\\\b(\\\\\\\\d[\\\\\\\\d_]*(\\\\\\\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)' +\\n                   NUMBER_SUFFIX\\n          }\\n        ],\\n        relevance: 0\\n      },\\n      {\\n        begin: [\\n          /fn/,\\n          /\\\\s+/,\\n          hljs.UNDERSCORE_IDENT_RE\\n        ],\\n        className: {\\n          1: \\\"keyword\\\",\\n          3: \\\"title.function\\\"\\n        }\\n      },\\n      {\\n        className: 'meta',\\n        begin: '#!?\\\\\\\\[',\\n        end: '\\\\\\\\]',\\n        contains: [\\n          {\\n            className: 'string',\\n            begin: /\\\"/,\\n            end: /\\\"/\\n          }\\n        ]\\n      },\\n      {\\n        begin: [\\n          /let/, /\\\\s+/,\\n          /(?:mut\\\\s+)?/,\\n          hljs.UNDERSCORE_IDENT_RE\\n        ],\\n        className: {\\n          1: \\\"keyword\\\",\\n          3: \\\"keyword\\\",\\n          4: \\\"variable\\\"\\n        }\\n      },\\n      // must come before impl/for rule later\\n      {\\n        begin: [\\n          /for/,\\n          /\\\\s+/,\\n          hljs.UNDERSCORE_IDENT_RE,\\n          /\\\\s+/,\\n          /in/\\n        ],\\n        className: {\\n          1: \\\"keyword\\\",\\n          3: \\\"variable\\\",\\n          5: \\\"keyword\\\"\\n        }\\n      },\\n      {\\n        begin: [\\n          /type/,\\n          /\\\\s+/,\\n          hljs.UNDERSCORE_IDENT_RE\\n        ],\\n        className: {\\n          1: \\\"keyword\\\",\\n          3: \\\"title.class\\\"\\n        }\\n      },\\n      {\\n        begin: [\\n          /(?:trait|enum|struct|union|impl|for)/,\\n          /\\\\s+/,\\n          hljs.UNDERSCORE_IDENT_RE\\n        ],\\n        className: {\\n          1: \\\"keyword\\\",\\n          3: \\\"title.class\\\"\\n        }\\n      },\\n      {\\n        begin: hljs.IDENT_RE + '::',\\n        keywords: {\\n          keyword: \\\"Self\\\",\\n          built_in: BUILTINS\\n        }\\n      },\\n      {\\n        className: \\\"punctuation\\\",\\n        begin: '->'\\n      },\\n      FUNCTION_INVOKE\\n    ]\\n  };\\n}\\n\\nmodule.exports = rust;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"concat\",\"args\",\"map\",\"x\",\"source\",\"join\",\"joined\",\"rust\",\"hljs\",\"FUNCTION_INVOKE\",\"className\",\"relevance\",\"begin\",\"IDENT_RE\",\"re\",\"BUILTINS\",\"name\",\"aliases\",\"keywords\",\"$pattern\",\"type\",\"TYPES\",\"keyword\",\"KEYWORDS\",\"literal\",\"LITERALS\",\"built_in\",\"illegal\",\"contains\",\"C_LINE_COMMENT_MODE\",\"COMMENT\",\"inherit\",\"QUOTE_STRING_MODE\",\"variants\",\"UNDERSCORE_IDENT_RE\",\"end\"]\n}\n"]