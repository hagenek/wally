["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/polished/lib/shorthands/transitions.js"],"~:js","shadow$provide.module$node_modules$polished$lib$shorthands$transitions=function(global,require,module,exports){exports.__esModule=!0;exports.default=void 0;exports.default=function(){for(var _len=arguments.length,properties=Array(_len),_key=0;_key<_len;_key++)properties[_key]=arguments[_key];if(Array.isArray(properties[0])&&2===properties.length){var value=properties[1];if(\"string\"!==typeof value)throw Error(\"Property must be a string value.\");return{transition:properties[0].map(function(property){return property+\n\" \"+value}).join(\", \")}}return{transition:properties.join(\", \")}};module.exports=exports.default}","~:source","shadow$provide[\"module$node_modules$polished$lib$shorthands$transitions\"] = function(global,require,module,exports) {\n\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\n/**\n * Accepts any number of transition values as parameters for creating a single transition statement. You may also pass an array of properties as the first parameter that you would like to apply the same tranisition values to (second parameter).\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...transitions('opacity 1.0s ease-in 0s', 'width 2.0s ease-in 2s'),\n *   ...transitions(['color', 'background-color'], '2.0s ease-in 2s')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${transitions('opacity 1.0s ease-in 0s', 'width 2.0s ease-in 2s')};\n *   ${transitions(['color', 'background-color'], '2.0s ease-in 2s'),};\n * `\n *\n * // CSS as JS Output\n *\n * div {\n *   'transition': 'opacity 1.0s ease-in 0s, width 2.0s ease-in 2s'\n *   'transition': 'color 2.0s ease-in 2s, background-color 2.0s ease-in 2s',\n * }\n */\nfunction transitions() {\n  for (var _len = arguments.length, properties = new Array(_len), _key = 0; _key < _len; _key++) {\n    properties[_key] = arguments[_key];\n  }\n\n  if (Array.isArray(properties[0]) && properties.length === 2) {\n    var value = properties[1];\n\n    if (typeof value !== 'string') {\n      throw new Error('Property must be a string value.');\n    }\n\n    var transitionsString = properties[0].map(function (property) {\n      return property + \" \" + value;\n    }).join(', ');\n    return {\n      transition: transitionsString\n    };\n  } else {\n    return {\n      transition: properties.join(', ')\n    };\n  }\n}\n\nvar _default = transitions;\nexports.default = _default;\nmodule.exports = exports.default;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["__esModule","transition","default"]],"~:compiled-at",1638904261850,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$polished$lib$shorthands$transitions.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,CAAA,uDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGpHA,OAAQC,CAAAA,UAAR,CAAqB,CAAA,CACrBD,QAAQE,CAAAA,OAAR,CAAkB,IAAK,EAkDvBF,QAAQE,CAAAA,OAAR,CA1BAC,QAAoB,EAAG,CACrB,IADqB,IACZC,KAAOC,SAAUC,CAAAA,MADL,CACaC,WAAiBC,KAAJ,CAAUJ,IAAV,CAD1B,CAC2CK,KAAO,CAAvE,CAA0EA,IAA1E,CAAiFL,IAAjF,CAAuFK,IAAA,EAAvF,CACEF,UAAA,CAAWE,IAAX,CAAA,CAAmBJ,SAAA,CAAUI,IAAV,CAGrB,IAAID,KAAME,CAAAA,OAAN,CAAcH,UAAA,CAAW,CAAX,CAAd,CAAJ,EAA0D,CAA1D,GAAoCA,UAAWD,CAAAA,MAA/C,CAA6D,CAC3D,IAAIK,MAAQJ,UAAA,CAAW,CAAX,CAEZ,IAAqB,QAArB,GAAI,MAAOI,MAAX,CACE,KAAUC,MAAJ,CAAU,kCAAV,CAAN,CAMF,MAAO,CACLC,WAJsBN,UAAA,CAAW,CAAX,CAAcO,CAAAA,GAAd,CAAkB,QAAS,CAACC,QAAD,CAAW,CAC5D,MAAOA,SAAP;AAAkB,GAAlB,CAAwBJ,KADoC,CAAtC,CAErBK,CAAAA,IAFqBC,CAEhB,IAFgBA,CAGjB,CAVoD,CAc3D,MAAO,CACLJ,WAAYN,UAAWS,CAAAA,IAAX,CAAgB,IAAhB,CADP,CAnBY,CA2BvBjB,OAAOC,CAAAA,OAAP,CAAiBA,OAAQE,CAAAA,OAvD2F;\",\n\"sources\":[\"node_modules/polished/lib/shorthands/transitions.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$polished$lib$shorthands$transitions\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nexports.__esModule = true;\\nexports.default = void 0;\\n\\n/**\\n * Accepts any number of transition values as parameters for creating a single transition statement. You may also pass an array of properties as the first parameter that you would like to apply the same tranisition values to (second parameter).\\n * @example\\n * // Styles as object usage\\n * const styles = {\\n *   ...transitions('opacity 1.0s ease-in 0s', 'width 2.0s ease-in 2s'),\\n *   ...transitions(['color', 'background-color'], '2.0s ease-in 2s')\\n * }\\n *\\n * // styled-components usage\\n * const div = styled.div`\\n *   ${transitions('opacity 1.0s ease-in 0s', 'width 2.0s ease-in 2s')};\\n *   ${transitions(['color', 'background-color'], '2.0s ease-in 2s'),};\\n * `\\n *\\n * // CSS as JS Output\\n *\\n * div {\\n *   'transition': 'opacity 1.0s ease-in 0s, width 2.0s ease-in 2s'\\n *   'transition': 'color 2.0s ease-in 2s, background-color 2.0s ease-in 2s',\\n * }\\n */\\nfunction transitions() {\\n  for (var _len = arguments.length, properties = new Array(_len), _key = 0; _key < _len; _key++) {\\n    properties[_key] = arguments[_key];\\n  }\\n\\n  if (Array.isArray(properties[0]) && properties.length === 2) {\\n    var value = properties[1];\\n\\n    if (typeof value !== 'string') {\\n      throw new Error('Property must be a string value.');\\n    }\\n\\n    var transitionsString = properties[0].map(function (property) {\\n      return property + \\\" \\\" + value;\\n    }).join(', ');\\n    return {\\n      transition: transitionsString\\n    };\\n  } else {\\n    return {\\n      transition: properties.join(', ')\\n    };\\n  }\\n}\\n\\nvar _default = transitions;\\nexports.default = _default;\\nmodule.exports = exports.default;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"__esModule\",\"default\",\"transitions\",\"_len\",\"arguments\",\"length\",\"properties\",\"Array\",\"_key\",\"isArray\",\"value\",\"Error\",\"transition\",\"map\",\"property\",\"join\",\"transitionsString\"]\n}\n"]