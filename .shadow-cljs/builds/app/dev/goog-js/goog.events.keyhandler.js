["^ ","~:resource-id",["~:shadow.build.classpath/resource","goog/events/keyhandler.js"],"~:js","goog.provide(\"goog.events.KeyEvent\");\ngoog.provide(\"goog.events.KeyHandler\");\ngoog.provide(\"goog.events.KeyHandler.EventType\");\ngoog.require(\"goog.events\");\ngoog.require(\"goog.events.BrowserEvent\");\ngoog.require(\"goog.events.EventTarget\");\ngoog.require(\"goog.events.EventType\");\ngoog.require(\"goog.events.KeyCodes\");\ngoog.require(\"goog.userAgent\");\ngoog.events.KeyHandler = function(opt_element, opt_capture) {\n  goog.events.EventTarget.call(this);\n  if (opt_element) {\n    this.attach(opt_element, opt_capture);\n  }\n};\ngoog.inherits(goog.events.KeyHandler, goog.events.EventTarget);\ngoog.events.KeyHandler.prototype.element_ = null;\ngoog.events.KeyHandler.prototype.keyPressKey_ = null;\ngoog.events.KeyHandler.prototype.keyDownKey_ = null;\ngoog.events.KeyHandler.prototype.keyUpKey_ = null;\ngoog.events.KeyHandler.prototype.lastKey_ = -1;\ngoog.events.KeyHandler.prototype.keyCode_ = -1;\ngoog.events.KeyHandler.prototype.altKey_ = false;\ngoog.events.KeyHandler.EventType = {KEY:\"key\"};\ngoog.events.KeyHandler.safariKey_ = {3:goog.events.KeyCodes.ENTER, 12:goog.events.KeyCodes.NUMLOCK, 63232:goog.events.KeyCodes.UP, 63233:goog.events.KeyCodes.DOWN, 63234:goog.events.KeyCodes.LEFT, 63235:goog.events.KeyCodes.RIGHT, 63236:goog.events.KeyCodes.F1, 63237:goog.events.KeyCodes.F2, 63238:goog.events.KeyCodes.F3, 63239:goog.events.KeyCodes.F4, 63240:goog.events.KeyCodes.F5, 63241:goog.events.KeyCodes.F6, 63242:goog.events.KeyCodes.F7, 63243:goog.events.KeyCodes.F8, 63244:goog.events.KeyCodes.F9, \n63245:goog.events.KeyCodes.F10, 63246:goog.events.KeyCodes.F11, 63247:goog.events.KeyCodes.F12, 63248:goog.events.KeyCodes.PRINT_SCREEN, 63272:goog.events.KeyCodes.DELETE, 63273:goog.events.KeyCodes.HOME, 63275:goog.events.KeyCodes.END, 63276:goog.events.KeyCodes.PAGE_UP, 63277:goog.events.KeyCodes.PAGE_DOWN, 63289:goog.events.KeyCodes.NUMLOCK, 63302:goog.events.KeyCodes.INSERT};\ngoog.events.KeyHandler.keyIdentifier_ = {\"Up\":goog.events.KeyCodes.UP, \"Down\":goog.events.KeyCodes.DOWN, \"Left\":goog.events.KeyCodes.LEFT, \"Right\":goog.events.KeyCodes.RIGHT, \"Enter\":goog.events.KeyCodes.ENTER, \"F1\":goog.events.KeyCodes.F1, \"F2\":goog.events.KeyCodes.F2, \"F3\":goog.events.KeyCodes.F3, \"F4\":goog.events.KeyCodes.F4, \"F5\":goog.events.KeyCodes.F5, \"F6\":goog.events.KeyCodes.F6, \"F7\":goog.events.KeyCodes.F7, \"F8\":goog.events.KeyCodes.F8, \"F9\":goog.events.KeyCodes.F9, \"F10\":goog.events.KeyCodes.F10, \n\"F11\":goog.events.KeyCodes.F11, \"F12\":goog.events.KeyCodes.F12, \"U+007F\":goog.events.KeyCodes.DELETE, \"Home\":goog.events.KeyCodes.HOME, \"End\":goog.events.KeyCodes.END, \"PageUp\":goog.events.KeyCodes.PAGE_UP, \"PageDown\":goog.events.KeyCodes.PAGE_DOWN, \"Insert\":goog.events.KeyCodes.INSERT};\ngoog.events.KeyHandler.USES_KEYDOWN_ = !goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher(\"525\");\ngoog.events.KeyHandler.SAVE_ALT_FOR_KEYPRESS_ = goog.userAgent.MAC && goog.userAgent.GECKO;\ngoog.events.KeyHandler.prototype.handleKeyDown_ = function(e) {\n  if (goog.userAgent.WEBKIT || goog.userAgent.EDGE) {\n    if (this.lastKey_ == goog.events.KeyCodes.CTRL && !e.ctrlKey || this.lastKey_ == goog.events.KeyCodes.ALT && !e.altKey || goog.userAgent.MAC && this.lastKey_ == goog.events.KeyCodes.META && !e.metaKey) {\n      this.resetState();\n    }\n  }\n  if (this.lastKey_ == -1) {\n    if (e.ctrlKey && e.keyCode != goog.events.KeyCodes.CTRL) {\n      this.lastKey_ = goog.events.KeyCodes.CTRL;\n    } else {\n      if (e.altKey && e.keyCode != goog.events.KeyCodes.ALT) {\n        this.lastKey_ = goog.events.KeyCodes.ALT;\n      } else {\n        if (e.metaKey && e.keyCode != goog.events.KeyCodes.META) {\n          this.lastKey_ = goog.events.KeyCodes.META;\n        }\n      }\n    }\n  }\n  if (goog.events.KeyHandler.USES_KEYDOWN_ && !goog.events.KeyCodes.firesKeyPressEvent(e.keyCode, this.lastKey_, e.shiftKey, e.ctrlKey, e.altKey, e.metaKey)) {\n    this.handleEvent(e);\n  } else {\n    this.keyCode_ = goog.events.KeyCodes.normalizeKeyCode(e.keyCode);\n    if (goog.events.KeyHandler.SAVE_ALT_FOR_KEYPRESS_) {\n      this.altKey_ = e.altKey;\n    }\n  }\n};\ngoog.events.KeyHandler.prototype.resetState = function() {\n  this.lastKey_ = -1;\n  this.keyCode_ = -1;\n};\ngoog.events.KeyHandler.prototype.handleKeyup_ = function(e) {\n  this.resetState();\n  this.altKey_ = e.altKey;\n};\ngoog.events.KeyHandler.prototype.handleEvent = function(e) {\n  var be = e.getBrowserEvent();\n  var keyCode, charCode;\n  var altKey = be.altKey;\n  if (goog.userAgent.IE && e.type == goog.events.EventType.KEYPRESS) {\n    keyCode = this.keyCode_;\n    charCode = keyCode != goog.events.KeyCodes.ENTER && keyCode != goog.events.KeyCodes.ESC ? be.keyCode : 0;\n  } else {\n    if ((goog.userAgent.WEBKIT || goog.userAgent.EDGE) && e.type == goog.events.EventType.KEYPRESS) {\n      keyCode = this.keyCode_;\n      charCode = be.charCode >= 0 && be.charCode < 63232 && goog.events.KeyCodes.isCharacterKey(keyCode) ? be.charCode : 0;\n    } else {\n      if (goog.userAgent.OPERA && !goog.userAgent.WEBKIT) {\n        keyCode = this.keyCode_;\n        charCode = goog.events.KeyCodes.isCharacterKey(keyCode) ? be.keyCode : 0;\n      } else {\n        if (e.type == goog.events.EventType.KEYPRESS) {\n          if (goog.events.KeyHandler.SAVE_ALT_FOR_KEYPRESS_) {\n            altKey = this.altKey_;\n          }\n          if (be.keyCode == be.charCode) {\n            if (be.keyCode < 32) {\n              keyCode = be.keyCode;\n              charCode = 0;\n            } else {\n              keyCode = this.keyCode_;\n              charCode = be.charCode;\n            }\n          } else {\n            keyCode = be.keyCode || this.keyCode_;\n            charCode = be.charCode || 0;\n          }\n        } else {\n          keyCode = be.keyCode || this.keyCode_;\n          charCode = be.charCode || 0;\n        }\n        if (goog.userAgent.MAC && charCode == goog.events.KeyCodes.QUESTION_MARK && keyCode == goog.events.KeyCodes.WIN_KEY) {\n          keyCode = goog.events.KeyCodes.SLASH;\n        }\n      }\n    }\n  }\n  keyCode = goog.events.KeyCodes.normalizeKeyCode(keyCode);\n  var key = keyCode;\n  if (keyCode) {\n    if (keyCode >= 63232 && keyCode in goog.events.KeyHandler.safariKey_) {\n      key = goog.events.KeyHandler.safariKey_[keyCode];\n    } else {\n      if (keyCode == 25 && e.shiftKey) {\n        key = 9;\n      }\n    }\n  } else {\n    if (be.keyIdentifier && be.keyIdentifier in goog.events.KeyHandler.keyIdentifier_) {\n      key = goog.events.KeyHandler.keyIdentifier_[be.keyIdentifier];\n    }\n  }\n  if (goog.userAgent.GECKO && goog.events.KeyHandler.USES_KEYDOWN_ && e.type == goog.events.EventType.KEYPRESS && !goog.events.KeyCodes.firesKeyPressEvent(key, this.lastKey_, e.shiftKey, e.ctrlKey, altKey, e.metaKey)) {\n    return;\n  }\n  var repeat = key == this.lastKey_;\n  this.lastKey_ = key;\n  var event = new goog.events.KeyEvent(key, charCode, repeat, be);\n  event.altKey = altKey;\n  this.dispatchEvent(event);\n};\ngoog.events.KeyHandler.prototype.getElement = function() {\n  return this.element_;\n};\ngoog.events.KeyHandler.prototype.attach = function(element, opt_capture) {\n  if (this.keyUpKey_) {\n    this.detach();\n  }\n  this.element_ = element;\n  this.keyPressKey_ = goog.events.listen(this.element_, goog.events.EventType.KEYPRESS, this, opt_capture);\n  this.keyDownKey_ = goog.events.listen(this.element_, goog.events.EventType.KEYDOWN, this.handleKeyDown_, opt_capture, this);\n  this.keyUpKey_ = goog.events.listen(this.element_, goog.events.EventType.KEYUP, this.handleKeyup_, opt_capture, this);\n};\ngoog.events.KeyHandler.prototype.detach = function() {\n  if (this.keyPressKey_) {\n    goog.events.unlistenByKey(this.keyPressKey_);\n    goog.events.unlistenByKey(this.keyDownKey_);\n    goog.events.unlistenByKey(this.keyUpKey_);\n    this.keyPressKey_ = null;\n    this.keyDownKey_ = null;\n    this.keyUpKey_ = null;\n  }\n  this.element_ = null;\n  this.lastKey_ = -1;\n  this.keyCode_ = -1;\n};\ngoog.events.KeyHandler.prototype.disposeInternal = function() {\n  goog.events.KeyHandler.superClass_.disposeInternal.call(this);\n  this.detach();\n};\ngoog.events.KeyEvent = function(keyCode, charCode, repeat, browserEvent) {\n  goog.events.BrowserEvent.call(this, browserEvent);\n  this.type = goog.events.KeyHandler.EventType.KEY;\n  this.keyCode = keyCode;\n  this.charCode = charCode;\n  this.repeat = repeat;\n};\ngoog.inherits(goog.events.KeyEvent, goog.events.BrowserEvent);\n","~:source","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview This file contains a class for working with keyboard events\n * that repeat consistently across browsers and platforms. It also unifies the\n * key code so that it is the same in all browsers and platforms.\n *\n * Different web browsers have very different keyboard event handling. Most\n * importantly is that only certain browsers repeat keydown events:\n * IE, Opera, FF/Win32, and Safari 3 repeat keydown events.\n * FF/Mac and Safari 2 do not.\n *\n * For the purposes of this code, \"Safari 3\" means WebKit 525+, when WebKit\n * decided that they should try to match IE's key handling behavior.\n * Safari 3.0.4, which shipped with Leopard (WebKit 523), has the\n * Safari 2 behavior.\n *\n * Firefox, Safari, Opera prevent on keypress\n *\n * IE prevents on keydown\n *\n * Firefox does not fire keypress for shift, ctrl, alt\n * Firefox does fire keydown for shift, ctrl, alt, meta\n * Firefox does not repeat keydown for shift, ctrl, alt, meta\n *\n * Firefox does not fire keypress for up and down in an input\n *\n * Opera fires keypress for shift, ctrl, alt, meta\n * Opera does not repeat keypress for shift, ctrl, alt, meta\n *\n * Safari 2 and 3 do not fire keypress for shift, ctrl, alt\n * Safari 2 does not fire keydown for shift, ctrl, alt\n * Safari 3 *does* fire keydown for shift, ctrl, alt\n *\n * IE provides the keycode for keyup/down events and the charcode (in the\n * keycode field) for keypress.\n *\n * Mozilla provides the keycode for keyup/down and the charcode for keypress\n * unless it's a non text modifying key in which case the keycode is provided.\n *\n * Safari 3 provides the keycode and charcode for all events.\n *\n * Opera provides the keycode for keyup/down event and either the charcode or\n * the keycode (in the keycode field) for keypress events.\n *\n * Firefox x11 doesn't fire keydown events if a another key is already held down\n * until the first key is released. This can cause a key event to be fired with\n * a keyCode for the first key and a charCode for the second key.\n *\n * Safari in keypress\n *\n *        charCode keyCode which\n * ENTER:       13      13    13\n * F1:       63236   63236 63236\n * F8:       63243   63243 63243\n * ...\n * p:          112     112   112\n * P:           80      80    80\n *\n * Firefox, keypress:\n *\n *        charCode keyCode which\n * ENTER:        0      13    13\n * F1:           0     112     0\n * F8:           0     119     0\n * ...\n * p:          112       0   112\n * P:           80       0    80\n *\n * Opera, Mac+Win32, keypress:\n *\n *         charCode keyCode which\n * ENTER: undefined      13    13\n * F1:    undefined     112     0\n * F8:    undefined     119     0\n * ...\n * p:     undefined     112   112\n * P:     undefined      80    80\n *\n * IE7, keydown\n *\n *         charCode keyCode     which\n * ENTER: undefined      13 undefined\n * F1:    undefined     112 undefined\n * F8:    undefined     119 undefined\n * ...\n * p:     undefined      80 undefined\n * P:     undefined      80 undefined\n *\n * @see ../demos/keyhandler.html\n */\n\ngoog.provide('goog.events.KeyEvent');\ngoog.provide('goog.events.KeyHandler');\ngoog.provide('goog.events.KeyHandler.EventType');\n\ngoog.require('goog.events');\ngoog.require('goog.events.BrowserEvent');\ngoog.require('goog.events.EventTarget');\ngoog.require('goog.events.EventType');\ngoog.require('goog.events.KeyCodes');\ngoog.require('goog.userAgent');\n\n\n\n/**\n * A wrapper around an element that you want to listen to keyboard events on.\n * @param {Element|Document=} opt_element The element or document to listen on.\n * @param {boolean=} opt_capture Whether to listen for browser events in\n *     capture phase (defaults to false).\n * @constructor\n * @extends {goog.events.EventTarget}\n * @final\n */\ngoog.events.KeyHandler = function(opt_element, opt_capture) {\n  'use strict';\n  goog.events.EventTarget.call(this);\n\n  if (opt_element) {\n    this.attach(opt_element, opt_capture);\n  }\n};\ngoog.inherits(goog.events.KeyHandler, goog.events.EventTarget);\n\n\n/**\n * This is the element that we will listen to the real keyboard events on.\n * @type {?Element|?Document|null}\n * @private\n */\ngoog.events.KeyHandler.prototype.element_ = null;\n\n\n/**\n * The key for the key press listener.\n * @type {?goog.events.Key}\n * @private\n */\ngoog.events.KeyHandler.prototype.keyPressKey_ = null;\n\n\n/**\n * The key for the key down listener.\n * @type {?goog.events.Key}\n * @private\n */\ngoog.events.KeyHandler.prototype.keyDownKey_ = null;\n\n\n/**\n * The key for the key up listener.\n * @type {?goog.events.Key}\n * @private\n */\ngoog.events.KeyHandler.prototype.keyUpKey_ = null;\n\n\n/**\n * Used to detect keyboard repeat events.\n * @private\n * @type {number}\n */\ngoog.events.KeyHandler.prototype.lastKey_ = -1;\n\n\n/**\n * Keycode recorded for key down events. As most browsers don't report the\n * keycode in the key press event we need to record it in the key down phase.\n * @private\n * @type {number}\n */\ngoog.events.KeyHandler.prototype.keyCode_ = -1;\n\n\n/**\n * Alt key recorded for key down events. FF on Mac does not report the alt key\n * flag in the key press event, we need to record it in the key down phase.\n * @type {boolean}\n * @private\n */\ngoog.events.KeyHandler.prototype.altKey_ = false;\n\n\n/**\n * Enum type for the events fired by the key handler\n * @enum {string}\n */\ngoog.events.KeyHandler.EventType = {\n  KEY: 'key'\n};\n\n\n/**\n * An enumeration of key codes that Safari 2 does incorrectly\n * @type {Object}\n * @private\n */\ngoog.events.KeyHandler.safariKey_ = {\n  '3': goog.events.KeyCodes.ENTER,             // 13\n  '12': goog.events.KeyCodes.NUMLOCK,          // 144\n  '63232': goog.events.KeyCodes.UP,            // 38\n  '63233': goog.events.KeyCodes.DOWN,          // 40\n  '63234': goog.events.KeyCodes.LEFT,          // 37\n  '63235': goog.events.KeyCodes.RIGHT,         // 39\n  '63236': goog.events.KeyCodes.F1,            // 112\n  '63237': goog.events.KeyCodes.F2,            // 113\n  '63238': goog.events.KeyCodes.F3,            // 114\n  '63239': goog.events.KeyCodes.F4,            // 115\n  '63240': goog.events.KeyCodes.F5,            // 116\n  '63241': goog.events.KeyCodes.F6,            // 117\n  '63242': goog.events.KeyCodes.F7,            // 118\n  '63243': goog.events.KeyCodes.F8,            // 119\n  '63244': goog.events.KeyCodes.F9,            // 120\n  '63245': goog.events.KeyCodes.F10,           // 121\n  '63246': goog.events.KeyCodes.F11,           // 122\n  '63247': goog.events.KeyCodes.F12,           // 123\n  '63248': goog.events.KeyCodes.PRINT_SCREEN,  // 44\n  '63272': goog.events.KeyCodes.DELETE,        // 46\n  '63273': goog.events.KeyCodes.HOME,          // 36\n  '63275': goog.events.KeyCodes.END,           // 35\n  '63276': goog.events.KeyCodes.PAGE_UP,       // 33\n  '63277': goog.events.KeyCodes.PAGE_DOWN,     // 34\n  '63289': goog.events.KeyCodes.NUMLOCK,       // 144\n  '63302': goog.events.KeyCodes.INSERT         // 45\n};\n\n\n/**\n * An enumeration of key identifiers currently part of the W3C draft for DOM3\n * and their mappings to keyCodes.\n * http://www.w3.org/TR/DOM-Level-3-Events/keyset.html#KeySet-Set\n * This is currently supported in Safari and should be platform independent.\n * @type {Object}\n * @private\n */\ngoog.events.KeyHandler.keyIdentifier_ = {\n  'Up': goog.events.KeyCodes.UP,               // 38\n  'Down': goog.events.KeyCodes.DOWN,           // 40\n  'Left': goog.events.KeyCodes.LEFT,           // 37\n  'Right': goog.events.KeyCodes.RIGHT,         // 39\n  'Enter': goog.events.KeyCodes.ENTER,         // 13\n  'F1': goog.events.KeyCodes.F1,               // 112\n  'F2': goog.events.KeyCodes.F2,               // 113\n  'F3': goog.events.KeyCodes.F3,               // 114\n  'F4': goog.events.KeyCodes.F4,               // 115\n  'F5': goog.events.KeyCodes.F5,               // 116\n  'F6': goog.events.KeyCodes.F6,               // 117\n  'F7': goog.events.KeyCodes.F7,               // 118\n  'F8': goog.events.KeyCodes.F8,               // 119\n  'F9': goog.events.KeyCodes.F9,               // 120\n  'F10': goog.events.KeyCodes.F10,             // 121\n  'F11': goog.events.KeyCodes.F11,             // 122\n  'F12': goog.events.KeyCodes.F12,             // 123\n  'U+007F': goog.events.KeyCodes.DELETE,       // 46\n  'Home': goog.events.KeyCodes.HOME,           // 36\n  'End': goog.events.KeyCodes.END,             // 35\n  'PageUp': goog.events.KeyCodes.PAGE_UP,      // 33\n  'PageDown': goog.events.KeyCodes.PAGE_DOWN,  // 34\n  'Insert': goog.events.KeyCodes.INSERT        // 45\n};\n\n\n/**\n * If true, the KeyEvent fires on keydown. Otherwise, it fires on keypress.\n *\n * @type {boolean}\n * @private\n */\ngoog.events.KeyHandler.USES_KEYDOWN_ =\n    !goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher('525');\n\n\n/**\n * If true, the alt key flag is saved during the key down and reused when\n * handling the key press. FF on Mac does not set the alt flag in the key press\n * event.\n * @type {boolean}\n * @private\n */\ngoog.events.KeyHandler.SAVE_ALT_FOR_KEYPRESS_ =\n    goog.userAgent.MAC && goog.userAgent.GECKO;\n\n\n/**\n * Records the keycode for browsers that only returns the keycode for key up/\n * down events. For browser/key combinations that doesn't trigger a key pressed\n * event it also fires the patched key event.\n * @param {goog.events.BrowserEvent} e The key down event.\n * @private\n */\ngoog.events.KeyHandler.prototype.handleKeyDown_ = function(e) {\n  'use strict';\n  // Ctrl-Tab and Alt-Tab can cause the focus to be moved to another window\n  // before we've caught a key-up event.  If the last-key was one of these we\n  // reset the state.\n  if (goog.userAgent.WEBKIT || goog.userAgent.EDGE) {\n    if (this.lastKey_ == goog.events.KeyCodes.CTRL && !e.ctrlKey ||\n        this.lastKey_ == goog.events.KeyCodes.ALT && !e.altKey ||\n        goog.userAgent.MAC && this.lastKey_ == goog.events.KeyCodes.META &&\n            !e.metaKey) {\n      this.resetState();\n    }\n  }\n\n  if (this.lastKey_ == -1) {\n    if (e.ctrlKey && e.keyCode != goog.events.KeyCodes.CTRL) {\n      this.lastKey_ = goog.events.KeyCodes.CTRL;\n    } else if (e.altKey && e.keyCode != goog.events.KeyCodes.ALT) {\n      this.lastKey_ = goog.events.KeyCodes.ALT;\n    } else if (e.metaKey && e.keyCode != goog.events.KeyCodes.META) {\n      this.lastKey_ = goog.events.KeyCodes.META;\n    }\n  }\n\n  if (goog.events.KeyHandler.USES_KEYDOWN_ &&\n      !goog.events.KeyCodes.firesKeyPressEvent(\n          e.keyCode, this.lastKey_, e.shiftKey, e.ctrlKey, e.altKey,\n          e.metaKey)) {\n    this.handleEvent(e);\n  } else {\n    this.keyCode_ = goog.events.KeyCodes.normalizeKeyCode(e.keyCode);\n    if (goog.events.KeyHandler.SAVE_ALT_FOR_KEYPRESS_) {\n      this.altKey_ = e.altKey;\n    }\n  }\n};\n\n\n/**\n * Resets the stored previous values. Needed to be called for webkit which will\n * not generate a key up for meta key operations. This should only be called\n * when having finished with repeat key possibilities.\n */\ngoog.events.KeyHandler.prototype.resetState = function() {\n  'use strict';\n  this.lastKey_ = -1;\n  this.keyCode_ = -1;\n};\n\n\n/**\n * Clears the stored previous key value, resetting the key repeat status. Uses\n * -1 because the Safari 3 Windows beta reports 0 for certain keys (like Home\n * and End.)\n * @param {goog.events.BrowserEvent} e The keyup event.\n * @private\n */\ngoog.events.KeyHandler.prototype.handleKeyup_ = function(e) {\n  'use strict';\n  this.resetState();\n  this.altKey_ = e.altKey;\n};\n\n\n/**\n * Handles the events on the element.\n * @param {goog.events.BrowserEvent} e  The keyboard event sent from the\n *     browser.\n */\ngoog.events.KeyHandler.prototype.handleEvent = function(e) {\n  'use strict';\n  var be = e.getBrowserEvent();\n  var keyCode, charCode;\n  var altKey = be.altKey;\n\n  // IE reports the character code in the keyCode field for keypress events.\n  // There are two exceptions however, Enter and Escape.\n  if (goog.userAgent.IE && e.type == goog.events.EventType.KEYPRESS) {\n    keyCode = this.keyCode_;\n    charCode = keyCode != goog.events.KeyCodes.ENTER &&\n            keyCode != goog.events.KeyCodes.ESC ?\n        be.keyCode :\n        0;\n\n    // Safari reports the character code in the keyCode field for keypress\n    // events but also has a charCode field.\n  } else if (\n      (goog.userAgent.WEBKIT || goog.userAgent.EDGE) &&\n      e.type == goog.events.EventType.KEYPRESS) {\n    keyCode = this.keyCode_;\n    charCode = be.charCode >= 0 && be.charCode < 63232 &&\n            goog.events.KeyCodes.isCharacterKey(keyCode) ?\n        be.charCode :\n        0;\n\n    // Opera reports the keycode or the character code in the keyCode field.\n  } else if (goog.userAgent.OPERA && !goog.userAgent.WEBKIT) {\n    keyCode = this.keyCode_;\n    charCode = goog.events.KeyCodes.isCharacterKey(keyCode) ? be.keyCode : 0;\n\n    // Mozilla reports the character code in the charCode field.\n  } else {\n    if (e.type == goog.events.EventType.KEYPRESS) {\n      if (goog.events.KeyHandler.SAVE_ALT_FOR_KEYPRESS_) {\n        altKey = this.altKey_;\n      }\n\n      // Newer versions of Firefox will set the keyCode of non-function keys to\n      // be the same as charCode. We need to account for this and update the\n      // key event values accordingly. See\n      // https://github.com/google/closure-library/issues/932 for more details.\n      if (be.keyCode == be.charCode) {\n        // Adjust any function key (ie. non-printable, such as ESC or\n        // backspace) to not have a charCode. We don't want these keys to\n        // accidentally be interpreted as insertable characters.\n        if (be.keyCode < 0x20) {\n          keyCode = be.keyCode;\n          charCode = 0;\n        } else {\n          // For character keys, we want to use the preserved key code rather\n          // than the keyCode on the browser event, which now uses the charCode.\n          // These differ (eg. pressing 'a' gives keydown with keyCode = 65,\n          // keypress with keyCode = charCode = 97) and so we need to account\n          // for this.\n          keyCode = this.keyCode_;\n          charCode = be.charCode;\n        }\n      } else {\n        keyCode = be.keyCode || this.keyCode_;\n        charCode = be.charCode || 0;\n      }\n    } else {\n      keyCode = be.keyCode || this.keyCode_;\n      charCode = be.charCode || 0;\n    }\n\n    // On the Mac, shift-/ triggers a question mark char code and no key code\n    // (WIN_KEY_FF_LINUX), so we synthesize the latter.\n    if (goog.userAgent.MAC && charCode == goog.events.KeyCodes.QUESTION_MARK &&\n        keyCode == goog.events.KeyCodes.WIN_KEY) {\n      keyCode = goog.events.KeyCodes.SLASH;\n    }\n  }\n\n  keyCode = goog.events.KeyCodes.normalizeKeyCode(keyCode);\n  var key = keyCode;\n\n  // Correct the key value for certain browser-specific quirks.\n  if (keyCode) {\n    if (keyCode >= 63232 && keyCode in goog.events.KeyHandler.safariKey_) {\n      // NOTE(nicksantos): Safari 3 has fixed this problem,\n      // this is only needed for Safari 2.\n      key = goog.events.KeyHandler.safariKey_[keyCode];\n    } else {\n      // Safari returns 25 for Shift+Tab instead of 9.\n      if (keyCode == 25 && e.shiftKey) {\n        key = 9;\n      }\n    }\n  } else if (\n      be.keyIdentifier &&\n      be.keyIdentifier in goog.events.KeyHandler.keyIdentifier_) {\n    // This is needed for Safari Windows because it currently doesn't give a\n    // keyCode/which for non printable keys.\n    key = goog.events.KeyHandler.keyIdentifier_[be.keyIdentifier];\n  }\n\n  // If this was a redundant keypress event, we ignore it to avoid double-firing\n  // an event as the event would've been handled by KEYDOWN. Gecko is currently\n  // in the process of removing keypress events for non-printable characters\n  // (https://bugzilla.mozilla.org/show_bug.cgi?id=968056) so we simulate this\n  // logic here for older Gecko versions which still fire the events.\n  if (goog.userAgent.GECKO && goog.events.KeyHandler.USES_KEYDOWN_ &&\n      e.type == goog.events.EventType.KEYPRESS &&\n      !goog.events.KeyCodes.firesKeyPressEvent(\n          key, this.lastKey_, e.shiftKey, e.ctrlKey, altKey, e.metaKey)) {\n    return;\n  }\n\n  // If we get the same keycode as a keydown/keypress without having seen a\n  // keyup event, then this event was caused by key repeat.\n  var repeat = key == this.lastKey_;\n  this.lastKey_ = key;\n\n  var event = new goog.events.KeyEvent(key, charCode, repeat, be);\n  event.altKey = altKey;\n  this.dispatchEvent(event);\n};\n\n\n/**\n * Returns the element listened on for the real keyboard events.\n * @return {Element|Document|null} The element listened on for the real\n *     keyboard events.\n */\ngoog.events.KeyHandler.prototype.getElement = function() {\n  'use strict';\n  return this.element_;\n};\n\n\n/**\n * Adds the proper key event listeners to the element.\n * @param {Element|Document} element The element to listen on.\n * @param {boolean=} opt_capture Whether to listen for browser events in\n *     capture phase (defaults to false).\n */\ngoog.events.KeyHandler.prototype.attach = function(element, opt_capture) {\n  'use strict';\n  if (this.keyUpKey_) {\n    this.detach();\n  }\n\n  this.element_ = element;\n\n  this.keyPressKey_ = goog.events.listen(\n      this.element_, goog.events.EventType.KEYPRESS, this, opt_capture);\n\n  // Most browsers (Safari 2 being the notable exception) doesn't include the\n  // keyCode in keypress events (IE has the char code in the keyCode field and\n  // Mozilla only included the keyCode if there's no charCode). Thus we have to\n  // listen for keydown to capture the keycode.\n  this.keyDownKey_ = goog.events.listen(\n      this.element_, goog.events.EventType.KEYDOWN, this.handleKeyDown_,\n      opt_capture, this);\n\n\n  this.keyUpKey_ = goog.events.listen(\n      this.element_, goog.events.EventType.KEYUP, this.handleKeyup_,\n      opt_capture, this);\n};\n\n\n/**\n * Removes the listeners that may exist.\n */\ngoog.events.KeyHandler.prototype.detach = function() {\n  'use strict';\n  if (this.keyPressKey_) {\n    goog.events.unlistenByKey(this.keyPressKey_);\n    goog.events.unlistenByKey(this.keyDownKey_);\n    goog.events.unlistenByKey(this.keyUpKey_);\n    this.keyPressKey_ = null;\n    this.keyDownKey_ = null;\n    this.keyUpKey_ = null;\n  }\n  this.element_ = null;\n  this.lastKey_ = -1;\n  this.keyCode_ = -1;\n};\n\n\n/** @override */\ngoog.events.KeyHandler.prototype.disposeInternal = function() {\n  'use strict';\n  goog.events.KeyHandler.superClass_.disposeInternal.call(this);\n  this.detach();\n};\n\n\n\n/**\n * This class is used for the goog.events.KeyHandler.EventType.KEY event and\n * it overrides the key code with the fixed key code.\n * @param {number} keyCode The adjusted key code.\n * @param {number} charCode The unicode character code.\n * @param {boolean} repeat Whether this event was generated by keyboard repeat.\n * @param {Event} browserEvent Browser event object.\n * @constructor\n * @extends {goog.events.BrowserEvent}\n * @final\n */\ngoog.events.KeyEvent = function(keyCode, charCode, repeat, browserEvent) {\n  'use strict';\n  goog.events.BrowserEvent.call(this, browserEvent);\n  this.type = goog.events.KeyHandler.EventType.KEY;\n\n  /**\n   * Keycode of key press.\n   * @type {number}\n   */\n  this.keyCode = keyCode;\n\n  /**\n   * Unicode character code.\n   * @type {number}\n   */\n  this.charCode = charCode;\n\n  /**\n   * True if this event was generated by keyboard auto-repeat (i.e., the user is\n   * holding the key down.)\n   * @type {boolean}\n   */\n  this.repeat = repeat;\n};\ngoog.inherits(goog.events.KeyEvent, goog.events.BrowserEvent);\n","~:compiled-at",1638904245620,"~:source-map-json","{\n\"version\":3,\n\"file\":\"goog.events.keyhandler.js\",\n\"lineCount\":170,\n\"mappings\":\"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\",\n\"sources\":[\"goog/events/keyhandler.js\"],\n\"sourcesContent\":[\"/**\\n * @license\\n * Copyright The Closure Library Authors.\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\n/**\\n * @fileoverview This file contains a class for working with keyboard events\\n * that repeat consistently across browsers and platforms. It also unifies the\\n * key code so that it is the same in all browsers and platforms.\\n *\\n * Different web browsers have very different keyboard event handling. Most\\n * importantly is that only certain browsers repeat keydown events:\\n * IE, Opera, FF/Win32, and Safari 3 repeat keydown events.\\n * FF/Mac and Safari 2 do not.\\n *\\n * For the purposes of this code, \\\"Safari 3\\\" means WebKit 525+, when WebKit\\n * decided that they should try to match IE's key handling behavior.\\n * Safari 3.0.4, which shipped with Leopard (WebKit 523), has the\\n * Safari 2 behavior.\\n *\\n * Firefox, Safari, Opera prevent on keypress\\n *\\n * IE prevents on keydown\\n *\\n * Firefox does not fire keypress for shift, ctrl, alt\\n * Firefox does fire keydown for shift, ctrl, alt, meta\\n * Firefox does not repeat keydown for shift, ctrl, alt, meta\\n *\\n * Firefox does not fire keypress for up and down in an input\\n *\\n * Opera fires keypress for shift, ctrl, alt, meta\\n * Opera does not repeat keypress for shift, ctrl, alt, meta\\n *\\n * Safari 2 and 3 do not fire keypress for shift, ctrl, alt\\n * Safari 2 does not fire keydown for shift, ctrl, alt\\n * Safari 3 *does* fire keydown for shift, ctrl, alt\\n *\\n * IE provides the keycode for keyup/down events and the charcode (in the\\n * keycode field) for keypress.\\n *\\n * Mozilla provides the keycode for keyup/down and the charcode for keypress\\n * unless it's a non text modifying key in which case the keycode is provided.\\n *\\n * Safari 3 provides the keycode and charcode for all events.\\n *\\n * Opera provides the keycode for keyup/down event and either the charcode or\\n * the keycode (in the keycode field) for keypress events.\\n *\\n * Firefox x11 doesn't fire keydown events if a another key is already held down\\n * until the first key is released. This can cause a key event to be fired with\\n * a keyCode for the first key and a charCode for the second key.\\n *\\n * Safari in keypress\\n *\\n *        charCode keyCode which\\n * ENTER:       13      13    13\\n * F1:       63236   63236 63236\\n * F8:       63243   63243 63243\\n * ...\\n * p:          112     112   112\\n * P:           80      80    80\\n *\\n * Firefox, keypress:\\n *\\n *        charCode keyCode which\\n * ENTER:        0      13    13\\n * F1:           0     112     0\\n * F8:           0     119     0\\n * ...\\n * p:          112       0   112\\n * P:           80       0    80\\n *\\n * Opera, Mac+Win32, keypress:\\n *\\n *         charCode keyCode which\\n * ENTER: undefined      13    13\\n * F1:    undefined     112     0\\n * F8:    undefined     119     0\\n * ...\\n * p:     undefined     112   112\\n * P:     undefined      80    80\\n *\\n * IE7, keydown\\n *\\n *         charCode keyCode     which\\n * ENTER: undefined      13 undefined\\n * F1:    undefined     112 undefined\\n * F8:    undefined     119 undefined\\n * ...\\n * p:     undefined      80 undefined\\n * P:     undefined      80 undefined\\n *\\n * @see ../demos/keyhandler.html\\n */\\n\\ngoog.provide('goog.events.KeyEvent');\\ngoog.provide('goog.events.KeyHandler');\\ngoog.provide('goog.events.KeyHandler.EventType');\\n\\ngoog.require('goog.events');\\ngoog.require('goog.events.BrowserEvent');\\ngoog.require('goog.events.EventTarget');\\ngoog.require('goog.events.EventType');\\ngoog.require('goog.events.KeyCodes');\\ngoog.require('goog.userAgent');\\n\\n\\n\\n/**\\n * A wrapper around an element that you want to listen to keyboard events on.\\n * @param {Element|Document=} opt_element The element or document to listen on.\\n * @param {boolean=} opt_capture Whether to listen for browser events in\\n *     capture phase (defaults to false).\\n * @constructor\\n * @extends {goog.events.EventTarget}\\n * @final\\n */\\ngoog.events.KeyHandler = function(opt_element, opt_capture) {\\n  'use strict';\\n  goog.events.EventTarget.call(this);\\n\\n  if (opt_element) {\\n    this.attach(opt_element, opt_capture);\\n  }\\n};\\ngoog.inherits(goog.events.KeyHandler, goog.events.EventTarget);\\n\\n\\n/**\\n * This is the element that we will listen to the real keyboard events on.\\n * @type {?Element|?Document|null}\\n * @private\\n */\\ngoog.events.KeyHandler.prototype.element_ = null;\\n\\n\\n/**\\n * The key for the key press listener.\\n * @type {?goog.events.Key}\\n * @private\\n */\\ngoog.events.KeyHandler.prototype.keyPressKey_ = null;\\n\\n\\n/**\\n * The key for the key down listener.\\n * @type {?goog.events.Key}\\n * @private\\n */\\ngoog.events.KeyHandler.prototype.keyDownKey_ = null;\\n\\n\\n/**\\n * The key for the key up listener.\\n * @type {?goog.events.Key}\\n * @private\\n */\\ngoog.events.KeyHandler.prototype.keyUpKey_ = null;\\n\\n\\n/**\\n * Used to detect keyboard repeat events.\\n * @private\\n * @type {number}\\n */\\ngoog.events.KeyHandler.prototype.lastKey_ = -1;\\n\\n\\n/**\\n * Keycode recorded for key down events. As most browsers don't report the\\n * keycode in the key press event we need to record it in the key down phase.\\n * @private\\n * @type {number}\\n */\\ngoog.events.KeyHandler.prototype.keyCode_ = -1;\\n\\n\\n/**\\n * Alt key recorded for key down events. FF on Mac does not report the alt key\\n * flag in the key press event, we need to record it in the key down phase.\\n * @type {boolean}\\n * @private\\n */\\ngoog.events.KeyHandler.prototype.altKey_ = false;\\n\\n\\n/**\\n * Enum type for the events fired by the key handler\\n * @enum {string}\\n */\\ngoog.events.KeyHandler.EventType = {\\n  KEY: 'key'\\n};\\n\\n\\n/**\\n * An enumeration of key codes that Safari 2 does incorrectly\\n * @type {Object}\\n * @private\\n */\\ngoog.events.KeyHandler.safariKey_ = {\\n  '3': goog.events.KeyCodes.ENTER,             // 13\\n  '12': goog.events.KeyCodes.NUMLOCK,          // 144\\n  '63232': goog.events.KeyCodes.UP,            // 38\\n  '63233': goog.events.KeyCodes.DOWN,          // 40\\n  '63234': goog.events.KeyCodes.LEFT,          // 37\\n  '63235': goog.events.KeyCodes.RIGHT,         // 39\\n  '63236': goog.events.KeyCodes.F1,            // 112\\n  '63237': goog.events.KeyCodes.F2,            // 113\\n  '63238': goog.events.KeyCodes.F3,            // 114\\n  '63239': goog.events.KeyCodes.F4,            // 115\\n  '63240': goog.events.KeyCodes.F5,            // 116\\n  '63241': goog.events.KeyCodes.F6,            // 117\\n  '63242': goog.events.KeyCodes.F7,            // 118\\n  '63243': goog.events.KeyCodes.F8,            // 119\\n  '63244': goog.events.KeyCodes.F9,            // 120\\n  '63245': goog.events.KeyCodes.F10,           // 121\\n  '63246': goog.events.KeyCodes.F11,           // 122\\n  '63247': goog.events.KeyCodes.F12,           // 123\\n  '63248': goog.events.KeyCodes.PRINT_SCREEN,  // 44\\n  '63272': goog.events.KeyCodes.DELETE,        // 46\\n  '63273': goog.events.KeyCodes.HOME,          // 36\\n  '63275': goog.events.KeyCodes.END,           // 35\\n  '63276': goog.events.KeyCodes.PAGE_UP,       // 33\\n  '63277': goog.events.KeyCodes.PAGE_DOWN,     // 34\\n  '63289': goog.events.KeyCodes.NUMLOCK,       // 144\\n  '63302': goog.events.KeyCodes.INSERT         // 45\\n};\\n\\n\\n/**\\n * An enumeration of key identifiers currently part of the W3C draft for DOM3\\n * and their mappings to keyCodes.\\n * http://www.w3.org/TR/DOM-Level-3-Events/keyset.html#KeySet-Set\\n * This is currently supported in Safari and should be platform independent.\\n * @type {Object}\\n * @private\\n */\\ngoog.events.KeyHandler.keyIdentifier_ = {\\n  'Up': goog.events.KeyCodes.UP,               // 38\\n  'Down': goog.events.KeyCodes.DOWN,           // 40\\n  'Left': goog.events.KeyCodes.LEFT,           // 37\\n  'Right': goog.events.KeyCodes.RIGHT,         // 39\\n  'Enter': goog.events.KeyCodes.ENTER,         // 13\\n  'F1': goog.events.KeyCodes.F1,               // 112\\n  'F2': goog.events.KeyCodes.F2,               // 113\\n  'F3': goog.events.KeyCodes.F3,               // 114\\n  'F4': goog.events.KeyCodes.F4,               // 115\\n  'F5': goog.events.KeyCodes.F5,               // 116\\n  'F6': goog.events.KeyCodes.F6,               // 117\\n  'F7': goog.events.KeyCodes.F7,               // 118\\n  'F8': goog.events.KeyCodes.F8,               // 119\\n  'F9': goog.events.KeyCodes.F9,               // 120\\n  'F10': goog.events.KeyCodes.F10,             // 121\\n  'F11': goog.events.KeyCodes.F11,             // 122\\n  'F12': goog.events.KeyCodes.F12,             // 123\\n  'U+007F': goog.events.KeyCodes.DELETE,       // 46\\n  'Home': goog.events.KeyCodes.HOME,           // 36\\n  'End': goog.events.KeyCodes.END,             // 35\\n  'PageUp': goog.events.KeyCodes.PAGE_UP,      // 33\\n  'PageDown': goog.events.KeyCodes.PAGE_DOWN,  // 34\\n  'Insert': goog.events.KeyCodes.INSERT        // 45\\n};\\n\\n\\n/**\\n * If true, the KeyEvent fires on keydown. Otherwise, it fires on keypress.\\n *\\n * @type {boolean}\\n * @private\\n */\\ngoog.events.KeyHandler.USES_KEYDOWN_ =\\n    !goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher('525');\\n\\n\\n/**\\n * If true, the alt key flag is saved during the key down and reused when\\n * handling the key press. FF on Mac does not set the alt flag in the key press\\n * event.\\n * @type {boolean}\\n * @private\\n */\\ngoog.events.KeyHandler.SAVE_ALT_FOR_KEYPRESS_ =\\n    goog.userAgent.MAC && goog.userAgent.GECKO;\\n\\n\\n/**\\n * Records the keycode for browsers that only returns the keycode for key up/\\n * down events. For browser/key combinations that doesn't trigger a key pressed\\n * event it also fires the patched key event.\\n * @param {goog.events.BrowserEvent} e The key down event.\\n * @private\\n */\\ngoog.events.KeyHandler.prototype.handleKeyDown_ = function(e) {\\n  'use strict';\\n  // Ctrl-Tab and Alt-Tab can cause the focus to be moved to another window\\n  // before we've caught a key-up event.  If the last-key was one of these we\\n  // reset the state.\\n  if (goog.userAgent.WEBKIT || goog.userAgent.EDGE) {\\n    if (this.lastKey_ == goog.events.KeyCodes.CTRL && !e.ctrlKey ||\\n        this.lastKey_ == goog.events.KeyCodes.ALT && !e.altKey ||\\n        goog.userAgent.MAC && this.lastKey_ == goog.events.KeyCodes.META &&\\n            !e.metaKey) {\\n      this.resetState();\\n    }\\n  }\\n\\n  if (this.lastKey_ == -1) {\\n    if (e.ctrlKey && e.keyCode != goog.events.KeyCodes.CTRL) {\\n      this.lastKey_ = goog.events.KeyCodes.CTRL;\\n    } else if (e.altKey && e.keyCode != goog.events.KeyCodes.ALT) {\\n      this.lastKey_ = goog.events.KeyCodes.ALT;\\n    } else if (e.metaKey && e.keyCode != goog.events.KeyCodes.META) {\\n      this.lastKey_ = goog.events.KeyCodes.META;\\n    }\\n  }\\n\\n  if (goog.events.KeyHandler.USES_KEYDOWN_ &&\\n      !goog.events.KeyCodes.firesKeyPressEvent(\\n          e.keyCode, this.lastKey_, e.shiftKey, e.ctrlKey, e.altKey,\\n          e.metaKey)) {\\n    this.handleEvent(e);\\n  } else {\\n    this.keyCode_ = goog.events.KeyCodes.normalizeKeyCode(e.keyCode);\\n    if (goog.events.KeyHandler.SAVE_ALT_FOR_KEYPRESS_) {\\n      this.altKey_ = e.altKey;\\n    }\\n  }\\n};\\n\\n\\n/**\\n * Resets the stored previous values. Needed to be called for webkit which will\\n * not generate a key up for meta key operations. This should only be called\\n * when having finished with repeat key possibilities.\\n */\\ngoog.events.KeyHandler.prototype.resetState = function() {\\n  'use strict';\\n  this.lastKey_ = -1;\\n  this.keyCode_ = -1;\\n};\\n\\n\\n/**\\n * Clears the stored previous key value, resetting the key repeat status. Uses\\n * -1 because the Safari 3 Windows beta reports 0 for certain keys (like Home\\n * and End.)\\n * @param {goog.events.BrowserEvent} e The keyup event.\\n * @private\\n */\\ngoog.events.KeyHandler.prototype.handleKeyup_ = function(e) {\\n  'use strict';\\n  this.resetState();\\n  this.altKey_ = e.altKey;\\n};\\n\\n\\n/**\\n * Handles the events on the element.\\n * @param {goog.events.BrowserEvent} e  The keyboard event sent from the\\n *     browser.\\n */\\ngoog.events.KeyHandler.prototype.handleEvent = function(e) {\\n  'use strict';\\n  var be = e.getBrowserEvent();\\n  var keyCode, charCode;\\n  var altKey = be.altKey;\\n\\n  // IE reports the character code in the keyCode field for keypress events.\\n  // There are two exceptions however, Enter and Escape.\\n  if (goog.userAgent.IE && e.type == goog.events.EventType.KEYPRESS) {\\n    keyCode = this.keyCode_;\\n    charCode = keyCode != goog.events.KeyCodes.ENTER &&\\n            keyCode != goog.events.KeyCodes.ESC ?\\n        be.keyCode :\\n        0;\\n\\n    // Safari reports the character code in the keyCode field for keypress\\n    // events but also has a charCode field.\\n  } else if (\\n      (goog.userAgent.WEBKIT || goog.userAgent.EDGE) &&\\n      e.type == goog.events.EventType.KEYPRESS) {\\n    keyCode = this.keyCode_;\\n    charCode = be.charCode >= 0 && be.charCode < 63232 &&\\n            goog.events.KeyCodes.isCharacterKey(keyCode) ?\\n        be.charCode :\\n        0;\\n\\n    // Opera reports the keycode or the character code in the keyCode field.\\n  } else if (goog.userAgent.OPERA && !goog.userAgent.WEBKIT) {\\n    keyCode = this.keyCode_;\\n    charCode = goog.events.KeyCodes.isCharacterKey(keyCode) ? be.keyCode : 0;\\n\\n    // Mozilla reports the character code in the charCode field.\\n  } else {\\n    if (e.type == goog.events.EventType.KEYPRESS) {\\n      if (goog.events.KeyHandler.SAVE_ALT_FOR_KEYPRESS_) {\\n        altKey = this.altKey_;\\n      }\\n\\n      // Newer versions of Firefox will set the keyCode of non-function keys to\\n      // be the same as charCode. We need to account for this and update the\\n      // key event values accordingly. See\\n      // https://github.com/google/closure-library/issues/932 for more details.\\n      if (be.keyCode == be.charCode) {\\n        // Adjust any function key (ie. non-printable, such as ESC or\\n        // backspace) to not have a charCode. We don't want these keys to\\n        // accidentally be interpreted as insertable characters.\\n        if (be.keyCode < 0x20) {\\n          keyCode = be.keyCode;\\n          charCode = 0;\\n        } else {\\n          // For character keys, we want to use the preserved key code rather\\n          // than the keyCode on the browser event, which now uses the charCode.\\n          // These differ (eg. pressing 'a' gives keydown with keyCode = 65,\\n          // keypress with keyCode = charCode = 97) and so we need to account\\n          // for this.\\n          keyCode = this.keyCode_;\\n          charCode = be.charCode;\\n        }\\n      } else {\\n        keyCode = be.keyCode || this.keyCode_;\\n        charCode = be.charCode || 0;\\n      }\\n    } else {\\n      keyCode = be.keyCode || this.keyCode_;\\n      charCode = be.charCode || 0;\\n    }\\n\\n    // On the Mac, shift-/ triggers a question mark char code and no key code\\n    // (WIN_KEY_FF_LINUX), so we synthesize the latter.\\n    if (goog.userAgent.MAC && charCode == goog.events.KeyCodes.QUESTION_MARK &&\\n        keyCode == goog.events.KeyCodes.WIN_KEY) {\\n      keyCode = goog.events.KeyCodes.SLASH;\\n    }\\n  }\\n\\n  keyCode = goog.events.KeyCodes.normalizeKeyCode(keyCode);\\n  var key = keyCode;\\n\\n  // Correct the key value for certain browser-specific quirks.\\n  if (keyCode) {\\n    if (keyCode >= 63232 && keyCode in goog.events.KeyHandler.safariKey_) {\\n      // NOTE(nicksantos): Safari 3 has fixed this problem,\\n      // this is only needed for Safari 2.\\n      key = goog.events.KeyHandler.safariKey_[keyCode];\\n    } else {\\n      // Safari returns 25 for Shift+Tab instead of 9.\\n      if (keyCode == 25 && e.shiftKey) {\\n        key = 9;\\n      }\\n    }\\n  } else if (\\n      be.keyIdentifier &&\\n      be.keyIdentifier in goog.events.KeyHandler.keyIdentifier_) {\\n    // This is needed for Safari Windows because it currently doesn't give a\\n    // keyCode/which for non printable keys.\\n    key = goog.events.KeyHandler.keyIdentifier_[be.keyIdentifier];\\n  }\\n\\n  // If this was a redundant keypress event, we ignore it to avoid double-firing\\n  // an event as the event would've been handled by KEYDOWN. Gecko is currently\\n  // in the process of removing keypress events for non-printable characters\\n  // (https://bugzilla.mozilla.org/show_bug.cgi?id=968056) so we simulate this\\n  // logic here for older Gecko versions which still fire the events.\\n  if (goog.userAgent.GECKO && goog.events.KeyHandler.USES_KEYDOWN_ &&\\n      e.type == goog.events.EventType.KEYPRESS &&\\n      !goog.events.KeyCodes.firesKeyPressEvent(\\n          key, this.lastKey_, e.shiftKey, e.ctrlKey, altKey, e.metaKey)) {\\n    return;\\n  }\\n\\n  // If we get the same keycode as a keydown/keypress without having seen a\\n  // keyup event, then this event was caused by key repeat.\\n  var repeat = key == this.lastKey_;\\n  this.lastKey_ = key;\\n\\n  var event = new goog.events.KeyEvent(key, charCode, repeat, be);\\n  event.altKey = altKey;\\n  this.dispatchEvent(event);\\n};\\n\\n\\n/**\\n * Returns the element listened on for the real keyboard events.\\n * @return {Element|Document|null} The element listened on for the real\\n *     keyboard events.\\n */\\ngoog.events.KeyHandler.prototype.getElement = function() {\\n  'use strict';\\n  return this.element_;\\n};\\n\\n\\n/**\\n * Adds the proper key event listeners to the element.\\n * @param {Element|Document} element The element to listen on.\\n * @param {boolean=} opt_capture Whether to listen for browser events in\\n *     capture phase (defaults to false).\\n */\\ngoog.events.KeyHandler.prototype.attach = function(element, opt_capture) {\\n  'use strict';\\n  if (this.keyUpKey_) {\\n    this.detach();\\n  }\\n\\n  this.element_ = element;\\n\\n  this.keyPressKey_ = goog.events.listen(\\n      this.element_, goog.events.EventType.KEYPRESS, this, opt_capture);\\n\\n  // Most browsers (Safari 2 being the notable exception) doesn't include the\\n  // keyCode in keypress events (IE has the char code in the keyCode field and\\n  // Mozilla only included the keyCode if there's no charCode). Thus we have to\\n  // listen for keydown to capture the keycode.\\n  this.keyDownKey_ = goog.events.listen(\\n      this.element_, goog.events.EventType.KEYDOWN, this.handleKeyDown_,\\n      opt_capture, this);\\n\\n\\n  this.keyUpKey_ = goog.events.listen(\\n      this.element_, goog.events.EventType.KEYUP, this.handleKeyup_,\\n      opt_capture, this);\\n};\\n\\n\\n/**\\n * Removes the listeners that may exist.\\n */\\ngoog.events.KeyHandler.prototype.detach = function() {\\n  'use strict';\\n  if (this.keyPressKey_) {\\n    goog.events.unlistenByKey(this.keyPressKey_);\\n    goog.events.unlistenByKey(this.keyDownKey_);\\n    goog.events.unlistenByKey(this.keyUpKey_);\\n    this.keyPressKey_ = null;\\n    this.keyDownKey_ = null;\\n    this.keyUpKey_ = null;\\n  }\\n  this.element_ = null;\\n  this.lastKey_ = -1;\\n  this.keyCode_ = -1;\\n};\\n\\n\\n/** @override */\\ngoog.events.KeyHandler.prototype.disposeInternal = function() {\\n  'use strict';\\n  goog.events.KeyHandler.superClass_.disposeInternal.call(this);\\n  this.detach();\\n};\\n\\n\\n\\n/**\\n * This class is used for the goog.events.KeyHandler.EventType.KEY event and\\n * it overrides the key code with the fixed key code.\\n * @param {number} keyCode The adjusted key code.\\n * @param {number} charCode The unicode character code.\\n * @param {boolean} repeat Whether this event was generated by keyboard repeat.\\n * @param {Event} browserEvent Browser event object.\\n * @constructor\\n * @extends {goog.events.BrowserEvent}\\n * @final\\n */\\ngoog.events.KeyEvent = function(keyCode, charCode, repeat, browserEvent) {\\n  'use strict';\\n  goog.events.BrowserEvent.call(this, browserEvent);\\n  this.type = goog.events.KeyHandler.EventType.KEY;\\n\\n  /**\\n   * Keycode of key press.\\n   * @type {number}\\n   */\\n  this.keyCode = keyCode;\\n\\n  /**\\n   * Unicode character code.\\n   * @type {number}\\n   */\\n  this.charCode = charCode;\\n\\n  /**\\n   * True if this event was generated by keyboard auto-repeat (i.e., the user is\\n   * holding the key down.)\\n   * @type {boolean}\\n   */\\n  this.repeat = repeat;\\n};\\ngoog.inherits(goog.events.KeyEvent, goog.events.BrowserEvent);\\n\"],\n\"names\":[\"goog\",\"provide\",\"require\",\"events\",\"KeyHandler\",\"goog.events.KeyHandler\",\"opt_element\",\"opt_capture\",\"EventTarget\",\"call\",\"attach\",\"inherits\",\"prototype\",\"element_\",\"keyPressKey_\",\"keyDownKey_\",\"keyUpKey_\",\"lastKey_\",\"keyCode_\",\"altKey_\",\"EventType\",\"KEY\",\"safariKey_\",\"KeyCodes\",\"ENTER\",\"NUMLOCK\",\"UP\",\"DOWN\",\"LEFT\",\"RIGHT\",\"F1\",\"F2\",\"F3\",\"F4\",\"F5\",\"F6\",\"F7\",\"F8\",\"F9\",\"F10\",\"F11\",\"F12\",\"PRINT_SCREEN\",\"DELETE\",\"HOME\",\"END\",\"PAGE_UP\",\"PAGE_DOWN\",\"INSERT\",\"keyIdentifier_\",\"USES_KEYDOWN_\",\"userAgent\",\"WEBKIT\",\"isVersionOrHigher\",\"SAVE_ALT_FOR_KEYPRESS_\",\"MAC\",\"GECKO\",\"handleKeyDown_\",\"goog.events.KeyHandler.prototype.handleKeyDown_\",\"e\",\"EDGE\",\"CTRL\",\"ctrlKey\",\"ALT\",\"altKey\",\"META\",\"metaKey\",\"resetState\",\"keyCode\",\"firesKeyPressEvent\",\"shiftKey\",\"handleEvent\",\"normalizeKeyCode\",\"goog.events.KeyHandler.prototype.resetState\",\"handleKeyup_\",\"goog.events.KeyHandler.prototype.handleKeyup_\",\"goog.events.KeyHandler.prototype.handleEvent\",\"be\",\"getBrowserEvent\",\"charCode\",\"IE\",\"type\",\"KEYPRESS\",\"ESC\",\"isCharacterKey\",\"OPERA\",\"QUESTION_MARK\",\"WIN_KEY\",\"SLASH\",\"key\",\"keyIdentifier\",\"repeat\",\"event\",\"KeyEvent\",\"dispatchEvent\",\"getElement\",\"goog.events.KeyHandler.prototype.getElement\",\"goog.events.KeyHandler.prototype.attach\",\"element\",\"detach\",\"listen\",\"KEYDOWN\",\"KEYUP\",\"goog.events.KeyHandler.prototype.detach\",\"unlistenByKey\",\"disposeInternal\",\"goog.events.KeyHandler.prototype.disposeInternal\",\"superClass_\",\"goog.events.KeyEvent\",\"browserEvent\",\"BrowserEvent\"]\n}\n"]