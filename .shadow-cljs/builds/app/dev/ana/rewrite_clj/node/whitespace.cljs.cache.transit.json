["^ ","~:output",["^ ","~:js","goog.provide('rewrite_clj.node.whitespace');\n/**\n * This function is applied to every newline string.\n */\nrewrite_clj.node.whitespace._STAR_newline_fn_STAR_ = cljs.core.identity;\n/**\n * This function is applied to every newline string and should produce\n * the eventual character count.\n */\nrewrite_clj.node.whitespace._STAR_count_fn_STAR_ = cljs.core.count;\n\n/**\n* @constructor\n * @implements {cljs.core.IRecord}\n * @implements {cljs.core.IKVReduce}\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.ICounted}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.ICloneable}\n * @implements {cljs.core.IPrintWithWriter}\n * @implements {cljs.core.IIterable}\n * @implements {rewrite_clj.node.protocols.Node}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.IAssociative}\n * @implements {cljs.core.IMap}\n * @implements {cljs.core.ILookup}\n*/\nrewrite_clj.node.whitespace.WhitespaceNode = (function (whitespace,__meta,__extmap,__hash){\nthis.whitespace = whitespace;\nthis.__meta = __meta;\nthis.__extmap = __extmap;\nthis.__hash = __hash;\nthis.cljs$lang$protocol_mask$partition0$ = 2230716170;\nthis.cljs$lang$protocol_mask$partition1$ = 139264;\n});\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.toString = (function (){\nvar self__ = this;\nvar this$ = this;\nreturn this$.rewrite_clj$node$protocols$Node$string$arity$1(null);\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this__4461__auto__,k__4462__auto__){\nvar self__ = this;\nvar this__4461__auto____$1 = this;\nreturn this__4461__auto____$1.cljs$core$ILookup$_lookup$arity$3(null,k__4462__auto__,null);\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this__4463__auto__,k43732,else__4464__auto__){\nvar self__ = this;\nvar this__4463__auto____$1 = this;\nvar G__43736 = k43732;\nvar G__43736__$1 = (((G__43736 instanceof cljs.core.Keyword))?G__43736.fqn:null);\nswitch (G__43736__$1) {\ncase \"whitespace\":\nreturn self__.whitespace;\n\nbreak;\ndefault:\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k43732,else__4464__auto__);\n\n}\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (this__4481__auto__,f__4482__auto__,init__4483__auto__){\nvar self__ = this;\nvar this__4481__auto____$1 = this;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ret__4484__auto__,p__43737){\nvar vec__43738 = p__43737;\nvar k__4485__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43738,(0),null);\nvar v__4486__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43738,(1),null);\nreturn (f__4482__auto__.cljs$core$IFn$_invoke$arity$3 ? f__4482__auto__.cljs$core$IFn$_invoke$arity$3(ret__4484__auto__,k__4485__auto__,v__4486__auto__) : f__4482__auto__.call(null,ret__4484__auto__,k__4485__auto__,v__4486__auto__));\n}),init__4483__auto__,this__4481__auto____$1);\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this__4476__auto__,writer__4477__auto__,opts__4478__auto__){\nvar self__ = this;\nvar this__4476__auto____$1 = this;\nvar pr_pair__4479__auto__ = (function (keyval__4480__auto__){\nreturn cljs.core.pr_sequential_writer(writer__4477__auto__,cljs.core.pr_writer,\"\",\" \",\"\",opts__4478__auto__,keyval__4480__auto__);\n});\nreturn cljs.core.pr_sequential_writer(writer__4477__auto__,pr_pair__4479__auto__,\"#rewrite-clj.node.whitespace.WhitespaceNode{\",\", \",\"}\",opts__4478__auto__,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483),self__.whitespace],null))], null),self__.__extmap));\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (G__43731){\nvar self__ = this;\nvar G__43731__$1 = this;\nreturn (new cljs.core.RecordIter((0),G__43731__$1,1,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483)], null),(cljs.core.truth_(self__.__extmap)?cljs.core._iterator(self__.__extmap):cljs.core.nil_iter())));\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this__4459__auto__){\nvar self__ = this;\nvar this__4459__auto____$1 = this;\nreturn self__.__meta;\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (this__4456__auto__){\nvar self__ = this;\nvar this__4456__auto____$1 = this;\nreturn (new rewrite_clj.node.whitespace.WhitespaceNode(self__.whitespace,self__.__meta,self__.__extmap,self__.__hash));\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$ICounted$_count$arity$1 = (function (this__4465__auto__){\nvar self__ = this;\nvar this__4465__auto____$1 = this;\nreturn (1 + cljs.core.count(self__.__extmap));\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IHash$_hash$arity$1 = (function (this__4457__auto__){\nvar self__ = this;\nvar this__4457__auto____$1 = this;\nvar h__4319__auto__ = self__.__hash;\nif((!((h__4319__auto__ == null)))){\nreturn h__4319__auto__;\n} else {\nvar h__4319__auto____$1 = (function (coll__4458__auto__){\nreturn (1595850179 ^ cljs.core.hash_unordered_coll(coll__4458__auto__));\n})(this__4457__auto____$1);\n(self__.__hash = h__4319__auto____$1);\n\nreturn h__4319__auto____$1;\n}\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this43733,other43734){\nvar self__ = this;\nvar this43733__$1 = this;\nreturn (((!((other43734 == null)))) && ((((this43733__$1.constructor === other43734.constructor)) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this43733__$1.whitespace,other43734.whitespace)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this43733__$1.__extmap,other43734.__extmap)))))));\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.rewrite_clj$node$protocols$Node$ = cljs.core.PROTOCOL_SENTINEL);\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.rewrite_clj$node$protocols$Node$tag$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483);\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.rewrite_clj$node$protocols$Node$printable_only_QMARK_$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn true;\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.rewrite_clj$node$protocols$Node$sexpr$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nthrow (new Error(\"Unsupported operation\"));\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.rewrite_clj$node$protocols$Node$length$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn cljs.core.count(self__.whitespace);\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.rewrite_clj$node$protocols$Node$string$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn self__.whitespace;\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this__4471__auto__,k__4472__auto__){\nvar self__ = this;\nvar this__4471__auto____$1 = this;\nif(cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483),null], null), null),k__4472__auto__)){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core._with_meta(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,this__4471__auto____$1),self__.__meta),k__4472__auto__);\n} else {\nreturn (new rewrite_clj.node.whitespace.WhitespaceNode(self__.whitespace,self__.__meta,cljs.core.not_empty(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.__extmap,k__4472__auto__)),null));\n}\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = (function (this__4468__auto__,k43732){\nvar self__ = this;\nvar this__4468__auto____$1 = this;\nvar G__43744 = k43732;\nvar G__43744__$1 = (((G__43744 instanceof cljs.core.Keyword))?G__43744.fqn:null);\nswitch (G__43744__$1) {\ncase \"whitespace\":\nreturn true;\n\nbreak;\ndefault:\nreturn cljs.core.contains_QMARK_(self__.__extmap,k43732);\n\n}\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this__4469__auto__,k__4470__auto__,G__43731){\nvar self__ = this;\nvar this__4469__auto____$1 = this;\nvar pred__43755 = cljs.core.keyword_identical_QMARK_;\nvar expr__43756 = k__4470__auto__;\nif(cljs.core.truth_((pred__43755.cljs$core$IFn$_invoke$arity$2 ? pred__43755.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483),expr__43756) : pred__43755.call(null,new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483),expr__43756)))){\nreturn (new rewrite_clj.node.whitespace.WhitespaceNode(G__43731,self__.__meta,self__.__extmap,null));\n} else {\nreturn (new rewrite_clj.node.whitespace.WhitespaceNode(self__.whitespace,self__.__meta,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k__4470__auto__,G__43731),null));\n}\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this__4474__auto__){\nvar self__ = this;\nvar this__4474__auto____$1 = this;\nreturn cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483),self__.whitespace,null))], null),self__.__extmap));\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this__4460__auto__,G__43731){\nvar self__ = this;\nvar this__4460__auto____$1 = this;\nreturn (new rewrite_clj.node.whitespace.WhitespaceNode(self__.whitespace,G__43731,self__.__extmap,self__.__hash));\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this__4466__auto__,entry__4467__auto__){\nvar self__ = this;\nvar this__4466__auto____$1 = this;\nif(cljs.core.vector_QMARK_(entry__4467__auto__)){\nreturn this__4466__auto____$1.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth(entry__4467__auto__,(0)),cljs.core._nth(entry__4467__auto__,(1)));\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj,this__4466__auto____$1,entry__4467__auto__);\n}\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"whitespace\",\"whitespace\",300496044,null)], null);\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.cljs$lang$type = true);\n\n(rewrite_clj.node.whitespace.WhitespaceNode.cljs$lang$ctorPrSeq = (function (this__4505__auto__){\nreturn (new cljs.core.List(null,\"rewrite-clj.node.whitespace/WhitespaceNode\",null,(1),null));\n}));\n\n(rewrite_clj.node.whitespace.WhitespaceNode.cljs$lang$ctorPrWriter = (function (this__4505__auto__,writer__4506__auto__){\nreturn cljs.core._write(writer__4506__auto__,\"rewrite-clj.node.whitespace/WhitespaceNode\");\n}));\n\n/**\n * Positional factory function for rewrite-clj.node.whitespace/WhitespaceNode.\n */\nrewrite_clj.node.whitespace.__GT_WhitespaceNode = (function rewrite_clj$node$whitespace$__GT_WhitespaceNode(whitespace){\nreturn (new rewrite_clj.node.whitespace.WhitespaceNode(whitespace,null,null,null));\n});\n\n/**\n * Factory function for rewrite-clj.node.whitespace/WhitespaceNode, taking a map of keywords to field values.\n */\nrewrite_clj.node.whitespace.map__GT_WhitespaceNode = (function rewrite_clj$node$whitespace$map__GT_WhitespaceNode(G__43735){\nvar extmap__4501__auto__ = (function (){var G__43760 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(G__43735,new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483));\nif(cljs.core.record_QMARK_(G__43735)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,G__43760);\n} else {\nreturn G__43760;\n}\n})();\nreturn (new rewrite_clj.node.whitespace.WhitespaceNode(new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483).cljs$core$IFn$_invoke$arity$1(G__43735),null,cljs.core.not_empty(extmap__4501__auto__),null));\n});\n\n\n/**\n* @constructor\n * @implements {cljs.core.IRecord}\n * @implements {cljs.core.IKVReduce}\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.ICounted}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.ICloneable}\n * @implements {cljs.core.IPrintWithWriter}\n * @implements {cljs.core.IIterable}\n * @implements {rewrite_clj.node.protocols.Node}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.IAssociative}\n * @implements {cljs.core.IMap}\n * @implements {cljs.core.ILookup}\n*/\nrewrite_clj.node.whitespace.NewlineNode = (function (newlines,__meta,__extmap,__hash){\nthis.newlines = newlines;\nthis.__meta = __meta;\nthis.__extmap = __extmap;\nthis.__hash = __hash;\nthis.cljs$lang$protocol_mask$partition0$ = 2230716170;\nthis.cljs$lang$protocol_mask$partition1$ = 139264;\n});\n(rewrite_clj.node.whitespace.NewlineNode.prototype.toString = (function (){\nvar self__ = this;\nvar this$ = this;\nreturn this$.rewrite_clj$node$protocols$Node$string$arity$1(null);\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this__4461__auto__,k__4462__auto__){\nvar self__ = this;\nvar this__4461__auto____$1 = this;\nreturn this__4461__auto____$1.cljs$core$ILookup$_lookup$arity$3(null,k__4462__auto__,null);\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this__4463__auto__,k43762,else__4464__auto__){\nvar self__ = this;\nvar this__4463__auto____$1 = this;\nvar G__43766 = k43762;\nvar G__43766__$1 = (((G__43766 instanceof cljs.core.Keyword))?G__43766.fqn:null);\nswitch (G__43766__$1) {\ncase \"newlines\":\nreturn self__.newlines;\n\nbreak;\ndefault:\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k43762,else__4464__auto__);\n\n}\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (this__4481__auto__,f__4482__auto__,init__4483__auto__){\nvar self__ = this;\nvar this__4481__auto____$1 = this;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ret__4484__auto__,p__43767){\nvar vec__43768 = p__43767;\nvar k__4485__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43768,(0),null);\nvar v__4486__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__43768,(1),null);\nreturn (f__4482__auto__.cljs$core$IFn$_invoke$arity$3 ? f__4482__auto__.cljs$core$IFn$_invoke$arity$3(ret__4484__auto__,k__4485__auto__,v__4486__auto__) : f__4482__auto__.call(null,ret__4484__auto__,k__4485__auto__,v__4486__auto__));\n}),init__4483__auto__,this__4481__auto____$1);\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this__4476__auto__,writer__4477__auto__,opts__4478__auto__){\nvar self__ = this;\nvar this__4476__auto____$1 = this;\nvar pr_pair__4479__auto__ = (function (keyval__4480__auto__){\nreturn cljs.core.pr_sequential_writer(writer__4477__auto__,cljs.core.pr_writer,\"\",\" \",\"\",opts__4478__auto__,keyval__4480__auto__);\n});\nreturn cljs.core.pr_sequential_writer(writer__4477__auto__,pr_pair__4479__auto__,\"#rewrite-clj.node.whitespace.NewlineNode{\",\", \",\"}\",opts__4478__auto__,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"newlines\",\"newlines\",-1185451518),self__.newlines],null))], null),self__.__extmap));\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (G__43761){\nvar self__ = this;\nvar G__43761__$1 = this;\nreturn (new cljs.core.RecordIter((0),G__43761__$1,1,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"newlines\",\"newlines\",-1185451518)], null),(cljs.core.truth_(self__.__extmap)?cljs.core._iterator(self__.__extmap):cljs.core.nil_iter())));\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this__4459__auto__){\nvar self__ = this;\nvar this__4459__auto____$1 = this;\nreturn self__.__meta;\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (this__4456__auto__){\nvar self__ = this;\nvar this__4456__auto____$1 = this;\nreturn (new rewrite_clj.node.whitespace.NewlineNode(self__.newlines,self__.__meta,self__.__extmap,self__.__hash));\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$ICounted$_count$arity$1 = (function (this__4465__auto__){\nvar self__ = this;\nvar this__4465__auto____$1 = this;\nreturn (1 + cljs.core.count(self__.__extmap));\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IHash$_hash$arity$1 = (function (this__4457__auto__){\nvar self__ = this;\nvar this__4457__auto____$1 = this;\nvar h__4319__auto__ = self__.__hash;\nif((!((h__4319__auto__ == null)))){\nreturn h__4319__auto__;\n} else {\nvar h__4319__auto____$1 = (function (coll__4458__auto__){\nreturn (979711303 ^ cljs.core.hash_unordered_coll(coll__4458__auto__));\n})(this__4457__auto____$1);\n(self__.__hash = h__4319__auto____$1);\n\nreturn h__4319__auto____$1;\n}\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this43763,other43764){\nvar self__ = this;\nvar this43763__$1 = this;\nreturn (((!((other43764 == null)))) && ((((this43763__$1.constructor === other43764.constructor)) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this43763__$1.newlines,other43764.newlines)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this43763__$1.__extmap,other43764.__extmap)))))));\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.rewrite_clj$node$protocols$Node$ = cljs.core.PROTOCOL_SENTINEL);\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.rewrite_clj$node$protocols$Node$tag$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323);\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.rewrite_clj$node$protocols$Node$printable_only_QMARK_$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn true;\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.rewrite_clj$node$protocols$Node$sexpr$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nthrow (new Error(\"Unsupported operation\"));\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.rewrite_clj$node$protocols$Node$length$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn rewrite_clj.node.whitespace._STAR_count_fn_STAR_.call(null,self__.newlines);\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.rewrite_clj$node$protocols$Node$string$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn rewrite_clj.node.whitespace._STAR_newline_fn_STAR_.call(null,self__.newlines);\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this__4471__auto__,k__4472__auto__){\nvar self__ = this;\nvar this__4471__auto____$1 = this;\nif(cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"newlines\",\"newlines\",-1185451518),null], null), null),k__4472__auto__)){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core._with_meta(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,this__4471__auto____$1),self__.__meta),k__4472__auto__);\n} else {\nreturn (new rewrite_clj.node.whitespace.NewlineNode(self__.newlines,self__.__meta,cljs.core.not_empty(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.__extmap,k__4472__auto__)),null));\n}\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = (function (this__4468__auto__,k43762){\nvar self__ = this;\nvar this__4468__auto____$1 = this;\nvar G__43784 = k43762;\nvar G__43784__$1 = (((G__43784 instanceof cljs.core.Keyword))?G__43784.fqn:null);\nswitch (G__43784__$1) {\ncase \"newlines\":\nreturn true;\n\nbreak;\ndefault:\nreturn cljs.core.contains_QMARK_(self__.__extmap,k43762);\n\n}\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this__4469__auto__,k__4470__auto__,G__43761){\nvar self__ = this;\nvar this__4469__auto____$1 = this;\nvar pred__43785 = cljs.core.keyword_identical_QMARK_;\nvar expr__43786 = k__4470__auto__;\nif(cljs.core.truth_((pred__43785.cljs$core$IFn$_invoke$arity$2 ? pred__43785.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"newlines\",\"newlines\",-1185451518),expr__43786) : pred__43785.call(null,new cljs.core.Keyword(null,\"newlines\",\"newlines\",-1185451518),expr__43786)))){\nreturn (new rewrite_clj.node.whitespace.NewlineNode(G__43761,self__.__meta,self__.__extmap,null));\n} else {\nreturn (new rewrite_clj.node.whitespace.NewlineNode(self__.newlines,self__.__meta,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k__4470__auto__,G__43761),null));\n}\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this__4474__auto__){\nvar self__ = this;\nvar this__4474__auto____$1 = this;\nreturn cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"newlines\",\"newlines\",-1185451518),self__.newlines,null))], null),self__.__extmap));\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this__4460__auto__,G__43761){\nvar self__ = this;\nvar this__4460__auto____$1 = this;\nreturn (new rewrite_clj.node.whitespace.NewlineNode(self__.newlines,G__43761,self__.__extmap,self__.__hash));\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this__4466__auto__,entry__4467__auto__){\nvar self__ = this;\nvar this__4466__auto____$1 = this;\nif(cljs.core.vector_QMARK_(entry__4467__auto__)){\nreturn this__4466__auto____$1.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth(entry__4467__auto__,(0)),cljs.core._nth(entry__4467__auto__,(1)));\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj,this__4466__auto____$1,entry__4467__auto__);\n}\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"newlines\",\"newlines\",455080009,null)], null);\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.cljs$lang$type = true);\n\n(rewrite_clj.node.whitespace.NewlineNode.cljs$lang$ctorPrSeq = (function (this__4505__auto__){\nreturn (new cljs.core.List(null,\"rewrite-clj.node.whitespace/NewlineNode\",null,(1),null));\n}));\n\n(rewrite_clj.node.whitespace.NewlineNode.cljs$lang$ctorPrWriter = (function (this__4505__auto__,writer__4506__auto__){\nreturn cljs.core._write(writer__4506__auto__,\"rewrite-clj.node.whitespace/NewlineNode\");\n}));\n\n/**\n * Positional factory function for rewrite-clj.node.whitespace/NewlineNode.\n */\nrewrite_clj.node.whitespace.__GT_NewlineNode = (function rewrite_clj$node$whitespace$__GT_NewlineNode(newlines){\nreturn (new rewrite_clj.node.whitespace.NewlineNode(newlines,null,null,null));\n});\n\n/**\n * Factory function for rewrite-clj.node.whitespace/NewlineNode, taking a map of keywords to field values.\n */\nrewrite_clj.node.whitespace.map__GT_NewlineNode = (function rewrite_clj$node$whitespace$map__GT_NewlineNode(G__43765){\nvar extmap__4501__auto__ = (function (){var G__43790 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(G__43765,new cljs.core.Keyword(null,\"newlines\",\"newlines\",-1185451518));\nif(cljs.core.record_QMARK_(G__43765)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,G__43790);\n} else {\nreturn G__43790;\n}\n})();\nreturn (new rewrite_clj.node.whitespace.NewlineNode(new cljs.core.Keyword(null,\"newlines\",\"newlines\",-1185451518).cljs$core$IFn$_invoke$arity$1(G__43765),null,cljs.core.not_empty(extmap__4501__auto__),null));\n});\n\n/**\n * Create whitespace node.\n */\nrewrite_clj.node.whitespace.whitespace_node = (function rewrite_clj$node$whitespace$whitespace_node(s){\nreturn rewrite_clj.node.whitespace.__GT_WhitespaceNode(s);\n});\n/**\n * Create newline node.\n */\nrewrite_clj.node.whitespace.newline_node = (function rewrite_clj$node$whitespace$newline_node(s){\nreturn rewrite_clj.node.whitespace.__GT_NewlineNode(s);\n});\n/**\n * Check whether a character represents a linebreak.\n */\nrewrite_clj.node.whitespace.newline_QMARK_ = (function rewrite_clj$node$whitespace$newline_QMARK_(c){\nreturn cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [\"\\n\",null,\"\\r\",null], null), null),c);\n});\n/**\n * Convert a string of whitespace to whitespace/newline nodes.\n */\nrewrite_clj.node.whitespace.whitespace_nodes = (function rewrite_clj$node$whitespace$whitespace_nodes(s){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (char_seq){\nvar s__$1 = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,char_seq);\nif(rewrite_clj.node.whitespace.newline_QMARK_(cljs.core.first(char_seq))){\nreturn rewrite_clj.node.whitespace.newline_node(s__$1);\n} else {\nreturn rewrite_clj.node.whitespace.whitespace_node(s__$1);\n}\n}),cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.whitespace.newline_QMARK_,s));\n});\n/**\n * Create node representing the given number of spaces.\n */\nrewrite_clj.node.whitespace.spaces = (function rewrite_clj$node$whitespace$spaces(n){\nreturn rewrite_clj.node.whitespace.whitespace_node(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(n,\" \")));\n});\n/**\n * Create node representing the given number of newline characters.\n */\nrewrite_clj.node.whitespace.newlines = (function rewrite_clj$node$whitespace$newlines(n){\nreturn rewrite_clj.node.whitespace.newline_node(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(n,\"\\n\")));\n});\nvar comma_43866 = rewrite_clj.node.whitespace.whitespace_node(\", \");\n/**\n * Interleave the given seq of nodes with `\", \"` nodes.\n */\nrewrite_clj.node.whitespace.comma_separated = (function rewrite_clj$node$whitespace$comma_separated(nodes){\nreturn cljs.core.butlast(cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(nodes,cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(comma_43866)));\n});\nvar nl_43867 = rewrite_clj.node.whitespace.newline_node(\"\\n\");\n/**\n * Interleave the given seq of nodes with newline nodes.\n */\nrewrite_clj.node.whitespace.line_separated = (function rewrite_clj$node$whitespace$line_separated(nodes){\nreturn cljs.core.butlast(cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(nodes,cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(nl_43867)));\n});\nvar space_43870 = rewrite_clj.node.whitespace.whitespace_node(\" \");\n/**\n * Interleave the given seq of nodes with `\" \"` nodes.\n */\nrewrite_clj.node.whitespace.space_separated = (function rewrite_clj$node$whitespace$space_separated(nodes){\nreturn cljs.core.butlast(cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(nodes,cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(space_43870)));\n});\n/**\n * Check whether a node represents whitespace.\n */\nrewrite_clj.node.whitespace.whitespace_QMARK_ = (function rewrite_clj$node$whitespace$whitespace_QMARK_(node){\nreturn cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"whitespace\",\"whitespace\",-1340035483),null,new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323),null], null), null),rewrite_clj.node.protocols.tag(node));\n});\n/**\n * Check whether a ndoe represents linebreaks.\n */\nrewrite_clj.node.whitespace.linebreak_QMARK_ = (function rewrite_clj$node$whitespace$linebreak_QMARK_(node){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(rewrite_clj.node.protocols.tag(node),new cljs.core.Keyword(null,\"newline\",\"newline\",1790071323));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","rewrite_clj/node/whitespace.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",32],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index","~$highlight.js","~$module$node_modules$highlight_DOT_js$lib$index","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.repl","~$cljs.repl"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$rewrite-clj.node.whitespace","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$rewrite-clj.node.protocols","^S","~$node","^S","~$cljs.core","^U","~$goog","^V"],"~:seen",["^L",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^U","^U"],"~:form",["~#list",["~$ns","^N",["^10",["^X",["^S","~:as","^T"]]]]],"~:flags",["^ ","^X",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^V","^U","^S"]],"^P","^N","~:resource-id",["~:shadow.build.classpath/resource","rewrite_clj/node/whitespace.cljs"],"~:compiled-at",1638904284774,"~:resource-name","rewrite_clj/node/whitespace.cljs","~:warnings",[],"~:source","(ns rewrite-clj.node.whitespace\n  (:require [rewrite-clj.node.protocols :as node]))\n\n;; ## Newline Modifiers\n\n(def ^:dynamic *newline-fn*\n  \"This function is applied to every newline string.\"\n  identity)\n\n(def ^:dynamic *count-fn*\n  \"This function is applied to every newline string and should produce\n   the eventual character count.\"\n  count)\n\n\n;; TODO\n;; (defmacro with-newline-fn\n;;   [f & body]\n;;   `(binding [*newline-fn* (comp *newline-fn* ~f)]\n;;      ~@body))\n\n;; (defmacro with-count-fn\n;;   [f & body]\n;;   `(binding [*count-fn* (comp *count-fn* ~f)]\n;;      ~@body))\n\n;; ## Nodes\n\n(defrecord WhitespaceNode [whitespace]\n  node/Node\n  (tag [_] :whitespace)\n  (printable-only? [_] true)\n  (sexpr [_] (throw (js/Error. \"Unsupported operation\")))\n  (length [_] (count whitespace))\n  (string [_] whitespace)\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n(defrecord NewlineNode [newlines]\n  node/Node\n  (tag [_] :newline)\n  (printable-only? [_] true)\n  (sexpr [_] (throw (js/Error. \"Unsupported operation\")))\n  (length [_] (*count-fn* newlines))\n  (string [_] (*newline-fn* newlines))\n\n  Object\n  (toString [this]\n    (node/string this)))\n\n\n;; TODO\n;; (node/make-printable! WhitespaceNode)\n;; (node/make-printable! NewlineNode)\n\n;; ## Constructors\n\n(defn whitespace-node\n  \"Create whitespace node.\"\n  [s]\n  (->WhitespaceNode s))\n\n(defn newline-node\n  \"Create newline node.\"\n  [s]\n  (->NewlineNode s))\n\n(defn- newline?\n  \"Check whether a character represents a linebreak.\"\n  [c]\n  (contains? #{\\return \\newline} c))\n\n(defn whitespace-nodes\n  \"Convert a string of whitespace to whitespace/newline nodes.\"\n  [s]\n  (->> (partition-by newline? s)\n       (map\n         (fn [char-seq]\n           (let [s (apply str char-seq)]\n             (if (newline? (first char-seq))\n               (newline-node s)\n               (whitespace-node s)))))))\n\n;; ## Utilities\n\n(defn spaces\n  \"Create node representing the given number of spaces.\"\n  [n]\n  (whitespace-node (apply str (repeat n \\space))))\n\n(defn newlines\n  \"Create node representing the given number of newline characters.\"\n  [n]\n  (newline-node (apply str (repeat n \\newline))))\n\n\n\n(let [comma (whitespace-node \", \")]\n  (defn comma-separated\n    \"Interleave the given seq of nodes with `\\\", \\\"` nodes.\"\n    [nodes]\n    (butlast (interleave nodes (repeat comma)))))\n\n(let [nl (newline-node \"\\n\")]\n  (defn line-separated\n    \"Interleave the given seq of nodes with newline nodes.\"\n    [nodes]\n    (butlast (interleave nodes (repeat nl)))))\n\n(let [space (whitespace-node \" \")]\n  (defn space-separated\n    \"Interleave the given seq of nodes with `\\\" \\\"` nodes.\"\n    [nodes]\n    (butlast (interleave nodes (repeat space)))))\n\n;; ## Predicates\n\n(defn whitespace?\n  \"Check whether a node represents whitespace.\"\n  [node]\n  (contains?\n    #{:whitespace\n      :newline}\n    (node/tag node)))\n\n(defn linebreak?\n  \"Check whether a ndoe represents linebreaks.\"\n  [node]\n  (= (node/tag node) :newline))\n","~:reader-features",["^L",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["rewrite-clj.node.whitespace/*newline-fn*","cljs.core/identity","rewrite-clj.node.whitespace/*count-fn*","cljs.core/count","this__4461__auto__","k__4462__auto__","this__4463__auto__","k43732","else__4464__auto__","G__43736","cljs.core/Keyword","whitespace","cljs.core.get","__extmap","this__4481__auto__","f__4482__auto__","init__4483__auto__","cljs.core.reduce","ret__4484__auto__","p__43737","vec__43738","k__4485__auto__","cljs.core.nth","v__4486__auto__","this__4476__auto__","writer__4477__auto__","opts__4478__auto__","pr-pair__4479__auto__","keyval__4480__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__43731","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4459__auto__","__meta","this__4456__auto__","__hash","this__4465__auto__","this__4457__auto__","h__4319__auto__","coll__4458__auto__","cljs.core/hash-unordered-coll","this43733","other43734","cljs.core._EQ_","cljs.core/PROTOCOL_SENTINEL","this__4471__auto__","k__4472__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4468__auto__","G__43744","this__4469__auto__","k__4470__auto__","pred__43755","cljs.core/keyword-identical?","expr__43756","cljs.core.assoc","this__4474__auto__","cljs.core/seq","cljs.core/MapEntry","this__4460__auto__","this__4466__auto__","entry__4467__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","rewrite-clj.node.whitespace/WhitespaceNode","this__4505__auto__","cljs.core/List","writer__4506__auto__","cljs.core/-write","G__43735","extmap__4501__auto__","G__43760","cljs.core/record?","rewrite-clj.node.whitespace/->WhitespaceNode","rewrite-clj.node.whitespace/map->WhitespaceNode","_","js/Error","this","k43762","G__43766","newlines","p__43767","vec__43768","G__43761","this43763","other43764","G__43784","pred__43785","expr__43786","rewrite-clj.node.whitespace/NewlineNode","G__43765","G__43790","rewrite-clj.node.whitespace/->NewlineNode","rewrite-clj.node.whitespace/map->NewlineNode","rewrite-clj.node.whitespace/whitespace-node","s","rewrite-clj.node.whitespace/newline-node","rewrite-clj.node.whitespace/newline?","c","rewrite-clj.node.whitespace/whitespace-nodes","cljs.core.partition_by","cljs.core.map","char-seq","cljs.core.apply","cljs.core/str","cljs.core/first","rewrite-clj.node.whitespace/spaces","n","cljs.core.repeat","rewrite-clj.node.whitespace/newlines","comma","rewrite-clj.node.whitespace/comma-separated","nodes","cljs.core/butlast","cljs.core.interleave","nl","rewrite-clj.node.whitespace/line-separated","space","rewrite-clj.node.whitespace/space-separated","rewrite-clj.node.whitespace/whitespace?","node","rewrite-clj.node.protocols/tag","rewrite-clj.node.whitespace/linebreak?"]],"~:used-vars",["^L",["~$cljs.core/PROTOCOL_SENTINEL","~$rewrite-clj.node.whitespace/*count-fn*","~$rewrite-clj.node.whitespace/spaces","~$cljs.core/str","~$cljs.core/pr-sequential-writer","~$cljs.core/vector?","~$cljs.core/=","~$cljs.core/-assoc","~$rewrite-clj.node.protocols/tag","~$cljs.core/-write","~$cljs.core/-iterator","~$rewrite-clj.node.whitespace/->NewlineNode","~$cljs.core/count","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/apply","~$cljs.core/identity","~$cljs.core/Keyword","~$rewrite-clj.node.whitespace/newline?","~$cljs.core/MapEntry","~$cljs.core/dissoc","~$cljs.core/keyword-identical?","~$rewrite-clj.node.whitespace/NewlineNode","~$cljs.core/-with-meta","~$cljs.core/concat","~$rewrite-clj.node.whitespace/*newline-fn*","~$rewrite-clj.node.whitespace/WhitespaceNode","~$rewrite-clj.node.whitespace/whitespace?","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/-conj","~$rewrite-clj.node.whitespace/space-separated","~$cljs.core/map","~$rewrite-clj.node.whitespace/comma-separated","~$cljs.core/PersistentVector","~$cljs.core/List","~$cljs.core/get","~$rewrite-clj.node.whitespace/newlines","~$cljs.core/partition-by","~$cljs.core/-nth","~$rewrite-clj.node.whitespace/map->WhitespaceNode","~$cljs.core/not-empty","~$cljs.core/record?","~$cljs.core/-lookup","~$cljs.core/nth","~$rewrite-clj.node.whitespace/whitespace-nodes","~$cljs.core/nil-iter","~$cljs.core/interleave","~$cljs.core/RecordIter","~$rewrite-clj.node.protocols/string","~$cljs.core/not","~$rewrite-clj.node.whitespace/newline-node","~$cljs.core/assoc","~$rewrite-clj.node.whitespace/map->NewlineNode","~$rewrite-clj.node.whitespace/line-separated","~$rewrite-clj.node.whitespace/linebreak?","~$cljs.core/repeat","~$cljs.core/hash-unordered-coll","~$cljs.core/first","~$cljs.core/butlast","~$rewrite-clj.node.whitespace/->WhitespaceNode","~$js/Error","~$rewrite-clj.node.whitespace/whitespace-node"]]],"~:cache-keys",["~#cmap",[["^17","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["^V","~$goog.dom.HtmlElement"]]],["^17","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V","~$goog.array","~$goog.asserts"]]],["^17","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V"]]],["^17","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V","^31","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^17","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V","^32","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^35"]]],["^17","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V","^32"]]],["^17","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V"]]],["^17","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V"]]],["^17","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V"]]],["^17","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V"]]],["^17","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V","^32"]]],"~:SHADOW-TIMESTAMP",[1628015068000,1628015068000,1628015038000],["^17","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V","^32","~$goog.reflect"]]],["^17","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V","^32","~$goog.fs.blob","^36","~$goog.html.SafeScript","~$goog.html.trustedtypes","^38","^39","^3:","^3;"]]],["^17","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V"]]],["^17","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V"]]],["^17","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V","^31","^32","~$goog.html.SafeUrl","^3:","^3;","^35"]]],["^17","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V","^32","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^3?","~$goog.html.SafeStyle","^3A","^37","~$goog.html.uncheckedconversions","^3:","^35"]]],["^17","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^17","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V","^31","^32","~$goog.dom.TagName","~$goog.dom.tags","^3?","^3E","~$goog.html.SafeStyleSheet","^3A","^37","^3@","^38","^39","~$goog.labs.userAgent.browser","^34","^3:","^3;","^35"]]],["^17","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V","^34"]]],["^17","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V","^31"]]],["^17","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^17","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V","^31","^32","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^17","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V"]]],["^17","rewrite_clj/node/protocols.cljs"],["c35be115c39dadc71a4de3f584aa8ca295e11257","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V","^U","~$clojure.string"]]],["^17","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V"]]],["^17","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",[]]],["^17","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V","^31","^34"]]],["^17","rewrite_clj/node/whitespace.cljs"],["c35be115c39dadc71a4de3f584aa8ca295e11257","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V","^U","^S"]]],["^17","clojure/string.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V","^U","^3O","~$goog.string.StringBuffer"]]],["^17","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V","~$goog.dom.safe","^3F","^3:","^35"]]],["^17","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V"]]],["^17","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V","^35"]]],["^17","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V"]]],["^17","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V","^31","^32","^3C","~$goog.math"]]],["^17","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V","^32","^3D","^3?","^3E","^3K","^3A","^37","^3:","^35","^38"]]],["^17","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V"]]],["^17","cljs/core.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V","~$goog.math.Long","~$goog.math.Integer","^3O","^34","^31","~$goog.Uri","^3V"]]],["^17","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V","^3:","^3;","^3@","^32"]]],["^17","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V","^3:","^3E","^3;","^31","^34","^32","^35"]]],["^17","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V","^3="]]],["^17","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V","^32","^3O"]]],["^17","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2X",["^ ","^2Y",null,"^2Z",["^L",[]],"^2[",["^V","^32","^3;"]]]]],"~:clj-info",["^ ","jar:file:/Users/hagenek/.m2/repository/binaryage/devtools/1.0.3/devtools-1.0.3.jar!/devtools/defaults.clj",1638904136000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1628015039000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1628015039000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes.cljc",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1628015036000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/instant.clj",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1628015039000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/externs.clj",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64.clj",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1628015039000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1628015036000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map.clj",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1628015039000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/util.cljc",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/js_deps.cljc",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64_vlq.clj",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1628015036000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/core.cljc",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1628015036000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/tagged_literals.cljc",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1628015036000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/impl.cljc",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1628015036000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/env.cljc",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer.cljc",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1628015039000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/compiler.cljc",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1628015039000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes/and_or.cljc",1628015038000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",1,"^8",5,"^9",1,"^:",32],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I"],"^J",null,"^K",["^L",[]],"^M","^N","^Q",null,"^R",["^ ","^S","^S","^T","^S","^U","^U","^V","^V"],"^W",["^L",["^X"]],"~:shadow/js-access-global",["^L",["Error"]],"^Y",null,"~:defs",["^ ","~$->NewlineNode",["^ ","~:protocol-inline",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^:",23,"^8",12,"~:internal-ctor",true,"~:factory","~:positional","^7",41,"^9",41,"~:arglists",["^10",["~$quote",["^10",[["~$newlines"]]]]],"~:doc","Positional factory function for rewrite-clj.node.whitespace/NewlineNode."],"^M","^1N","^6","rewrite_clj/node/whitespace.cljs","^:",23,"~:method-params",["^10",[["^4X"]]],"~:protocol-impl",null,"~:arglists-meta",["^10",[null,null]],"^8",1,"^4S",true,"~:variadic?",false,"^4T","^4U","^7",41,"~:ret-tag","^1Y","^9",41,"~:max-fixed-arity",1,"~:fn-var",true,"^4V",["^10",["^4W",["^10",[["^4X"]]]]],"^4Y","Positional factory function for rewrite-clj.node.whitespace/NewlineNode."],"~$WhitespaceNode",["^ ","~:num-fields",1,"~:protocols",["^L",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/Object","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$rewrite-clj.node.protocols/Node","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^M","^21","^6","rewrite_clj/node/whitespace.cljs","^:",26,"~:type",true,"^8",12,"^4S",true,"^7",29,"~:record",true,"^9",29,"~:tag","~$function","~:skip-protocol-flag",["^L",["^58","^59","^5:","^5;","^5<","^5>","^5?","^5@","^5A","^5B","^5C","^5E","^5F","^5G","^5H"]]],"~$whitespace?",["^ ","^4R",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",120,"^8",7,"^9",120,"^:",18,"^4V",["^10",["^4W",["^10",[["^T"]]]]],"^4Y","Check whether a node represents whitespace."],"^M","^22","^6","rewrite_clj/node/whitespace.cljs","^:",18,"^4Z",["^10",[["^T"]]],"^4[",null,"^50",["^10",[null,null]],"^8",1,"^51",false,"^7",120,"^52","~$boolean","^9",120,"^53",1,"^54",true,"^4V",["^10",["^4W",["^10",[["^T"]]]]],"^4Y","Check whether a node represents whitespace."],"~$whitespace-node",["^ ","^4R",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",60,"^8",7,"^9",60,"^:",22,"^4V",["^10",["^4W",["^10",[["~$s"]]]]],"^4Y","Create whitespace node."],"^M","^2U","^6","rewrite_clj/node/whitespace.cljs","^:",22,"^4Z",["^10",[["~$s"]]],"^4[",null,"^50",["^10",[null,null]],"^8",1,"^51",false,"^7",60,"^52","^21","^9",60,"^53",1,"^54",true,"^4V",["^10",["^4W",["^10",[["~$s"]]]]],"^4Y","Create whitespace node."],"~$space-separated",["^ ","^4R",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",113,"^8",9,"^9",113,"^:",24,"^4V",["^10",["^4W",["^10",[["~$nodes"]]]]],"^4Y","Interleave the given seq of nodes with `\" \"` nodes."],"^M","^26","^6","rewrite_clj/node/whitespace.cljs","^:",24,"^4Z",["^10",[["^5R"]]],"^4[",null,"^50",["^10",[null,null]],"^8",3,"^51",false,"^7",113,"^52","~$seq","^9",113,"^53",1,"^54",true,"^4V",["^10",["^4W",["^10",[["^5R"]]]]],"^4Y","Interleave the given seq of nodes with `\" \"` nodes."],"~$linebreak?",["^ ","^4R",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",128,"^8",7,"^9",128,"^:",17,"^4V",["^10",["^4W",["^10",[["^T"]]]]],"^4Y","Check whether a ndoe represents linebreaks."],"^M","^2N","^6","rewrite_clj/node/whitespace.cljs","^:",17,"^4Z",["^10",[["^T"]]],"^4[",null,"^50",["^10",[null,null]],"^8",1,"^51",false,"^7",128,"^52","^5O","^9",128,"^53",1,"^54",true,"^4V",["^10",["^4W",["^10",[["^T"]]]]],"^4Y","Check whether a ndoe represents linebreaks."],"~$*count-fn*",["^ ","^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",10,"^8",16,"^9",10,"^:",26,"~:dynamic",true],"^M","^1D","^6","rewrite_clj/node/whitespace.cljs","^:",26,"^8",1,"^5V",true,"^7",10,"^9",10,"^5K","~$any","^4Y","This function is applied to every newline string and should produce\n   the eventual character count."],"~$comma-separated",["^ ","^4R",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",101,"^8",9,"^9",101,"^:",24,"^4V",["^10",["^4W",["^10",[["^5R"]]]]],"^4Y","Interleave the given seq of nodes with `\", \"` nodes."],"^M","^28","^6","rewrite_clj/node/whitespace.cljs","^:",24,"^4Z",["^10",[["^5R"]]],"^4[",null,"^50",["^10",[null,null]],"^8",3,"^51",false,"^7",101,"^52","^5S","^9",101,"^53",1,"^54",true,"^4V",["^10",["^4W",["^10",[["^5R"]]]]],"^4Y","Interleave the given seq of nodes with `\", \"` nodes."],"~$map->WhitespaceNode",["^ ","^4R",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^:",26,"^8",12,"^4S",true,"^4T","~:map","^7",29,"^9",29,"^4V",["^10",["^4W",["^10",[["~$G__43735"]]]]],"^4Y","Factory function for rewrite-clj.node.whitespace/WhitespaceNode, taking a map of keywords to field values."],"^M","^2?","^6","rewrite_clj/node/whitespace.cljs","^:",26,"^4Z",["^10",[["^5["]]],"^4[",null,"^50",["^10",[null,null]],"^8",1,"^4S",true,"^51",false,"^4T","^5Z","^7",29,"^52","^21","^9",29,"^53",1,"^54",true,"^4V",["^10",["^4W",["^10",[["^5["]]]]],"^4Y","Factory function for rewrite-clj.node.whitespace/WhitespaceNode, taking a map of keywords to field values."],"^4X",["^ ","^4R",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",93,"^8",7,"^9",93,"^:",15,"^4V",["^10",["^4W",["^10",[["~$n"]]]]],"^4Y","Create node representing the given number of newline characters."],"^M","^2<","^6","rewrite_clj/node/whitespace.cljs","^:",15,"^4Z",["^10",[["~$n"]]],"^4[",null,"^50",["^10",[null,null]],"^8",1,"^51",false,"^7",93,"^52","^1Y","^9",93,"^53",1,"^54",true,"^4V",["^10",["^4W",["^10",[["~$n"]]]]],"^4Y","Create node representing the given number of newline characters."],"~$whitespace-nodes",["^ ","^4R",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",75,"^8",7,"^9",75,"^:",23,"^4V",["^10",["^4W",["^10",[["~$s"]]]]],"^4Y","Convert a string of whitespace to whitespace/newline nodes."],"^M","^2D","^6","rewrite_clj/node/whitespace.cljs","^:",23,"^4Z",["^10",[["~$s"]]],"^4[",null,"^50",["^10",[null,null]],"^8",1,"^51",false,"^7",75,"^52","~$cljs.core/LazySeq","^9",75,"^53",1,"^54",true,"^4V",["^10",["^4W",["^10",[["~$s"]]]]],"^4Y","Convert a string of whitespace to whitespace/newline nodes."],"~$NewlineNode",["^ ","^56",1,"^57",["^L",["^58","^59","^5:","^5;","^5<","^5=","^5>","^5?","^5@","^5A","^5B","^5C","^5D","^5E","^5F","^5G","^5H"]],"^M","^1Y","^6","rewrite_clj/node/whitespace.cljs","^:",23,"^5I",true,"^8",12,"^4S",true,"^7",41,"^5J",true,"^9",41,"^5K","^5L","^5M",["^L",["^58","^59","^5:","^5;","^5<","^5>","^5?","^5@","^5A","^5B","^5C","^5E","^5F","^5G","^5H"]]],"~$newline-node",["^ ","^4R",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",65,"^8",7,"^9",65,"^:",19,"^4V",["^10",["^4W",["^10",[["~$s"]]]]],"^4Y","Create newline node."],"^M","^2J","^6","rewrite_clj/node/whitespace.cljs","^:",19,"^4Z",["^10",[["~$s"]]],"^4[",null,"^50",["^10",[null,null]],"^8",1,"^51",false,"^7",65,"^52","^1Y","^9",65,"^53",1,"^54",true,"^4V",["^10",["^4W",["^10",[["~$s"]]]]],"^4Y","Create newline node."],"~$*newline-fn*",["^ ","^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",6,"^8",16,"^9",6,"^:",28,"^5V",true],"^M","^20","^6","rewrite_clj/node/whitespace.cljs","^:",28,"^8",1,"^5V",true,"^7",6,"^9",6,"^5K","^5W","^4Y","This function is applied to every newline string."],"~$newline?",["^ ","^4R",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",70,"^8",8,"^9",70,"^:",16,"~:private",true,"^4V",["^10",["^4W",["^10",[["~$c"]]]]],"^4Y","Check whether a character represents a linebreak."],"^66",true,"^M","^1U","^6","rewrite_clj/node/whitespace.cljs","^:",16,"^4Z",["^10",[["~$c"]]],"^4[",null,"^50",["^10",[null,null]],"^8",1,"^51",false,"^7",70,"^52","^5O","^9",70,"^53",1,"^54",true,"^4V",["^10",["^4W",["^10",[["~$c"]]]]],"^4Y","Check whether a character represents a linebreak."],"~$->WhitespaceNode",["^ ","^4R",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^:",26,"^8",12,"^4S",true,"^4T","^4U","^7",29,"^9",29,"^4V",["^10",["^4W",["^10",[["~$whitespace"]]]]],"^4Y","Positional factory function for rewrite-clj.node.whitespace/WhitespaceNode."],"^M","^2S","^6","rewrite_clj/node/whitespace.cljs","^:",26,"^4Z",["^10",[["^68"]]],"^4[",null,"^50",["^10",[null,null]],"^8",1,"^4S",true,"^51",false,"^4T","^4U","^7",29,"^52","^21","^9",29,"^53",1,"^54",true,"^4V",["^10",["^4W",["^10",[["^68"]]]]],"^4Y","Positional factory function for rewrite-clj.node.whitespace/WhitespaceNode."],"~$spaces",["^ ","^4R",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",88,"^8",7,"^9",88,"^:",13,"^4V",["^10",["^4W",["^10",[["~$n"]]]]],"^4Y","Create node representing the given number of spaces."],"^M","^1E","^6","rewrite_clj/node/whitespace.cljs","^:",13,"^4Z",["^10",[["~$n"]]],"^4[",null,"^50",["^10",[null,null]],"^8",1,"^51",false,"^7",88,"^52","^21","^9",88,"^53",1,"^54",true,"^4V",["^10",["^4W",["^10",[["~$n"]]]]],"^4Y","Create node representing the given number of spaces."],"~$map->NewlineNode",["^ ","^4R",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^:",23,"^8",12,"^4S",true,"^4T","^5Z","^7",41,"^9",41,"^4V",["^10",["^4W",["^10",[["~$G__43765"]]]]],"^4Y","Factory function for rewrite-clj.node.whitespace/NewlineNode, taking a map of keywords to field values."],"^M","^2L","^6","rewrite_clj/node/whitespace.cljs","^:",23,"^4Z",["^10",[["^6;"]]],"^4[",null,"^50",["^10",[null,null]],"^8",1,"^4S",true,"^51",false,"^4T","^5Z","^7",41,"^52","^1Y","^9",41,"^53",1,"^54",true,"^4V",["^10",["^4W",["^10",[["^6;"]]]]],"^4Y","Factory function for rewrite-clj.node.whitespace/NewlineNode, taking a map of keywords to field values."],"~$line-separated",["^ ","^4R",null,"^5",["^ ","^6","rewrite_clj/node/whitespace.cljs","^7",107,"^8",9,"^9",107,"^:",23,"^4V",["^10",["^4W",["^10",[["^5R"]]]]],"^4Y","Interleave the given seq of nodes with newline nodes."],"^M","^2M","^6","rewrite_clj/node/whitespace.cljs","^:",23,"^4Z",["^10",[["^5R"]]],"^4[",null,"^50",["^10",[null,null]],"^8",3,"^51",false,"^7",107,"^52","^5S","^9",107,"^53",1,"^54",true,"^4V",["^10",["^4W",["^10",[["^5R"]]]]],"^4Y","Interleave the given seq of nodes with newline nodes."]],"^Z",["^ ","^U","^U"],"~:cljs.analyzer/constants",["^ ","^W",["^L",["~:newlines","~:whitespace","^4X","^68","~:newline"]],"~:order",["^6?","^68","^6>","^6@","^4X"]],"^13",["^ ","^X",["^L",[]]],"^14",["^ "],"^15",["^V","^U","^S"]],"^P","^N","~:ns-specs",["^ "],"~:ns-spec-vars",["^L",[]],"~:compiler-options",["^2W",[["^6D","~:static-fns"],true,["^6D","~:shadow-tweaks"],null,["^6D","~:source-map-inline"],null,["^6D","~:elide-asserts"],false,["^6D","~:optimize-constants"],null,["^6D","^1:"],null,["^6D","~:external-config"],null,["^6D","~:tooling-config"],null,["^6D","~:emit-constants"],null,["^6D","~:load-tests"],null,["^6D","~:form-size-threshold"],null,["^6D","~:data-readers"],null,["^6D","~:infer-externs"],"~:auto",["^6D","^1<"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^6D","~:fn-invoke-direct"],null,["^6D","~:source-map"],"/dev/null"]]]