["^ ","~:output",["^ ","~:js","goog.provide('edamame.impl.syntax_quote');\nedamame.impl.syntax_quote.unquote_QMARK_ = (function edamame$impl$syntax_quote$unquote_QMARK_(form){\nreturn ((cljs.core.seq_QMARK_(form)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(form),new cljs.core.Symbol(\"clojure.core\",\"unquote\",\"clojure.core/unquote\",843087510,null))));\n});\nedamame.impl.syntax_quote.unquote_splicing_QMARK_ = (function edamame$impl$syntax_quote$unquote_splicing_QMARK_(form){\nreturn ((cljs.core.seq_QMARK_(form)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(form),new cljs.core.Symbol(\"clojure.core\",\"unquote-splicing\",\"clojure.core/unquote-splicing\",-552003150,null))));\n});\n/**\n * Expand a list by resolving its syntax quotes and unquotes\n */\nedamame.impl.syntax_quote.expand_list = (function edamame$impl$syntax_quote$expand_list(ctx,reader,s){\nvar s__$1 = cljs.core.seq(s);\nvar r = cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\nwhile(true){\nif(s__$1){\nvar item = cljs.core.first(s__$1);\nvar ret = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(r,((edamame.impl.syntax_quote.unquote_QMARK_(item))?(new cljs.core.List(null,new cljs.core.Symbol(\"clojure.core\",\"list\",\"clojure.core/list\",-1119203325,null),(new cljs.core.List(null,cljs.core.second(item),null,(1),null)),(2),null)):((edamame.impl.syntax_quote.unquote_splicing_QMARK_(item))?cljs.core.second(item):(new cljs.core.List(null,new cljs.core.Symbol(\"clojure.core\",\"list\",\"clojure.core/list\",-1119203325,null),(new cljs.core.List(null,(edamame.impl.syntax_quote.syntax_quote.cljs$core$IFn$_invoke$arity$3 ? edamame.impl.syntax_quote.syntax_quote.cljs$core$IFn$_invoke$arity$3(ctx,reader,item) : edamame.impl.syntax_quote.syntax_quote.call(null,ctx,reader,item)),null,(1),null)),(2),null))\n)));\nvar G__45372 = cljs.core.next(s__$1);\nvar G__45373 = ret;\ns__$1 = G__45372;\nr = G__45373;\ncontinue;\n} else {\nreturn cljs.core.seq(cljs.core.persistent_BANG_(r));\n}\nbreak;\n}\n});\nedamame.impl.syntax_quote.syntax_quote_coll = (function edamame$impl$syntax_quote$syntax_quote_coll(ctx,reader,type,coll){\nvar res = (new cljs.core.List(null,new cljs.core.Symbol(\"clojure.core\",\"sequence\",\"clojure.core/sequence\",1998774218,null),(new cljs.core.List(null,(new cljs.core.List(null,new cljs.core.Symbol(\"clojure.core\",\"seq\",\"clojure.core/seq\",-1551838743,null),(new cljs.core.List(null,cljs.core.cons(new cljs.core.Symbol(\"clojure.core\",\"concat\",\"clojure.core/concat\",-1236478952,null),edamame.impl.syntax_quote.expand_list(ctx,reader,coll)),null,(1),null)),(2),null)),null,(1),null)),(2),null));\nif(cljs.core.truth_(type)){\nreturn (new cljs.core.List(null,new cljs.core.Symbol(\"clojure.core\",\"apply\",\"clojure.core/apply\",1654646389,null),(new cljs.core.List(null,type,(new cljs.core.List(null,res,null,(1),null)),(2),null)),(3),null));\n} else {\nreturn res;\n}\n});\n/**\n * Decide which map type to use, array-map if less than 16 elements\n */\nedamame.impl.syntax_quote.map_func = (function edamame$impl$syntax_quote$map_func(coll){\nif((cljs.core.count(coll) >= (16))){\nreturn new cljs.core.Symbol(\"clojure.core\",\"hash-map\",\"clojure.core/hash-map\",338908405,null);\n} else {\nreturn new cljs.core.Symbol(\"clojure.core\",\"array-map\",\"clojure.core/array-map\",-1351833961,null);\n}\n});\n/**\n * Flatten a map into a seq of alternate keys and values\n */\nedamame.impl.syntax_quote.flatten_map = (function edamame$impl$syntax_quote$flatten_map(form){\nvar s = cljs.core.seq(form);\nvar key_vals = cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\nwhile(true){\nif(s){\nvar e = cljs.core.first(s);\nvar G__45374 = cljs.core.next(s);\nvar G__45375 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(key_vals,cljs.core.key(e)),cljs.core.val(e));\ns = G__45374;\nkey_vals = G__45375;\ncontinue;\n} else {\nreturn cljs.core.seq(cljs.core.persistent_BANG_(key_vals));\n}\nbreak;\n}\n});\nedamame.impl.syntax_quote.syntax_quote_STAR_ = (function edamame$impl$syntax_quote$syntax_quote_STAR_(p__45325,reader,form){\nvar map__45326 = p__45325;\nvar map__45326__$1 = cljs.core.__destructure_map(map__45326);\nvar ctx = map__45326__$1;\nvar gensyms = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45326__$1,new cljs.core.Keyword(null,\"gensyms\",\"gensyms\",248713782));\nif(cljs.core.special_symbol_QMARK_(form)){\nreturn (new cljs.core.List(null,new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),(new cljs.core.List(null,form,null,(1),null)),(2),null));\n} else {\nif((form instanceof cljs.core.Symbol)){\nreturn (new cljs.core.List(null,new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),(new cljs.core.List(null,(function (){var sym_name = cljs.core.name(form);\nif(cljs.core.special_symbol_QMARK_(form)){\nreturn form;\n} else {\nif(clojure.string.ends_with_QMARK_(sym_name,\"#\")){\nvar temp__5751__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(gensyms),form);\nif(cljs.core.truth_(temp__5751__auto__)){\nvar generated = temp__5751__auto__;\nreturn generated;\n} else {\nvar n = cljs.core.subs.cljs$core$IFn$_invoke$arity$3(sym_name,(0),(((sym_name).length) - (1)));\nvar generated = cljs.core.gensym.cljs$core$IFn$_invoke$arity$1([n,\"__\"].join(''));\nvar generated__$1 = cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.name(generated),\"__auto__\"].join(''));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(gensyms,cljs.core.assoc,form,generated__$1);\n\nreturn generated__$1;\n}\n} else {\nvar f = new cljs.core.Keyword(null,\"resolve-symbol\",\"resolve-symbol\",-319166964).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"syntax-quote\",\"syntax-quote\",-1233164847).cljs$core$IFn$_invoke$arity$1(ctx));\nvar fexpr__45329 = (function (){var or__4212__auto__ = f;\nif(cljs.core.truth_(or__4212__auto__)){\nreturn or__4212__auto__;\n} else {\nreturn cljs.core.identity;\n}\n})();\nreturn (fexpr__45329.cljs$core$IFn$_invoke$arity$1 ? fexpr__45329.cljs$core$IFn$_invoke$arity$1(form) : fexpr__45329.call(null,form));\n\n}\n}\n})(),null,(1),null)),(2),null));\n} else {\nif(edamame.impl.syntax_quote.unquote_QMARK_(form)){\nreturn cljs.core.second(form);\n} else {\nif(edamame.impl.syntax_quote.unquote_splicing_QMARK_(form)){\nthrow (new Error(\"unquote-splice not in list\"));\n} else {\nif(cljs.core.coll_QMARK_(form)){\nif((form instanceof cljs.core.IRecord)){\nreturn form;\n} else {\nif(cljs.core.map_QMARK_(form)){\nreturn edamame.impl.syntax_quote.syntax_quote_coll(ctx,reader,edamame.impl.syntax_quote.map_func(form),edamame.impl.syntax_quote.flatten_map(form));\n} else {\nif(cljs.core.vector_QMARK_(form)){\nreturn (new cljs.core.List(null,new cljs.core.Symbol(\"clojure.core\",\"vec\",\"clojure.core/vec\",146271141,null),(new cljs.core.List(null,edamame.impl.syntax_quote.syntax_quote_coll(ctx,reader,null,form),null,(1),null)),(2),null));\n} else {\nif(cljs.core.set_QMARK_(form)){\nreturn edamame.impl.syntax_quote.syntax_quote_coll(ctx,reader,new cljs.core.Symbol(\"clojure.core\",\"hash-set\",\"clojure.core/hash-set\",1229125967,null),form);\n} else {\nif(((cljs.core.seq_QMARK_(form)) || (cljs.core.list_QMARK_(form)))){\nvar seq = cljs.core.seq(form);\nif(seq){\nreturn edamame.impl.syntax_quote.syntax_quote_coll(ctx,reader,null,seq);\n} else {\nreturn cljs.core.list(new cljs.core.Symbol(\"clojure.core\",\"list\",\"clojure.core/list\",-1119203325,null));\n}\n} else {\nthrow (new Error(\"Unknown Collection type\"));\n\n}\n}\n}\n}\n}\n} else {\nif((((form instanceof cljs.core.Keyword)) || (((typeof form === 'number') || (((cljs.core.char_QMARK_(form)) || (((typeof form === 'string') || ((((form == null)) || (((cljs.core.boolean_QMARK_(form)) || (cljs.core.regexp_QMARK_(form)))))))))))))){\nreturn form;\n} else {\nreturn (new cljs.core.List(null,new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),(new cljs.core.List(null,form,null,(1),null)),(2),null));\n\n}\n}\n}\n}\n}\n}\n});\nedamame.impl.syntax_quote.add_meta = (function edamame$impl$syntax_quote$add_meta(ctx,reader,form,ret){\nif((function (){var and__4210__auto__ = (((!((form == null))))?(((((form.cljs$lang$protocol_mask$partition0$ & (262144))) || ((cljs.core.PROTOCOL_SENTINEL === form.cljs$core$IWithMeta$))))?true:false):false);\nif(and__4210__auto__){\nreturn cljs.core.seq(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(cljs.core.meta(form),new cljs.core.Keyword(null,\"row-key\",\"row-key\",-1189010712).cljs$core$IFn$_invoke$arity$1(ctx),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"col-key\",\"col-key\",-2009675766).cljs$core$IFn$_invoke$arity$1(ctx),new cljs.core.Keyword(null,\"end-row-key\",\"end-row-key\",-1126662680).cljs$core$IFn$_invoke$arity$1(ctx),new cljs.core.Keyword(null,\"end-col-key\",\"end-col-key\",81813304).cljs$core$IFn$_invoke$arity$1(ctx)], 0)));\n} else {\nreturn and__4210__auto__;\n}\n})()){\nreturn (new cljs.core.List(null,new cljs.core.Symbol(\"cljs.core\",\"with-meta\",\"cljs.core/with-meta\",749126446,null),(new cljs.core.List(null,ret,(new cljs.core.List(null,edamame.impl.syntax_quote.syntax_quote_STAR_(ctx,reader,cljs.core.meta(form)),null,(1),null)),(2),null)),(3),null));\n} else {\nreturn ret;\n}\n});\nedamame.impl.syntax_quote.syntax_quote = (function edamame$impl$syntax_quote$syntax_quote(ctx,reader,form){\nvar ret = edamame.impl.syntax_quote.syntax_quote_STAR_(ctx,reader,form);\nreturn edamame.impl.syntax_quote.add_meta(ctx,reader,form,ret);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:no-doc",true,"~:doc","Taken and adapted from\n  https://github.com/clojure/tools.reader/blob/master/src/main/clojure/clojure/tools/reader.clj","~:file","edamame/impl/syntax_quote.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",30],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index","~$highlight.js","~$module$node_modules$highlight_DOT_js$lib$index","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.repl","~$cljs.repl"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$edamame.impl.syntax-quote","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^U","~$str","^U","~$cljs.core","^W","~$goog","^X"],"~:seen",["^N",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^W","^W"],"~:form",["~#list",["~$ns","^P","Taken and adapted from\n  https://github.com/clojure/tools.reader/blob/master/src/main/clojure/clojure/tools/reader.clj",["^ ","^6",true],["^12",["^Z",["^U","~:as","^V"]]]]],"~:flags",["^ ","^Z",["^N",[]]],"~:js-deps",["^ "],"~:deps",["^X","^W","^U"]],"^R","^P","~:resource-id",["~:shadow.build.classpath/resource","edamame/impl/syntax_quote.cljc"],"~:compiled-at",1638904286520,"~:resource-name","edamame/impl/syntax_quote.cljc","~:warnings",[],"~:source","(ns edamame.impl.syntax-quote\n  \"Taken and adapted from\n  https://github.com/clojure/tools.reader/blob/master/src/main/clojure/clojure/tools/reader.clj\"\n  {:no-doc true}\n  (:require [clojure.string :as str]))\n\n(defn unquote? [form]\n  (and (seq? form)\n       (= (first form) 'clojure.core/unquote)))\n\n(defn- unquote-splicing? [form]\n  (and (seq? form)\n       (= (first form) 'clojure.core/unquote-splicing)))\n\n(declare syntax-quote)\n\n(defn- expand-list\n  \"Expand a list by resolving its syntax quotes and unquotes\"\n  [ctx #?(:cljs ^not-native reader :default reader) s]\n  (loop [s (seq s) r (transient [])]\n    (if s\n      (let [item (first s)\n            ret (conj! r\n                       (cond\n                         (unquote? item)          (list 'clojure.core/list (second item))\n                         (unquote-splicing? item) (second item)\n                         :else                    (list 'clojure.core/list (syntax-quote ctx reader item))))]\n        (recur (next s) ret))\n      (seq (persistent! r)))))\n\n(defn- syntax-quote-coll [ctx #?(:cljs ^not-native reader :default reader) type coll]\n  ;; We use sequence rather than seq here to fix http://dev.clojure.org/jira/browse/CLJ-1444\n  ;; But because of http://dev.clojure.org/jira/browse/CLJ-1586 we still need to call seq on the form\n  (let [res (list 'clojure.core/sequence\n                  (list 'clojure.core/seq\n                        (cons 'clojure.core/concat\n                              (expand-list ctx reader coll))))]\n    (if type\n      (list 'clojure.core/apply type res)\n      res)))\n\n(defn map-func\n  \"Decide which map type to use, array-map if less than 16 elements\"\n  [coll]\n  (if (>= (count coll) 16)\n    'clojure.core/hash-map\n    'clojure.core/array-map))\n\n(defn- flatten-map\n  \"Flatten a map into a seq of alternate keys and values\"\n  [form]\n  (loop [s (seq form) key-vals (transient [])]\n    (if s\n      (let [e (first s)]\n        (recur (next s) (-> key-vals\n                            (conj! (key e))\n                            (conj! (val e)))))\n      (seq (persistent! key-vals)))))\n\n(defn- syntax-quote* [{:keys [:gensyms] :as ctx}\n                     #?(:cljs ^not-native reader :default reader) form]\n  (cond\n    (special-symbol? form) (list 'quote form)\n    (symbol? form)\n    (list 'quote\n          (let [sym-name (name form)]\n            (cond (special-symbol? form) form\n                  (str/ends-with? sym-name \"#\")\n                  (if-let [generated (get @gensyms form)]\n                    generated\n                    (let [n (subs sym-name 0 (dec (count sym-name)))\n                          generated (gensym (str n \"__\"))\n                          generated (symbol (str (name generated) \"__auto__\"))]\n                      (swap! gensyms assoc form generated)\n                      generated))\n                  :else\n                  (let [f (-> ctx :syntax-quote :resolve-symbol)]\n                    ((or f identity) form)))))\n    (unquote? form) (second form)\n    (unquote-splicing? form) (throw (new #?(:cljs js/Error :clj IllegalStateException)\n                                         \"unquote-splice not in list\"))\n\n    (coll? form)\n    (cond\n      (instance? #?(:clj clojure.lang.IRecord :cljs IRecord) form) form\n      (map? form) (syntax-quote-coll ctx reader (map-func form) (flatten-map form))\n      (vector? form) (list 'clojure.core/vec (syntax-quote-coll ctx reader nil form))\n      (set? form) (syntax-quote-coll ctx reader 'clojure.core/hash-set form)\n      (or (seq? form) (list? form))\n      (let [seq (seq form)]\n        (if seq\n          (syntax-quote-coll ctx reader nil seq)\n          '(clojure.core/list)))\n\n      :else (throw (new #?(:clj UnsupportedOperationException\n                           :cljs js/Error) \"Unknown Collection type\")))\n\n    (or (keyword? form)\n        (number? form)\n        (char? form)\n        (string? form)\n        (nil? form)\n        (boolean? form)\n        #?(:clj (instance? java.util.regex.Pattern form)\n           :cljs (regexp? form)))\n    form\n    :else (list 'quote form)))\n\n(defn- add-meta [ctx reader form ret]\n  (if (and #?(:clj (instance? clojure.lang.IObj form)\n              :cljs (implements? IWithMeta form))\n           (seq (dissoc (meta form) (:row-key ctx) (:col-key ctx) (:end-row-key ctx) (:end-col-key ctx))))\n    (list #?(:clj 'clojure.core/with-meta\n             :cljs 'cljs.core/with-meta) ret (syntax-quote* ctx reader (meta form)))\n    ret))\n\n(defn syntax-quote [ctx reader form]\n  (let [ret (syntax-quote* ctx reader form)]\n    (add-meta ctx reader form ret)))\n","~:reader-features",["^N",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["edamame.impl.syntax-quote/unquote?","form","cljs.core/seq?","cljs.core._EQ_","cljs.core/first","edamame.impl.syntax-quote/unquote-splicing?","edamame.impl.syntax-quote/expand-list","ctx","reader","s","cljs.core/seq","r","cljs.core/transient","item","ret","cljs.core.conj_BANG_","cljs.core/List","cljs.core/second","edamame.impl.syntax-quote/syntax-quote","cljs.core/next","cljs.core/persistent!","edamame.impl.syntax-quote/syntax-quote-coll","type","coll","res","cljs.core/cons","edamame.impl.syntax-quote/map-func","cljs.core/count","edamame.impl.syntax-quote/flatten-map","key-vals","e","cljs.core/key","cljs.core/val","p__45325","map__45326","cljs.core/--destructure-map","gensyms","cljs.core.get","edamame.impl.syntax-quote/syntax-quote*","cljs.core/special-symbol?","cljs.core/Symbol","sym-name","cljs.core/name","clojure.string/ends-with?","temp__5751__auto__","generated","cljs.core/deref","n","cljs.core.subs","cljs.core.gensym","cljs.core.symbol","cljs.core.swap_BANG_","cljs.core/assoc","f","fexpr__45329","or__4212__auto__","cljs.core/identity","js/Error","cljs.core/coll?","cljs.core/IRecord","cljs.core/map?","cljs.core/vector?","cljs.core/set?","cljs.core/list?","seq","cljs.core/Keyword","cljs.core/char?","cljs.core/boolean?","cljs.core/regexp?","edamame.impl.syntax-quote/add-meta","and__4210__auto__","cljs.core/PROTOCOL_SENTINEL","cljs.core.dissoc","cljs.core/meta"]],"~:used-vars",["^N",["~$cljs.core/--destructure-map","~$cljs.core/IRecord","~$cljs.core/PROTOCOL_SENTINEL","~$cljs.core/boolean?","~$cljs.core/char?","~$edamame.impl.syntax-quote/unquote-splicing?","~$cljs.core/vector?","~$cljs.core/=","~$cljs.core/count","~$cljs.core/deref","~$cljs.core/seq","~$cljs.core/identity","~$edamame.impl.syntax-quote/syntax-quote*","~$cljs.core/Keyword","~$cljs.core/special-symbol?","~$cljs.core/dissoc","~$edamame.impl.syntax-quote/flatten-map","~$clojure.string/ends-with?","~$cljs.core/map?","~$edamame.impl.syntax-quote/unquote?","~$cljs.core/List","~$cljs.core/swap!","~$cljs.core/get","~$edamame.impl.syntax-quote/syntax-quote-coll","~$cljs.core/symbol","~$cljs.core/conj!","~$cljs.core/persistent!","~$cljs.core/set?","~$cljs.core/meta","~$cljs.core/list?","~$cljs.core/second","~$cljs.core/key","~$cljs.core/next","~$edamame.impl.syntax-quote/syntax-quote","~$cljs.core/transient","~$cljs.core/not","~$cljs.core/cons","~$cljs.core/assoc","~$cljs.core/Symbol","~$cljs.core/coll?","~$edamame.impl.syntax-quote/map-func","~$cljs.core/gensym","~$cljs.core/first","~$cljs.core/seq?","~$cljs.core/regexp?","~$cljs.core/name","~$cljs.core/subs","~$cljs.core/val","~$js/Error","~$edamame.impl.syntax-quote/add-meta","~$edamame.impl.syntax-quote/expand-list"]]],"~:cache-keys",["~#cmap",[["^19","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^N",[]],"~:deps-syms",["^X","~$goog.dom.HtmlElement"]]],["^19","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X","~$goog.array","~$goog.asserts"]]],["^19","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X"]]],["^19","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X","^2S","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^19","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X","^2T","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2W"]]],["^19","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X","^2T"]]],["^19","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X"]]],["^19","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X"]]],["^19","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X"]]],["^19","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X"]]],["^19","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X","^2T"]]],"~:SHADOW-TIMESTAMP",[1628015068000,1628015068000,1628015038000],["^19","edamame/impl/syntax_quote.cljc"],["8915b89bb492e9e815fdda7c1acef2683070dc2a","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X","^W","^U"]]],["^19","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X","^2T","~$goog.reflect"]]],["^19","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X","^2T","~$goog.fs.blob","^2X","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2Z","^2[","^30","^31"]]],["^19","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X"]]],["^19","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X"]]],["^19","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X","^2S","^2T","~$goog.html.SafeUrl","^30","^31","^2W"]]],["^19","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X","^2T","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^35","~$goog.html.SafeStyle","^37","^2Y","~$goog.html.uncheckedconversions","^30","^2W"]]],["^19","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^19","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X","^2S","^2T","~$goog.dom.TagName","~$goog.dom.tags","^35","^3;","~$goog.html.SafeStyleSheet","^37","^2Y","^36","^2Z","^2[","~$goog.labs.userAgent.browser","^2V","^30","^31","^2W"]]],["^19","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X","^2V"]]],["^19","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X","^2S"]]],["^19","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^19","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X","^2S","^2T","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^19","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X"]]],["^19","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X"]]],["^19","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",[]]],["^19","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X","^2S","^2V"]]],["^19","clojure/string.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X","^W","^3E","~$goog.string.StringBuffer"]]],["^19","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X","~$goog.dom.safe","^3<","^30","^2W"]]],["^19","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X"]]],["^19","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X","^2W"]]],["^19","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X"]]],["^19","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X","^2S","^2T","^39","~$goog.math"]]],["^19","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X","^2T","^3:","^35","^3;","^3A","^37","^2Y","^30","^2W","^2Z"]]],["^19","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X"]]],["^19","cljs/core.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X","~$goog.math.Long","~$goog.math.Integer","^3E","^2V","^2S","~$goog.Uri","^3K"]]],["^19","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X","^30","^31","^36","^2T"]]],["^19","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X","^30","^3;","^31","^2S","^2V","^2T","^2W"]]],["^19","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X","^33"]]],["^19","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X","^2T","^3E"]]],["^19","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^2N",["^ ","^2O",null,"^2P",["^N",[]],"^2Q",["^X","^2T","^31"]]]]],"~:clj-info",["^ ","jar:file:/Users/hagenek/.m2/repository/binaryage/devtools/1.0.3/devtools-1.0.3.jar!/devtools/defaults.clj",1638904136000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1628015039000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1628015039000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes.cljc",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1628015036000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/instant.clj",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1628015039000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/externs.clj",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64.clj",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1628015039000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1628015036000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map.clj",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1628015039000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/util.cljc",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/js_deps.cljc",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64_vlq.clj",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1628015036000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/core.cljc",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1628015036000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/tagged_literals.cljc",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1628015036000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/impl.cljc",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1628015036000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/env.cljc",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer.cljc",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1628015039000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/compiler.cljc",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1628015039000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes/and_or.cljc",1628015038000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6",true,"^7","Taken and adapted from\n  https://github.com/clojure/tools.reader/blob/master/src/main/clojure/clojure/tools/reader.clj","^8","edamame/impl/syntax_quote.cljc","^9",1,"^:",5,"^;",1,"^<",30],"^=",["^ ","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I","^J","^K"],"^L",null,"^M",["^N",[]],"^O","^P","^S",null,"^T",["^ ","^U","^U","^V","^U","^W","^W","^X","^X"],"^Y",["^N",["^Z"]],"~:shadow/js-access-global",["^N",["Error"]],"^[",null,"~:defs",["^ ","~$unquote-splicing?",["^ ","~:protocol-inline",null,"^5",["^ ","^8","edamame/impl/syntax_quote.cljc","^9",11,"^:",8,"^;",11,"^<",25,"~:private",true,"~:arglists",["^12",["~$quote",["^12",[["~$form"]]]]]],"^4H",true,"^O","^1J","^8","edamame/impl/syntax_quote.cljc","^<",25,"~:method-params",["^12",[["^4K"]]],"~:protocol-impl",null,"~:arglists-meta",["^12",[null,null]],"^:",1,"~:variadic?",false,"^9",11,"~:ret-tag","~$boolean","^;",11,"~:max-fixed-arity",1,"~:fn-var",true,"^4I",["^12",["^4J",["^12",[["^4K"]]]]]],"~$syntax-quote*",["^ ","^4G",null,"^5",["^ ","^8","edamame/impl/syntax_quote.cljc","^9",60,"^:",8,"^;",60,"^<",21,"^4H",true,"^4I",["^12",["^4J",["^12",[[["^ ","~:keys",["~:gensyms"],"^14","~$ctx"],"~$reader","^4K"]]]]]],"^4H",true,"^O","^1Q","^8","edamame/impl/syntax_quote.cljc","^<",21,"^4L",["^12",[["~$p__45325","^4X","^4K"]]],"^4M",null,"^4N",["^12",[null,null]],"^:",1,"^4O",false,"^9",60,"^4P",["^N",[null,"~$clj","~$any","^1Y","~$clj-nil"]],"^;",60,"^4R",3,"^4S",true,"^4I",["^12",["^4J",["^12",[[["^ ","^4U",["^4V"],"^14","^4W"],"^4X","^4K"]]]]]],"~$flatten-map",["^ ","^4G",null,"^5",["^ ","^8","edamame/impl/syntax_quote.cljc","^9",49,"^:",8,"^;",49,"^<",19,"^4H",true,"^4I",["^12",["^4J",["^12",[["^4K"]]]]],"^7","Flatten a map into a seq of alternate keys and values"],"^4H",true,"^O","^1U","^8","edamame/impl/syntax_quote.cljc","^<",19,"^4L",["^12",[["^4K"]]],"^4M",null,"^4N",["^12",[null,null]],"^:",1,"^4O",false,"^9",49,"^4P","~$seq","^;",49,"^4R",1,"^4S",true,"^4I",["^12",["^4J",["^12",[["^4K"]]]]],"^7","Flatten a map into a seq of alternate keys and values"],"~$unquote?",["^ ","^4G",null,"^5",["^ ","^8","edamame/impl/syntax_quote.cljc","^9",7,"^:",7,"^;",7,"^<",15,"^4I",["^12",["^4J",["^12",[["^4K"]]]]]],"^O","^1X","^8","edamame/impl/syntax_quote.cljc","^<",15,"^4L",["^12",[["^4K"]]],"^4M",null,"^4N",["^12",[null,null]],"^:",1,"^4O",false,"^9",7,"^4P","^4Q","^;",7,"^4R",1,"^4S",true,"^4I",["^12",["^4J",["^12",[["^4K"]]]]]],"~$syntax-quote-coll",["^ ","^4G",null,"^5",["^ ","^8","edamame/impl/syntax_quote.cljc","^9",31,"^:",8,"^;",31,"^<",25,"^4H",true,"^4I",["^12",["^4J",["^12",[["^4W","^4X","~$type","~$coll"]]]]]],"^4H",true,"^O","^20","^8","edamame/impl/syntax_quote.cljc","^<",25,"^4L",["^12",[["^4W","^4X","^55","^56"]]],"^4M",null,"^4N",["^12",[null,null]],"^:",1,"^4O",false,"^9",31,"^4P","^1Y","^;",31,"^4R",4,"^4S",true,"^4I",["^12",["^4J",["^12",[["^4W","^4X","^55","^56"]]]]]],"~$syntax-quote",["^ ","^4G",null,"^5",["^ ","^8","edamame/impl/syntax_quote.cljc","^9",117,"^:",7,"^;",117,"^<",19,"^4I",["^12",["^4J",["^12",[["^4W","^4X","^4K"]]]]]],"^O","^2:","^8","edamame/impl/syntax_quote.cljc","^<",19,"^4L",["^12",[["^4W","^4X","^4K"]]],"^4M",null,"^4N",["^12",[null,null]],"^:",1,"^4O",false,"^9",117,"^4P",["^N",[null,"^1Y"]],"^;",117,"^4R",3,"^4S",true,"^4I",["^12",["^4J",["^12",[["^4W","^4X","^4K"]]]]]],"~$map-func",["^ ","^4G",null,"^5",["^ ","^8","edamame/impl/syntax_quote.cljc","^9",42,"^:",7,"^;",42,"^<",15,"^4I",["^12",["^4J",["^12",[["^56"]]]]],"^7","Decide which map type to use, array-map if less than 16 elements"],"^O","^2A","^8","edamame/impl/syntax_quote.cljc","^<",15,"^4L",["^12",[["^56"]]],"^4M",null,"^4N",["^12",[null,null]],"^:",1,"^4O",false,"^9",42,"^4P","^2?","^;",42,"^4R",1,"^4S",true,"^4I",["^12",["^4J",["^12",[["^56"]]]]],"^7","Decide which map type to use, array-map if less than 16 elements"],"~$add-meta",["^ ","^4G",null,"^5",["^ ","^8","edamame/impl/syntax_quote.cljc","^9",109,"^:",8,"^;",109,"^<",16,"^4H",true,"^4I",["^12",["^4J",["^12",[["^4W","^4X","^4K","~$ret"]]]]]],"^4H",true,"^O","^2J","^8","edamame/impl/syntax_quote.cljc","^<",16,"^4L",["^12",[["^4W","^4X","^4K","^5:"]]],"^4M",null,"^4N",["^12",[null,null]],"^:",1,"^4O",false,"^9",109,"^4P",["^N",[null,"^1Y"]],"^;",109,"^4R",4,"^4S",true,"^4I",["^12",["^4J",["^12",[["^4W","^4X","^4K","^5:"]]]]]],"~$expand-list",["^ ","^4G",null,"^5",["^ ","^8","edamame/impl/syntax_quote.cljc","^9",17,"^:",8,"^;",17,"^<",19,"^4H",true,"^4I",["^12",["^4J",["^12",[["^4W","^4X","~$s"]]]]],"^7","Expand a list by resolving its syntax quotes and unquotes"],"^4H",true,"^O","^2K","^8","edamame/impl/syntax_quote.cljc","^<",19,"^4L",["^12",[["^4W","^4X","~$s"]]],"^4M",null,"^4N",["^12",[null,null]],"^:",1,"^4O",false,"^9",17,"^4P","^52","^;",17,"^4R",3,"^4S",true,"^4I",["^12",["^4J",["^12",[["^4W","^4X","~$s"]]]]],"^7","Expand a list by resolving its syntax quotes and unquotes"]],"^10",["^ ","^W","^W"],"~:cljs.analyzer/constants",["^ ","^Y",["^N",["~$clojure.core/list","~$clojure.core/vec","~:else","~:end-row-key","~:row-key","~$clojure.core/seq","~:col-key","~$clojure.core/sequence","~:resolve-symbol","~$cljs.core/with-meta","~$clojure.core/hash-set","~:syntax-quote","~$clojure.core/unquote-splicing","~$clojure.core/hash-map","~$clojure.core/apply","^4V","~$clojure.core/unquote","~$clojure.core/array-map","~$clojure.core/concat","~:end-col-key","^4J"]],"~:order",["^5L","^5I","^5=","^5?","^5D","^5B","^5N","^5K","^5J","^5M","^4V","^4J","^5E","^5H","^5>","^5G","^5A","^5C","^5@","^5O","^5F"]],"^15",["^ ","^Z",["^N",[]]],"^16",["^ "],"^17",["^X","^W","^U"]],"^R","^P","~:ns-specs",["^ "],"~:ns-spec-vars",["^N",[]],"~:compiler-options",["^2M",[["^5S","~:static-fns"],true,["^5S","~:shadow-tweaks"],null,["^5S","~:source-map-inline"],null,["^5S","~:elide-asserts"],false,["^5S","~:optimize-constants"],null,["^5S","^1<"],null,["^5S","~:external-config"],null,["^5S","~:tooling-config"],null,["^5S","~:emit-constants"],null,["^5S","~:load-tests"],null,["^5S","~:form-size-threshold"],null,["^5S","~:data-readers"],null,["^5S","~:infer-externs"],"~:auto",["^5S","^1>"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^5S","~:fn-invoke-direct"],null,["^5S","~:source-map"],"/dev/null"]]]