["^ ","~:output",["^ ","~:js","goog.provide('edamame.core');\n/**\n * Parses first EDN value from string.\n * \n *   Supported parsing options:\n * \n *   `:deref`: parse forms starting with `@`. If `true`, the resulting\n *   expression will be parsed as `(deref expr)`.\n * \n *   `:fn`: parse function literals (`#(inc %)`). If `true`, will be parsed as `(fn [%1] (inc %))`.\n * \n *   `:quote`: parse quoted expression `'foo`. If `true`, will be parsed as `(quote foo)`.\n * \n *   `:read-eval`: parse read-eval (`=(+ 1 2 3)`). If `true`, the\n *   resulting expression will be parsed as `(read-eval (+ 1 2 3))`.\n * \n *   `:regex`: parse regex literals (`#\"foo\"`). If `true`, defaults to\n *   `re-pattern`.\n * \n *   `:syntax-quote`: parse syntax-quote (`(+ 1 2 3)`). Symbols get\n *   qualified using `:resolve-symbol` which defaults to `identity`:\n *   `(parse-string \"`x\" {:syntax-quote {:resolve-symbol #(symbol \"user\" (str %))}})\n *   ;;=> (quote user/x)`.\n * \n *   `:var`: parse var literals (`#'foo`). If `true`, the resulting\n *   expression will be parsed as `(var foo)`.\n * \n *   `:all`: when `true`, the above options will be set to `true` unless\n *   explicitly provided.\n * \n *   Supported options for processing reader conditionals:\n * \n *   `:read-cond`: - `:allow` to process reader conditionals, or\n *                `:preserve` to keep all branches\n *   `:features`: - persistent set of feature keywords for reader conditionals (e.g. `#{:clj}`).\n * \n *   `:auto-resolve`: map of alias to namespace symbols for\n *   auto-resolving keywords. Use `:current` as the alias for the current\n *   namespace.\n * \n *   `:readers`: data readers.\n * \n *   Additional arguments to tools.reader may be passed with\n *   `:tools.reader/opts`, like `:readers` for passing reader tag functions.\n * \n *   Deprecated options:\n * \n *   `:dispatch`: DEPRECATED by parsing options.\n * \n *   \n */\nedamame.core.parse_string = (function edamame$core$parse_string(var_args){\nvar G__45619 = arguments.length;\nswitch (G__45619) {\ncase 1:\nreturn edamame.core.parse_string.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn edamame.core.parse_string.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(edamame.core.parse_string.cljs$core$IFn$_invoke$arity$1 = (function (s){\nreturn edamame.impl.parser.parse_string(s,null);\n}));\n\n(edamame.core.parse_string.cljs$core$IFn$_invoke$arity$2 = (function (s,opts){\nreturn edamame.impl.parser.parse_string(s,opts);\n}));\n\n(edamame.core.parse_string.cljs$lang$maxFixedArity = 2);\n\n/**\n * Like parse-string but parses all values from string and returns them\n *   in a vector.\n */\nedamame.core.parse_string_all = (function edamame$core$parse_string_all(var_args){\nvar G__45621 = arguments.length;\nswitch (G__45621) {\ncase 1:\nreturn edamame.core.parse_string_all.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn edamame.core.parse_string_all.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(edamame.core.parse_string_all.cljs$core$IFn$_invoke$arity$1 = (function (s){\nreturn edamame.impl.parser.parse_string_all(s,null);\n}));\n\n(edamame.core.parse_string_all.cljs$core$IFn$_invoke$arity$2 = (function (s,opts){\nreturn edamame.impl.parser.parse_string_all(s,opts);\n}));\n\n(edamame.core.parse_string_all.cljs$lang$maxFixedArity = 2);\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","edamame/core.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",17],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index","~$highlight.js","~$module$node_modules$highlight_DOT_js$lib$index","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.repl","~$cljs.repl"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$edamame.core","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$edamame.impl.parser","^S","~$p","^S","~$cljs.core","^T","~$goog","^U"],"~:seen",["^L",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^T","^T"],"~:form",["~#list",["~$ns","^N",["^[",["^W",["^S","~:as","~$p"]]]]],"~:flags",["^ ","^W",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^U","^T","^S"]],"^P","^N","~:resource-id",["~:shadow.build.classpath/resource","edamame/core.cljc"],"~:compiled-at",1638904286730,"~:resource-name","edamame/core.cljc","~:warnings",[],"~:source","(ns edamame.core\n  (:require\n   [edamame.impl.parser :as p]))\n\n(defn parse-string\n  \"Parses first EDN value from string.\n\n  Supported parsing options:\n\n  `:deref`: parse forms starting with `@`. If `true`, the resulting\n  expression will be parsed as `(deref expr)`.\n\n  `:fn`: parse function literals (`#(inc %)`). If `true`, will be parsed as `(fn [%1] (inc %))`.\n\n  `:quote`: parse quoted expression `'foo`. If `true`, will be parsed as `(quote foo)`.\n\n  `:read-eval`: parse read-eval (`=(+ 1 2 3)`). If `true`, the\n  resulting expression will be parsed as `(read-eval (+ 1 2 3))`.\n\n  `:regex`: parse regex literals (`#\\\"foo\\\"`). If `true`, defaults to\n  `re-pattern`.\n\n  `:syntax-quote`: parse syntax-quote (`(+ 1 2 3)`). Symbols get\n  qualified using `:resolve-symbol` which defaults to `identity`:\n  `(parse-string \\\"`x\\\" {:syntax-quote {:resolve-symbol #(symbol \\\"user\\\" (str %))}})\n  ;;=> (quote user/x)`.\n\n  `:var`: parse var literals (`#'foo`). If `true`, the resulting\n  expression will be parsed as `(var foo)`.\n\n  `:all`: when `true`, the above options will be set to `true` unless\n  explicitly provided.\n\n  Supported options for processing reader conditionals:\n\n  `:read-cond`: - `:allow` to process reader conditionals, or\n                  `:preserve` to keep all branches\n  `:features`: - persistent set of feature keywords for reader conditionals (e.g. `#{:clj}`).\n\n  `:auto-resolve`: map of alias to namespace symbols for\n  auto-resolving keywords. Use `:current` as the alias for the current\n  namespace.\n\n  `:readers`: data readers.\n\n  Additional arguments to tools.reader may be passed with\n  `:tools.reader/opts`, like `:readers` for passing reader tag functions.\n\n  Deprecated options:\n\n  `:dispatch`: DEPRECATED by parsing options.\n\n  \"\n  ([s]\n   (p/parse-string s nil))\n  ([s opts]\n   (p/parse-string s opts)))\n\n(defn parse-string-all\n  \"Like parse-string but parses all values from string and returns them\n  in a vector.\"\n  ([s]\n   (p/parse-string-all s nil))\n  ([s opts]\n   (p/parse-string-all s opts)))\n\n;;;; Scratch\n\n(comment\n  (parse-string \"(1 2 3 #_4)\"))\n","~:reader-features",["^L",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";AAIA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BAAA,oCAAAA,hEAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,wDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,wDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,0DAAA,1DAAMD,qEAiDFE;AAjDJ,AAkDG,0CAAA,nCAACC,iCAAeD;;;AAlDnB,CAAA,0DAAA,1DAAMF,qEAmDFE,EAAEE;AAnDN,AAoDG,OAACD,iCAAeD,EAAEE;;;AApDrB,CAAA,oDAAA,pDAAMJ;;AAAN,AAsDA,AAAA;;;;gCAAA,wCAAAF,xEAAMQ;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,4DAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,4DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAL,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,8DAAA,9DAAMK,yEAGFJ;AAHJ,AAIG,8CAAA,vCAACK,qCAAmBL;;;AAJvB,CAAA,8DAAA,9DAAMI,yEAKFJ,EAAEE;AALN,AAMG,OAACG,qCAAmBL,EAAEE;;;AANzB,CAAA,wDAAA,xDAAME;;AAAN,AAUA","names",["var_args","G__45619","edamame.core/parse-string","js/Error","s","edamame.impl.parser/parse-string","opts","G__45621","edamame.core/parse-string-all","edamame.impl.parser/parse-string-all"]],"~:used-vars",["^L",["~$edamame.core/parse-string","~$edamame.impl.parser/parse-string-all","~$edamame.impl.parser/parse-string","~$edamame.core/parse-string-all","~$js/Error"]]],"~:cache-keys",["~#cmap",[["^16","goog/dom/tagname.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["^U","~$goog.dom.HtmlElement"]]],["^16","edamame/core.cljc"],["8915b89bb492e9e815fdda7c1acef2683070dc2a","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^T","^S"]]],["^16","cljs/tools/reader/impl/utils.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^T","~$clojure.string","~$goog.string"]]],["^16","goog/math/math.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","~$goog.array","~$goog.asserts"]]],["^16","goog/html/trustedtypes.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U"]]],["^16","goog/labs/useragent/browser.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^1P","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^16","goog/html/safeurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^1Q","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^1T"]]],["^16","goog/array/array.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^1Q"]]],["^16","goog/debug/error.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U"]]],["^16","cljs/tools/reader/edn.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^T","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^1O","~$goog.string.StringBuffer"]]],["^16","goog/dom/nodetype.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U"]]],["^16","cljs/tools/reader/impl/inspect.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^T"]]],["^16","cljs/tools/reader.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^T","^20","^21","^22","^1[","^1P","^1O","^24"]]],["^16","edamame/impl/parser.cljc"],["8915b89bb492e9e815fdda7c1acef2683070dc2a","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^T","~$cljs.tools.reader.edn","^20","~$cljs.tools.reader.impl.inspect","^21","^22","^1N","~$edamame.impl.read-fn","~$edamame.impl.syntax-quote","^24"]]],["^16","goog/string/typedstring.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U"]]],["^16","goog/object/object.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U"]]],["^16","goog/dom/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^1Q"]]],"~:SHADOW-TIMESTAMP",[1628015068000,1628015068000,1628015038000],["^16","edamame/impl/syntax_quote.cljc"],["8915b89bb492e9e815fdda7c1acef2683070dc2a","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^T","^1N"]]],["^16","goog/math/long.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^1Q","~$goog.reflect"]]],["^16","goog/html/trustedresourceurl.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^1Q","~$goog.fs.blob","^1U","~$goog.html.SafeScript","~$goog.html.trustedtypes","^1W","^1X","^1Y","^1Z"]]],["^16","goog/string/internal.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U"]]],["^16","goog/functions/functions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U"]]],["^16","goog/html/safestyle.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^1P","^1Q","~$goog.html.SafeUrl","^1Y","^1Z","^1T"]]],["^16","goog/dom/safe.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^1Q","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^2<","~$goog.html.SafeStyle","^2>","^1V","~$goog.html.uncheckedconversions","^1Y","^1T"]]],["^16","goog/structs/map.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^16","goog/html/safehtml.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^1P","^1Q","~$goog.dom.TagName","~$goog.dom.tags","^2<","^2B","~$goog.html.SafeStyleSheet","^2>","^1V","^2=","^1W","^1X","~$goog.labs.userAgent.browser","^1S","^1Y","^1Z","^1T"]]],["^16","goog/dom/tags.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^1S"]]],["^16","goog/fs/blob.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^1P"]]],["^16","goog/asserts/asserts.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^16","goog/uri/uri.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^1P","^1Q","^1O","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^16","edamame/impl/read_fn.cljc"],["8915b89bb492e9e815fdda7c1acef2683070dc2a","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^T"]]],["^16","goog/i18n/bidi.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U"]]],["^16","goog/fs/url.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U"]]],["^16","goog/base.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",[]]],["^16","goog/structs/structs.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^1P","^1S"]]],["^16","cljs/tools/reader/impl/errors.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^T","^20","^1N","^26"]]],["^16","clojure/string.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^T","^1O","^24"]]],["^16","goog/string/string.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","~$goog.dom.safe","^2C","^1Y","^1T"]]],["^16","goog/reflect/reflect.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U"]]],["^16","goog/labs/useragent/util.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^1T"]]],["^16","goog/string/stringbuffer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U"]]],["^16","cljs/tools/reader/reader_types.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^T","^21","^1O","^24"]]],["^16","goog/iter/iter.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^1P","^1Q","^2@","~$goog.math"]]],["^16","goog/html/uncheckedconversions.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^1Q","^2A","^2<","^2B","^2H","^2>","^1V","^1Y","^1T","^1W"]]],["^16","cljs/tools/reader/impl/commons.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^T","^1[","^20","^21"]]],["^16","goog/dom/htmlelement.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U"]]],["^16","cljs/core.cljs"],["528fbd795675bc73c189ce8a8429415f03165a3b","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","~$goog.math.Long","~$goog.math.Integer","^1O","^1S","^1P","~$goog.Uri","^24"]]],["^16","goog/html/safescript.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^1Y","^1Z","^2=","^1Q"]]],["^16","goog/html/safestylesheet.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^1Y","^2B","^1Z","^1P","^1S","^1Q","^1T"]]],["^16","goog/math/integer.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^2:"]]],["^16","goog/uri/utils.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^1Q","^1O"]]],["^16","goog/string/const.js"],["b8c673dd84d8ed85c6d857e28afee5524a0ef82c","^1I",["^ ","^1J",null,"^1K",["^L",[]],"^1L",["^U","^1Q","^1Z"]]]]],"~:clj-info",["^ ","jar:file:/Users/hagenek/.m2/repository/binaryage/devtools/1.0.3/devtools-1.0.3.jar!/devtools/defaults.clj",1638904136000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/edn.clj",1628015039000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/string.clj",1628015039000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes.cljc",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/data.json/2.4.0/data.json-2.4.0.jar!/clojure/data/json.clj",1628015036000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/instant.clj",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/java/io.clj",1628015039000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/externs.clj",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64.clj",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/pprint.clj",1628015039000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1628015036000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map.clj",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/set.clj",1628015039000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/cljs/tools/reader/reader_types.clj",1628015036000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/util.cljc",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/js_deps.cljc",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/source_map/base64_vlq.clj",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1628015036000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/core.cljc",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1628015036000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/tagged_literals.cljc",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1628015036000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/impl.cljc",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1628015036000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/env.cljc",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer.cljc",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/core.clj",1628015039000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/compiler.cljc",1628015038000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojure/1.10.3/clojure-1.10.3.jar!/clojure/instant.clj",1628015039000,"jar:file:/Users/hagenek/.m2/repository/org/clojure/clojurescript/1.10.879/clojurescript-1.10.879.jar!/cljs/analyzer/passes/and_or.cljc",1628015038000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","edamame/core.cljc","^7",1,"^8",5,"^9",1,"^:",17],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I"],"^J",null,"^K",["^L",[]],"^M","^N","^Q",null,"^R",["^ ","^S","^S","~$p","^S","^T","^T","^U","^U"],"^V",["^L",["^W"]],"~:shadow/js-access-global",["^L",["Error"]],"^X",null,"~:defs",["^ ","~$parse-string",["^ ","~:protocol-inline",null,"^5",["^ ","^6","edamame/core.cljc","^7",5,"^8",7,"^9",5,"^:",19,"~:arglists",["^[",["~$quote",["^[",[["~$s"],["~$s","~$opts"]]]]],"~:doc","Parses first EDN value from string.\n\n  Supported parsing options:\n\n  `:deref`: parse forms starting with `@`. If `true`, the resulting\n  expression will be parsed as `(deref expr)`.\n\n  `:fn`: parse function literals (`#(inc %)`). If `true`, will be parsed as `(fn [%1] (inc %))`.\n\n  `:quote`: parse quoted expression `'foo`. If `true`, will be parsed as `(quote foo)`.\n\n  `:read-eval`: parse read-eval (`=(+ 1 2 3)`). If `true`, the\n  resulting expression will be parsed as `(read-eval (+ 1 2 3))`.\n\n  `:regex`: parse regex literals (`#\"foo\"`). If `true`, defaults to\n  `re-pattern`.\n\n  `:syntax-quote`: parse syntax-quote (`(+ 1 2 3)`). Symbols get\n  qualified using `:resolve-symbol` which defaults to `identity`:\n  `(parse-string \"`x\" {:syntax-quote {:resolve-symbol #(symbol \"user\" (str %))}})\n  ;;=> (quote user/x)`.\n\n  `:var`: parse var literals (`#'foo`). If `true`, the resulting\n  expression will be parsed as `(var foo)`.\n\n  `:all`: when `true`, the above options will be set to `true` unless\n  explicitly provided.\n\n  Supported options for processing reader conditionals:\n\n  `:read-cond`: - `:allow` to process reader conditionals, or\n                  `:preserve` to keep all branches\n  `:features`: - persistent set of feature keywords for reader conditionals (e.g. `#{:clj}`).\n\n  `:auto-resolve`: map of alias to namespace symbols for\n  auto-resolving keywords. Use `:current` as the alias for the current\n  namespace.\n\n  `:readers`: data readers.\n\n  Additional arguments to tools.reader may be passed with\n  `:tools.reader/opts`, like `:readers` for passing reader tag functions.\n\n  Deprecated options:\n\n  `:dispatch`: DEPRECATED by parsing options.\n\n  ","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["~$s"],["~$s","^3P"]],"^3N",["^[",[["~$s"],["~$s","^3P"]]],"~:arglists-meta",["^[",[null,null]]]],"^M","^1B","^6","edamame/core.cljc","^:",19,"^3R",["^ ","^3S",false,"^3T",2,"^3U",2,"^3V",[["~$s"],["~$s","^3P"]],"^3N",["^[",[["~$s"],["~$s","^3P"]]],"^3W",["^[",[null,null]]],"^3V",[["~$s"],["~$s","^3P"]],"~:protocol-impl",null,"^3T",2,"^3W",["^[",[null,null]],"^8",1,"^3S",false,"~:methods",[["^ ","^3T",1,"^3S",false,"~:tag",["^L",[null,"~$js/RegExp","~$clj","~$any","~$cljs.core/Keyword","~$cljs.core/ISet","~$cljs.tools.reader.impl.utils/ReaderConditional","~$cljs.core/List","~$not-native","~$cljs.core/MetaFn","~$clj-nil"]]],["^ ","^3T",2,"^3S",false,"^3Z",["^L",[null,"^3[","^40","^41","^42","^43","^44","^45","^46","^47","^48"]]]],"^7",5,"^9",5,"^3U",2,"~:fn-var",true,"^3N",["^[",[["~$s"],["~$s","^3P"]]],"^3Q","Parses first EDN value from string.\n\n  Supported parsing options:\n\n  `:deref`: parse forms starting with `@`. If `true`, the resulting\n  expression will be parsed as `(deref expr)`.\n\n  `:fn`: parse function literals (`#(inc %)`). If `true`, will be parsed as `(fn [%1] (inc %))`.\n\n  `:quote`: parse quoted expression `'foo`. If `true`, will be parsed as `(quote foo)`.\n\n  `:read-eval`: parse read-eval (`=(+ 1 2 3)`). If `true`, the\n  resulting expression will be parsed as `(read-eval (+ 1 2 3))`.\n\n  `:regex`: parse regex literals (`#\"foo\"`). If `true`, defaults to\n  `re-pattern`.\n\n  `:syntax-quote`: parse syntax-quote (`(+ 1 2 3)`). Symbols get\n  qualified using `:resolve-symbol` which defaults to `identity`:\n  `(parse-string \"`x\" {:syntax-quote {:resolve-symbol #(symbol \"user\" (str %))}})\n  ;;=> (quote user/x)`.\n\n  `:var`: parse var literals (`#'foo`). If `true`, the resulting\n  expression will be parsed as `(var foo)`.\n\n  `:all`: when `true`, the above options will be set to `true` unless\n  explicitly provided.\n\n  Supported options for processing reader conditionals:\n\n  `:read-cond`: - `:allow` to process reader conditionals, or\n                  `:preserve` to keep all branches\n  `:features`: - persistent set of feature keywords for reader conditionals (e.g. `#{:clj}`).\n\n  `:auto-resolve`: map of alias to namespace symbols for\n  auto-resolving keywords. Use `:current` as the alias for the current\n  namespace.\n\n  `:readers`: data readers.\n\n  Additional arguments to tools.reader may be passed with\n  `:tools.reader/opts`, like `:readers` for passing reader tag functions.\n\n  Deprecated options:\n\n  `:dispatch`: DEPRECATED by parsing options.\n\n  "],"~$parse-string-all",["^ ","^3M",null,"^5",["^ ","^6","edamame/core.cljc","^7",59,"^8",7,"^9",59,"^:",23,"^3N",["^[",["^3O",["^[",[["~$s"],["~$s","^3P"]]]]],"^3Q","Like parse-string but parses all values from string and returns them\n  in a vector.","^3R",["^ ","^3S",false,"^3T",2,"^3U",2,"^3V",[["~$s"],["~$s","^3P"]],"^3N",["^[",[["~$s"],["~$s","^3P"]]],"^3W",["^[",[null,null]]]],"^M","^1E","^6","edamame/core.cljc","^:",23,"^3R",["^ ","^3S",false,"^3T",2,"^3U",2,"^3V",[["~$s"],["~$s","^3P"]],"^3N",["^[",[["~$s"],["~$s","^3P"]]],"^3W",["^[",[null,null]]],"^3V",[["~$s"],["~$s","^3P"]],"^3X",null,"^3T",2,"^3W",["^[",[null,null]],"^8",1,"^3S",false,"^3Y",[["^ ","^3T",1,"^3S",false,"^3Z","^40"],["^ ","^3T",2,"^3S",false,"^3Z","^40"]],"^7",59,"^9",59,"^3U",2,"^49",true,"^3N",["^[",[["~$s"],["~$s","^3P"]]],"^3Q","Like parse-string but parses all values from string and returns them\n  in a vector."]],"^Y",["^ ","^T","^T"],"^12",["^ ","^W",["^L",[]]],"^13",["^ "],"^14",["^U","^T","^S"]],"^P","^N","~:ns-specs",["^ "],"~:ns-spec-vars",["^L",[]],"~:compiler-options",["^1H",[["^4=","~:static-fns"],true,["^4=","~:shadow-tweaks"],null,["^4=","~:source-map-inline"],null,["^4=","~:elide-asserts"],false,["^4=","~:optimize-constants"],null,["^4=","^19"],null,["^4=","~:external-config"],null,["^4=","~:tooling-config"],null,["^4=","~:emit-constants"],null,["^4=","~:load-tests"],null,["^4=","~:form-size-threshold"],null,["^4=","~:data-readers"],null,["^4=","~:infer-externs"],"~:auto",["^4=","^1;"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^4=","~:fn-invoke-direct"],null,["^4=","~:source-map"],"/dev/null"]]]